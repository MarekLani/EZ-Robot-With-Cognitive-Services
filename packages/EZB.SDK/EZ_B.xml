<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EZ_B</name>
    </assembly>
    <members>
        <member name="M:EZ_B.ADC.GetADCValue(EZ_B.ADC.ADCPortEnum)">
            <summary>
             Get an integer from 0-255 (8 bits) representing the relative voltage of a specified ADC port (Between 0 and 5 volts)
            </summary>
        </member>
        <member name="M:EZ_B.ADC.GetADCValue12Bit(EZ_B.ADC.ADCPortEnum)">
            <summary>
             Get an integer from 0-4096 (12 bits) representing the relative voltage of a specified ADC port (Between 0 and 5 volts)
            </summary>
        </member>
        <member name="M:EZ_B.ADC.GetADCVoltageFromValue(System.Int32)">
            <summary>
            Returns the voltage relative to the inputted value. If you want to display the Value and Voltage, you can pass the value to this function rather then executing a new command. This saves bandwidth over the line.
            </summary>
        </member>
        <member name="M:EZ_B.ADC.GetADCVoltage(EZ_B.ADC.ADCPortEnum)">
            <summary>
             Get the voltage from 0-5v of a specified ADC port
            </summary>
        </member>
        <member name="T:EZ_B.ADC.ADCPortEnum">
            <summary>
            List of ADC Ports
            </summary>
        </member>
        <member name="M:EZ_B.AvgHistogramCls.Add(System.Double)">
            <summary>
            Add a new item to the histogram and return the current average
            </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.Capture.graphState">
            <summary> Fired when a capture is completed (manually or automatically). </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.Capture.baseGrabFlt">
            <summary> grabber filter interface. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.#ctor(EZ_B.VideoCapture.VideoCaptureDevice)">
            <summary> 
             Create a new Capture object. 
             videoDevice and audioDevice can be null if you do not 
             wish to capture both audio and video. However at least
             one must be a valid device. Use the <see cref="!:Filters"/> 
             class to list available devices.
             </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.Finalize">
            <summary> Destructor. Dispose of resources. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.Stop">
            <summary> 
             Stop the current capture capture. If there is no
             current capture, this method will succeed.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.Dispose">
            <summary> 
             Calls Stop, releases all references. If a capture is in progress
             it will be stopped, but the CaptureComplete event will NOT fire.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.createGraph">
            <summary> 
             Create a new filter graph and add filters (devices, compressors, 
             misc), but leave the filters unconnected. Call renderGraph()
             to connect the filters.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.renderGraph">
            <summary>
             Connects the filters of a previously created graph 
             (created by createGraph()). Once rendered the graph
             is ready to be used. This method may also destroy
             streams if we have streams we no longer want.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.startPreviewIfNeeded">
            <summary>
             Setup and start the preview window if the user has
             requested it (by setting PreviewWindow).
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.derenderGraph">
            <summary>
             Disconnect and remove all filters except the device
             and compressor filters. This is the opposite of
             renderGraph(). Soem properties such as FrameRate
             can only be set when the device output pins are not
             connected. 
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.removeDownstream(DShowNET.IBaseFilter,System.Boolean)">
            <summary>
             Removes all filters downstream from a filter from the graph.
             This is called only by derenderGraph() to remove everything
             from the graph except the devices and compressors. The parameter
             "removeFirstFilter" is used to keep a compressor (that should
             be immediately downstream of the device) if one is begin used.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.destroyGraph">
            <summary>
             Completely tear down a filter graph and 
             release all associated resources.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.onPreviewWindowResize(System.Object,System.EventArgs)">
            <summary> Resize the preview when the PreviewWindow is resized </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.getStreamConfigSetting(DShowNET.IAMStreamConfig,System.String)">
            <summary>
             Retrieves the value of one member of the IAMStreamConfig format block.
             Helper function for several properties that expose
             video/audio settings from IAMStreamConfig.GetFormat().
             IAMStreamConfig.GetFormat() returns a AMMediaType struct.
             AMMediaType.formatPtr points to a format block structure.
             This format block structure may be one of several 
             types, the type being determined by AMMediaType.formatType.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.setStreamConfigSetting(DShowNET.IAMStreamConfig,System.String,System.Object)">
            <summary>
             Set the value of one member of the IAMStreamConfig format block.
             Helper function for several properties that expose
             video/audio settings from IAMStreamConfig.GetFormat().
             IAMStreamConfig.GetFormat() returns a AMMediaType struct.
             AMMediaType.formatPtr points to a format block structure.
             This format block structure may be one of several 
             types, the type being determined by AMMediaType.formatType.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.assertStopped">
            <summary>
             Assert that the class is in a Stopped state.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Capture.OnCaptureDone">
            <summary> capture event, triggered by buffer callback. </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.Capture.Capturing">
            <summary> Is the class currently capturing. Read-only. </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.Capture.Stopped">
            <summary> Is the class currently stopped. Read-only. </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.Capture.PreviewWindow">
            <summary>
             The control that will host the preview window. 
            </summary>
            <remarks>
             Setting this property will begin video preview
             immediately. Set this property after setting all
             other properties to avoid unnecessary changes
             to the internal filter graph (some properties like
             FrameSize require the internal filter graph to be 
             stopped and disconnected before the property
             can be retrieved or set).
             
            <para>
             To stop video preview, set this property to null. </para>
            </remarks>
        </member>
        <member name="P:EZ_B.VideoCapture.Capture.VideoCaps">
            <summary>
             The capabilities of the video device.
            </summary>
            <remarks>
             It may be required to cue the capture (see <see cref="!:Cue"/>) 
             before all capabilities are correctly reported. If you 
             have such a device, the developer would be interested to
             hear from you.
            
            <para>
             The information contained in this property is retrieved and
             cached the first time this property is accessed. Future
             calls to this property use the cached results. This was done 
             for performance. </para>
             
            <para>
             However, this means <b>you may get different results depending 
             on when you access this property first</b>. If you are experiencing 
             problems, try accessing the property immediately after creating 
             the Capture class or immediately after setting the video and 
             audio compressors. Also, inform the developer. </para>
            </remarks>
        </member>
        <member name="P:EZ_B.VideoCapture.Capture.VideoDevice">
            <summary> 
             The video capture device filter. Read-only. To use a different 
             device, dispose of the current Capture instance and create a new 
             instance with the desired device. 
            </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.Capture.VideoCompressor">
            <summary> 
             The video compression filter. When this property is changed 
             the internal filter graph is rebuilt. This means that some properties
             will be reset. Set this property as early as possible to avoid losing 
             changes. This property cannot be changed while capturing.
            </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.Capture.VideoSource">
            <summary> 
             The current video source. Use Capture.VideoSources to 
             list available sources. Set to null to disable all 
             sources (mute).
            </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.Capture.VideoSources">
            <summary> 
             Collection of available video sources/physical connectors 
             on the current video device. 
            </summary>
            <remarks>
             In most cases, if the device has only one source, 
             this collection will be empty. 
            
            <para>
             The information contained in this property is retrieved and
             cached the first time this property is accessed. Future
             calls to this property use the cached results. This was done 
             for performance. </para>
             
            <para>
             However, this means <b>you may get different results depending 
             on when you access this property first</b>. If you are experiencing 
             problems, try accessing the property immediately after creating 
             the Capture class or immediately after setting the video and 
             audio compressors. Also, inform the developer. </para>
            </remarks>
        </member>
        <member name="P:EZ_B.VideoCapture.Capture.PropertyPages">
            <summary>
             Available property pages. 
            </summary>
            <remarks>
             These are property pages exposed by the DirectShow filters. 
             These property pages allow users modify settings on the 
             filters directly. 
            
            <para>
             The information contained in this property is retrieved and
             cached the first time this property is accessed. Future
             calls to this property use the cached results. This was done 
             for performance. </para>
             
            <para>
             However, this means <b>you may get different results depending 
             on when you access this property first</b>. If you are experiencing 
             problems, try accessing the property immediately after creating 
             the Capture class or immediately after setting the video and 
             audio compressors. Also, inform the developer. </para>
            </remarks>
        </member>
        <member name="P:EZ_B.VideoCapture.Capture.Tuner">
            <summary>
             The TV Tuner or null if the current video device 
             does not have a TV Tuner.
            </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.Capture.FrameRate">
            <summary>
             Gets and sets the frame rate used to capture video.
            </summary>
            <remarks>
             Common frame rates: 24 fps for film, 25 for PAL, 29.997
             for NTSC. Not all NTSC capture cards can capture at 
             exactly 29.997 fps. Not all frame rates are supported. 
             When changing the frame rate, the closest supported 
             frame rate will be used. 
             
            <para>
             Not all devices support getting/setting this property.
             If this property is not supported, accessing it will
             throw and exception. </para>
             
            <para>
             This property cannot be changed while capturing. Changing 
             this property while preview is enabled will cause some 
             fickering while the internal filter graph is partially
             rebuilt. Changing this property while cued will cancel the
             cue. Call Cue() again to re-cue the capture. </para>
            </remarks>
        </member>
        <member name="P:EZ_B.VideoCapture.Capture.FrameSize">
            <summary>
             Gets and sets the frame size used to capture video.
            </summary>
            <remarks>
             To change the frame size, assign a new Size object 
             to this property <code>capture.Size = new Size( w, h );</code>
             rather than modifying the size in place 
             (capture.Size.Width = w;). Not all frame
             rates are supported.
             
            <para>
             Not all devices support getting/setting this property.
             If this property is not supported, accessing it will
             throw and exception. </para>
            
            <para> 
             This property cannot be changed while capturing. Changing 
             this property while preview is enabled will cause some 
             fickering while the internal filter graph is partially
             rebuilt. Changing this property while cued will cancel the
             cue. Call Cue() again to re-cue the capture. </para>
            </remarks>
        </member>
        <member name="T:EZ_B.VideoCapture.Capture.GraphState">
            <summary> Possible states of the interal filter graph </summary>
        </member>
        <member name="T:EZ_B.VideoCapture.CrossbarSource">
            <summary>
             Represents a physical connector or source on an 
             audio/video device. This class is used on filters that
             support the IAMCrossbar interface such as TV Tuners.
            </summary>
        </member>
        <member name="T:EZ_B.VideoCapture.Source">
            <summary>
             Represents a physical connector or source on an audio/video device.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Source.ToString">
            <summary> Obtains the String representation of this instance. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Source.Finalize">
            <summary> Release unmanaged resources. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Source.Dispose">
            <summary> Release unmanaged resources. </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.Source.Name">
            <summary> The name of the source. Read-only. </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.Source.Enabled">
            <summary> Is this source enabled. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.CrossbarSource.#ctor(DShowNET.IAMCrossbar,System.Int32,System.Int32,DShowNET.PhysicalConnectorType)">
            <summary> Constructor. This class cannot be created directly. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.CrossbarSource.getName(DShowNET.PhysicalConnectorType)">
            <summary> Retrieve the friendly name of a connectorType. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.CrossbarSource.Dispose">
            <summary> Release unmanaged resources. </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.CrossbarSource.Enabled">
            <summary> Enabled or disable this source. </summary>
        </member>
        <member name="T:EZ_B.VideoCapture.DeviceInUseException">
            <summary>
             Exception thrown when the device cannot be rendered or started.
            </summary>
        </member>
        <member name="T:EZ_B.VideoCapture.DirectShowPropertyPage">
            <summary>
             Property pages for a DirectShow filter (e.g. hardware device). These
             property pages do not support persisting their settings. 
            </summary>
        </member>
        <member name="T:EZ_B.VideoCapture.PropertyPage">
            <summary>
             A base class for representing property pages exposed by filters. 
            </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.PropertyPage.Name">
            <summary> Name of property page. This name may not be unique </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.PropertyPage.SupportsPersisting">
            <summary> Does this property page support saving and loading the user's choices. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.PropertyPage.#ctor">
            <summary> Constructor </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.PropertyPage.Show(System.Windows.Forms.Control)">
            <summary> 
             Show the property page. Some property pages cannot be displayed 
             while previewing and/or capturing. This method will block until
             the property page is closed by the user.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.PropertyPage.Dispose">
            <summary> Release unmanaged resources </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.PropertyPage.State">
            <summary> 
             Get or set the state of the property page. This is used to save
             and restore the user's choices without redisplaying the property page. 
            </summary>
            <remarks>
             After showing this property page, read and store the value of 
             this property. At a later time, the user's choices can be 
             reloaded by setting this property with the value stored earlier. 
             Note that some property pages, after setting this property, 
             will not reflect the new state. However, the filter will use the
             new settings. 
             
            <para>
             When reading this property, copy the entire array at once then manipulate
             your local copy (e..g byte[] myState = propertyPage.State). When
             setting this property set the entire array at once (e.g. propertyPage = myState).
            </para>
             
            <para>
             Not all property pages support saving/loading state. Check the 
             <see cref="F:EZ_B.VideoCapture.PropertyPage.SupportsPersisting"/> property to determine if this 
             property page supports it.
            </para>
            </remarks>
        </member>
        <member name="F:EZ_B.VideoCapture.DirectShowPropertyPage.specifyPropertyPages">
            <summary> COM ISpecifyPropertyPages interface </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.DirectShowPropertyPage.#ctor(System.String,DShowNET.ISpecifyPropertyPages)">
            <summary> Constructor </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.DirectShowPropertyPage.Show(System.Windows.Forms.Control)">
            <summary> 
             Show the property page. Some property pages cannot be displayed 
             while previewing and/or capturing. 
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.DirectShowPropertyPage.Dispose">
            <summary> Release unmanaged resources </summary>
        </member>
        <member name="T:EZ_B.VideoCapture.VideoCaptureDevice">
            <summary>
             Represents a DirectShow filter (e.g. video capture device, 
             compression codec).
            </summary>
            <remarks>
             To save a chosen filer for later recall
             save the MonikerString property on the filter: 
             <code><div style="background-color:whitesmoke;">
              string savedMonikerString = myFilter.MonikerString;
             </div></code>
             
             To recall the filter create a new Filter class and pass the 
             string to the constructor: 
             <code><div style="background-color:whitesmoke;">
              Filter mySelectedFilter = new Filter( savedMonikerString );
             </div></code>
            </remarks>
        </member>
        <member name="F:EZ_B.VideoCapture.VideoCaptureDevice.Name">
            <summary> Human-readable name of the filter </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.VideoCaptureDevice.MonikerString">
            <summary> Unique string referencing this filter. This string can be used to recreate this filter. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.VideoCaptureDevice.#ctor(System.String)">
            <summary> Create a new filter from its moniker string. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.VideoCaptureDevice.#ctor(System.Runtime.InteropServices.UCOMIMoniker)">
            <summary> Create a new filter from its moniker </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.VideoCaptureDevice.getMonikerString(System.Runtime.InteropServices.UCOMIMoniker)">
            <summary> Retrieve the a moniker's display name (i.e. it's unique string) </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.VideoCaptureDevice.getName(System.Runtime.InteropServices.UCOMIMoniker)">
            <summary> Retrieve the human-readable name of the filter </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.VideoCaptureDevice.getName(System.String)">
            <summary> Get a moniker's human-readable name based on a moniker string. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.VideoCaptureDevice.getAnyMoniker">
            <summary>
             This method gets a UCOMIMoniker object.
            
             HACK: The only way to create a UCOMIMoniker from a moniker 
             string is to use UCOMIMoniker.ParseDisplayName(). So I 
             need ANY UCOMIMoniker object so that I can call 
             ParseDisplayName(). Does anyone have a better solution?
            
             This assumes there is at least one video compressor filter
             installed on the system.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.VideoCaptureDevice.CompareTo(System.Object)">
            <summary>
             Compares the current instance with another object of 
             the same type.
            </summary>
        </member>
        <member name="T:EZ_B.VideoCapture.FilterCollection">
            <summary>
             A collection of Filter objects (DirectShow filters).
             This is used by the <see cref="T:EZ_B.VideoCapture.Capture"/> class to provide
             lists of capture devices and compression filters. This class
             cannot be created directly.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.FilterCollection.#ctor(System.Guid)">
            <summary> Populate the collection with a list of filters from a particular category. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.FilterCollection.getFilters(System.Guid)">
            <summary> Populate the InnerList with a list of filters from a particular category </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.FilterCollection.Item(System.Int32)">
            <summary> Get the filter at the specified index. </summary>
        </member>
        <member name="T:EZ_B.VideoCapture.VideoCaptureDevices">
            <summary>
             Provides collections of devices and compression codecs
             installed on the system. 
            </summary>
            <example>
             Devices and compression codecs are implemented in DirectShow 
             as filters, see the <see cref="!:Filter"/> class for more 
             information. To list the available video devices:
             <code><div style="background-color:whitesmoke;">
              Filters filters = new Filters();
              foreach ( Filter f in filters.VideoInputDevices )
              {
            	Debug.WriteLine( f.Name );
              }
             </div></code>
             <seealso cref="!:Filter"/>
            </example>
        </member>
        <member name="F:EZ_B.VideoCapture.VideoCaptureDevices.VideoInputDevices">
            <summary> Collection of available video capture devices. </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.VideoCaptureDevices.VideoCompressors">
            <summary> Collection of available video compressors. </summary>
        </member>
        <member name="T:EZ_B.VideoCapture.PropertyPageCollection">
            <summary>
             A collection of available PropertyPages in a DirectShow
             filter graph. It is up to the driver manufacturer to implement
             a property pages on their drivers. The list of supported 
             property pages will vary from driver to driver.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.PropertyPageCollection.#ctor">
            <summary> Initialize collection with no property pages. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.PropertyPageCollection.#ctor(DShowNET.ICaptureGraphBuilder2,DShowNET.IBaseFilter,DShowNET.IBaseFilter,EZ_B.VideoCapture.SourceCollection)">
            <summary> Initialize collection with property pages from existing graph. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.PropertyPageCollection.Finalize">
            <summary> Destructor. Release unmanaged resources. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.PropertyPageCollection.Clear">
            <summary> Empty the collection. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.PropertyPageCollection.Dispose">
            <summary> Release unmanaged resources </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.PropertyPageCollection.addFromGraph(DShowNET.ICaptureGraphBuilder2,DShowNET.IBaseFilter,DShowNET.IBaseFilter,EZ_B.VideoCapture.SourceCollection)">
            <summary> Populate the collection by looking for commonly implemented property pages. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.PropertyPageCollection.addIfSupported(System.Object,System.String)">
            <summary> 
             Returns the object as an ISpecificPropertyPage
             if the object supports the ISpecificPropertyPage
             interface and has at least one property page.
            </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.PropertyPageCollection.Item(System.Int32)">
            <summary> Get the filter at the specified index. </summary>
        </member>
        <member name="T:EZ_B.VideoCapture.SourceCollection">
            <summary>
             A collection of sources (or physical connectors) on an 
             audio or video device. This is used by the <see cref="T:EZ_B.VideoCapture.Capture"/>
             class to provide a list of available sources on the currently
             selected audio and video devices. This class cannot be created
             directly.  This class assumes there is only 1 video and 1 audio
             crossbar and all input pins route to a single output pin on each 
             crossbar.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.SourceCollection.#ctor">
            <summary> Initialize collection with no sources. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.SourceCollection.#ctor(DShowNET.ICaptureGraphBuilder2,DShowNET.IBaseFilter,System.Boolean)">
            <summary> Initialize collection with sources from graph. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.SourceCollection.Finalize">
            <summary> Destructor. Release unmanaged resources. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.SourceCollection.Clear">
            <summary> Empty the collection. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.SourceCollection.Dispose">
            <summary> Release unmanaged resources. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.SourceCollection.addFromGraph(DShowNET.ICaptureGraphBuilder2,DShowNET.IBaseFilter,System.Boolean)">
            <summary> Populate the collection from a filter graph. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.SourceCollection.findCrossbars(DShowNET.ICaptureGraphBuilder2,DShowNET.IBaseFilter)">
            <summary>
             Retrieve a list of crossbar filters in the graph.
             Most hardware devices should have a maximum of 2 crossbars, 
             one for video and another for audio.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.SourceCollection.findCrossbarSources(DShowNET.ICaptureGraphBuilder2,DShowNET.IAMCrossbar,System.Boolean)">
            <summary>
             Populate the internal InnerList with sources/physical connectors
             found on the crossbars. Each instance of this class is limited
             to video only or audio only sources ( specified by the isVideoDevice
             parameter on the constructor) so we check each source before adding
             it to the list.
            </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.SourceCollection.Item(System.Int32)">
            <summary> Get the source at the specified index. </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.SourceCollection.CurrentSource">
            <summary>
             Gets or sets the source/physical connector currently in use.
             This is marked internal so that the Capture class can control
             how and when the source is changed.
            </summary>
        </member>
        <member name="T:EZ_B.VideoCapture.TunerInputType">
            <summary>
             Specify the frequency of the TV tuner.
            </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.TunerInputType.Cable">
            <summary> Cable frequency </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.TunerInputType.Antenna">
            <summary> Antenna frequency </summary>
        </member>
        <member name="T:EZ_B.VideoCapture.Tuner">
            <summary>
             Control and query a hardware TV Tuner.
            </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.Tuner.#ctor(DShowNET.IAMTVTuner)">
            <summary> Initialize this object with a DirectShow tuner </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.Tuner.Channel">
            <summary>
             Get or set the TV Tuner channel.
            </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.Tuner.InputType">
            <summary>
             Get or set the tuner frequency (cable or antenna).
            </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.Tuner.SignalPresent">
            <summary>
             Indicates whether a signal is present on the current channel.
             If the signal strength cannot be determined, a NotSupportedException
             is thrown.
            </summary>
        </member>
        <member name="T:EZ_B.VideoCapture.VfwCompressorPropertyPage">
            <summary>
             The property page to configure a Video for Windows compliant
             compression codec. Most compressors support this property page
             rather than a DirectShow property page. Also, most compressors
             do not support the IAMVideoCompression interface so this
             property page is the only method to configure a compressor. 
            </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.VfwCompressorPropertyPage.vfwCompressDialogs">
            <summary> Video for Windows compression dialog interface </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.VfwCompressorPropertyPage.#ctor(System.String,DShowNET.IAMVfwCompressDialogs)">
            <summary> Constructor </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.VfwCompressorPropertyPage.Show(System.Windows.Forms.Control)">
            <summary> 
             Show the property page. Some property pages cannot be displayed 
             while previewing and/or capturing. 
            </summary>
        </member>
        <member name="P:EZ_B.VideoCapture.VfwCompressorPropertyPage.State">
            <summary> 
             Get or set the state of the property page. This is used to save
             and restore the user's choices without redisplaying the property page.
             This property will be null if unable to retrieve the property page's
             state.
            </summary>
            <remarks>
             After showing this property page, read and store the value of 
             this property. At a later time, the user's choices can be 
             reloaded by setting this property with the value stored earlier. 
             Note that some property pages, after setting this property, 
             will not reflect the new state. However, the filter will use the
             new settings.
            </remarks>
        </member>
        <member name="T:EZ_B.VideoCapture.VideoCapabilities">
            <summary>
             Capabilities of the video device such as 
             min/max frame size and frame rate.
            </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.VideoCapabilities.InputSize">
            <summary> Native size of the incoming video signal. This is the largest signal the filter can digitize with every pixel remaining unique. Read-only. </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.VideoCapabilities.MinFrameSize">
            <summary> Minimum supported frame size. Read-only. </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.VideoCapabilities.MaxFrameSize">
            <summary> Maximum supported frame size. Read-only. </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.VideoCapabilities.FrameSizeGranularityX">
            <summary> Granularity of the output width. This value specifies the increments that are valid between MinFrameSize and MaxFrameSize. Read-only. </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.VideoCapabilities.FrameSizeGranularityY">
            <summary> Granularity of the output height. This value specifies the increments that are valid between MinFrameSize and MaxFrameSize. Read-only. </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.VideoCapabilities.MinFrameRate">
            <summary> Minimum supported frame rate. Read-only. </summary>
        </member>
        <member name="F:EZ_B.VideoCapture.VideoCapabilities.MaxFrameRate">
            <summary> Maximum supported frame rate. Read-only. </summary>
        </member>
        <member name="M:EZ_B.VideoCapture.VideoCapabilities.#ctor(DShowNET.IAMStreamConfig)">
            <summary> Retrieve capabilities of a video device </summary>
        </member>
        <member name="P:EZ_B.Classes.HMC5883Cls.Heading">
            <summary>
            Degrees are assuming compass is flat with no tilt using X and Y for easy calculation
            heading = atan2(x, y) / 0.0174532925
            </summary>
        </member>
        <member name="M:DShowNET.DsUtils.FreeAMMediaType(DShowNET.AMMediaType)">
            <summary> 
             Free the nested structures and release any 
             COM objects within an AMMediaType struct.
            </summary>
        </member>
        <member name="F:DShowNET.FilterCategory.VideoInputDevice">
            <summary> CLSID_VideoInputDeviceCategory, video capture category </summary>
        </member>
        <member name="F:DShowNET.FilterCategory.VideoCompressorCategory">
            <summary> CLSID_VideoCompressorCategory, video compressor category </summary>
        </member>
        <member name="F:DShowNET.FilterCategory.LegacyAmFilterCategory">
            <summary> CLSID_LegacyAmFilterCategory, legacy filters </summary>
        </member>
        <member name="F:DShowNET.Clsid.SystemDeviceEnum">
            <summary> CLSID_SystemDeviceEnum for ICreateDevEnum </summary>
        </member>
        <member name="F:DShowNET.Clsid.FilterGraph">
            <summary> CLSID_FilterGraph, filter Graph </summary>
        </member>
        <member name="F:DShowNET.Clsid.CaptureGraphBuilder2">
            <summary> CLSID_CaptureGraphBuilder2, new Capture graph building </summary>
        </member>
        <member name="F:DShowNET.Clsid.SampleGrabber">
            <summary> CLSID_SampleGrabber, Sample Grabber filter </summary>
        </member>
        <member name="F:DShowNET.Clsid.DvdGraphBuilder">
            <summary> CLSID_DvdGraphBuilder, DVD graph builder </summary>
        </member>
        <member name="F:DShowNET.Clsid.StreamBufferSink">
            <summary> CLSID_StreamBufferSink, stream buffer sink </summary>
        </member>
        <member name="F:DShowNET.Clsid.StreamBufferSource">
            <summary> CLSID_StreamBufferSource, stream buffer sink </summary>
        </member>
        <member name="F:DShowNET.Clsid.VideoMixingRenderer">
            <summary> CLSID_VideoMixingRenderer, video mixing renderer 7 </summary>
        </member>
        <member name="F:DShowNET.Clsid.VideoMixingRenderer9">
            <summary> CLSID_VideoMixingRenderer9, video mixing renderer 9 </summary>
        </member>
        <member name="F:DShowNET.Clsid.VideoRendererDefault">
            <summary> CLSID_VideoRendererDefault, default vmr renderer </summary>
        </member>
        <member name="F:DShowNET.Clsid.AviSplitter">
            <summary> CLSID_AviSplitter, split an AVI stream into separate video and audio streams </summary>
        </member>
        <member name="F:DShowNET.Clsid.SmartTee">
            <summary> CLSID_SmartTee, create a preview stream when device only provides a capture stream. </summary>
        </member>
        <member name="F:DShowNET.MediaType.Video">
            <summary> MEDIATYPE_Video 'vids' </summary>
        </member>
        <member name="F:DShowNET.MediaType.Interleaved">
            <summary> MEDIATYPE_Interleaved 'iavs' </summary>
        </member>
        <member name="F:DShowNET.MediaType.Audio">
            <summary> MEDIATYPE_Audio 'auds' </summary>
        </member>
        <member name="F:DShowNET.MediaType.Text">
            <summary> MEDIATYPE_Text 'txts' </summary>
        </member>
        <member name="F:DShowNET.MediaType.Stream">
            <summary> MEDIATYPE_Stream </summary>
        </member>
        <member name="F:DShowNET.MediaSubType.YUYV">
            <summary> MEDIASUBTYPE_YUYV 'YUYV' </summary>
        </member>
        <member name="F:DShowNET.MediaSubType.IYUV">
            <summary> MEDIASUBTYPE_IYUV 'IYUV' </summary>
        </member>
        <member name="F:DShowNET.MediaSubType.DVSD">
            <summary> MEDIASUBTYPE_DVSD 'DVSD' </summary>
        </member>
        <member name="F:DShowNET.MediaSubType.RGB1">
            <summary> MEDIASUBTYPE_RGB1 'RGB1' </summary>
        </member>
        <member name="F:DShowNET.MediaSubType.RGB4">
            <summary> MEDIASUBTYPE_RGB4 'RGB4' </summary>
        </member>
        <member name="F:DShowNET.MediaSubType.RGB8">
            <summary> MEDIASUBTYPE_RGB8 'RGB8' </summary>
        </member>
        <member name="F:DShowNET.MediaSubType.RGB565">
            <summary> MEDIASUBTYPE_RGB565 'RGB565' </summary>
        </member>
        <member name="F:DShowNET.MediaSubType.RGB555">
            <summary> MEDIASUBTYPE_RGB555 'RGB555' </summary>
        </member>
        <member name="F:DShowNET.MediaSubType.RGB24">
            <summary> MEDIASUBTYPE_RGB24 'RGB24' </summary>
        </member>
        <member name="F:DShowNET.MediaSubType.RGB32">
            <summary> MEDIASUBTYPE_RGB32 'RGB32' </summary>
        </member>
        <member name="F:DShowNET.MediaSubType.Avi">
            <summary> MEDIASUBTYPE_Avi </summary>
        </member>
        <member name="F:DShowNET.MediaSubType.Asf">
            <summary> MEDIASUBTYPE_Asf </summary>
        </member>
        <member name="F:DShowNET.FormatType.None">
            <summary> FORMAT_None </summary>
        </member>
        <member name="F:DShowNET.FormatType.VideoInfo">
            <summary> FORMAT_VideoInfo </summary>
        </member>
        <member name="F:DShowNET.FormatType.VideoInfo2">
            <summary> FORMAT_VideoInfo2 </summary>
        </member>
        <member name="F:DShowNET.FormatType.WaveEx">
            <summary> FORMAT_WaveFormatEx </summary>
        </member>
        <member name="F:DShowNET.FormatType.MpegVideo">
            <summary> FORMAT_MPEGVideo </summary>
        </member>
        <member name="F:DShowNET.FormatType.MpegStreams">
            <summary> FORMAT_MPEGStreams </summary>
        </member>
        <member name="F:DShowNET.FormatType.DvInfo">
            <summary> FORMAT_DvInfo </summary>
        </member>
        <member name="F:DShowNET.PinCategory.Capture">
            <summary> PIN_CATEGORY_CAPTURE </summary>
        </member>
        <member name="F:DShowNET.PinCategory.Preview">
            <summary> PIN_CATEGORY_PREVIEW </summary>
        </member>
        <member name="F:DShowNET.FindDirection.UpstreamOnly">
            <summary> LOOK_UPSTREAM_ONLY </summary>
        </member>
        <member name="F:DShowNET.FindDirection.DownstreamOnly">
            <summary> LOOK_DOWNSTREAM_ONLY </summary>
        </member>
        <member name="T:EZ_B.EZTaskScheduler">
            <summary>
            This scheduler ensures tasks are executed on a background threads with queuing. Tasks are added to the queue and when completed, the next task runs.
            </summary>
        </member>
        <member name="M:EZ_B.EZTaskScheduler.AddToQueue(System.Object)">
            <summary>
            Add task to the queue.
            *Note: This does not start the task scheduler if it's not already running.
                   You can use this to "prep" tasks to be executed.
                   If you want to add more items to the queue AND run them, use the StartNew()
            </summary>
        </member>
        <member name="M:EZ_B.EZTaskScheduler.ProcessItemsInQueue">
            <summary>
            This will execute the scheduler to begin processing the items in the queue if the scheduler is not already running
            *Note: This is only needed to be called if you prepped the queue with AddToQueue() when the scheduler wasn't already running
                   Remember, the scheduler runs when the StartNew() is used. 
            </summary>
        </member>
        <member name="M:EZ_B.EZTaskScheduler.StartNew(System.Object)">
            <summary>
            Add items to the queue and start the scheduler to begin processing them
            *Note: This is the method that you should always be using unless you wish to prep items ahead of time, then use AddtoQueue() and ProcesItemsToQueue(), respectively.
            </summary>
        </member>
        <member name="E:EZ_B.EZTaskScheduler.OnEventError">
            <summary>
            Raised if the event throws an exeception on the same thread as the event was executed.
            </summary>
        </member>
        <member name="E:EZ_B.EZTaskScheduler.OnEventCompleted">
            <summary>
            Raised when the event has completed on the same thread as the event executed.
            </summary>
        </member>
        <member name="E:EZ_B.EZTaskScheduler.OnEventStart">
            <summary>
            Raised before the event is started on the same thread as the event will execute.
            </summary>
        </member>
        <member name="E:EZ_B.EZTaskScheduler.OnEventToRun">
            <summary>
            The event/task that will run for every instance.
            </summary>
        </member>
        <member name="E:EZ_B.EZTaskScheduler.OnQueueCompleted">
            <summary>
            Raised when all events/tasks in the queue have completed executing. Executes on the same thread that the last task ran on.
            </summary>
        </member>
        <member name="M:EZ_B.FormCameraCustomColor.#ctor(EZ_B.Camera)">
            <summary>
            This will create an instance of the custom color define form. Make sure you stop the existing event for the camera's OnNewFrame with a -= before and reset it with a += after.
            i.e.
            _camera.OnNewFrame -= _camera_OnNewFrame;
             using (FormCameraCustomColor fc = new FormCameraCustomColor(_camera)) {
               fc.Configuration = _config;
               if (fc.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                 _config = fc.Configuration;
               _camera.SetPreviewControl = pnlCamera;
             }
             _camera.OnNewFrame += _camera_OnNewFrame;
            </summary>
        </member>
        <member name="F:EZ_B.FormCameraCustomColor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:EZ_B.FormCameraCustomColor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:EZ_B.FormCameraCustomColor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:EZ_B.RGB8x8Animator.Name">
            <summary>
            Unique name for this auto position instance
            </summary>
        </member>
        <member name="M:EZ_B.RGB8x8Animator.#ctor(EZ_B.EZB,System.String)">
            <summary>
            Create an instance of the AutoPosition Control
            </summary>
        </member>
        <member name="M:EZ_B.RGB8x8Animator.DisposeOverride">
            <summary>
            Dispose of the AutoPositioner
            </summary>    
        </member>
        <member name="M:EZ_B.RGB8x8Animator.Stop">
            <summary>
            Stops the current movement. Blocks until stop is successful.
            </summary>
        </member>
        <member name="M:EZ_B.RGB8x8Animator.ExecAction(EZ_B.Classes.RGB8x8AnimatorAction)">
            <summary>
            Execute the Action
            </summary>
        </member>
        <member name="E:EZ_B.RGB8x8Animator.OnComplete">
            <summary>
            Event risen when movement is complete
            </summary>
        </member>
        <member name="E:EZ_B.RGB8x8Animator.OnStartAction">
            <summary>
            Event risen when an action is started
            </summary>
        </member>
        <member name="T:MyoSharp.Communication.Channel">
            <summary>
            A class that can listen to Myo Bluetooth data.
            </summary>
        </member>
        <member name="T:MyoSharp.Communication.IChannel">
            <summary>
            An interface that defines functionality for listening on a 
            communication channel.
            </summary>
        </member>
        <member name="T:MyoSharp.Communication.IChannelListener">
            <summary>
            An interface that defines functionality for listening for events on a 
            communication channel.
            </summary>
        </member>
        <member name="E:MyoSharp.Communication.IChannelListener.EventReceived">
            <summary>
            The event that is triggered when an event is received on a communication channel.
            </summary>
        </member>
        <member name="M:MyoSharp.Communication.IChannel.StartListening">
            <summary>
            Starts listening on the communication channel.
            </summary>
        </member>
        <member name="M:MyoSharp.Communication.IChannel.StopListening">
            <summary>
            Stops listening on the communication channel.
            </summary>
        </member>
        <member name="M:MyoSharp.Communication.Channel.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:MyoSharp.Communication.Channel"/> class.
            </summary>
            <param name="handle">The handle to the underlying Myo hub communication device.</param>
            <exception cref="T:System.ArgumentException">Thrown when the handle is not set.</exception>
        </member>
        <member name="M:MyoSharp.Communication.Channel.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyoSharp.Communication.Channel"/> class.
            </summary>
            <param name="handle">The handle to the underlying Myo hub communication device.</param>
            <param name="autostart">If set to <c>true</c>, the channel will be automatically started.</param>
            <exception cref="T:System.ArgumentException">Thrown when the handle is not set.</exception>
        </member>
        <member name="M:MyoSharp.Communication.Channel.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MyoSharp.Communication.Channel"/> class.
            </summary>
        </member>
        <member name="M:MyoSharp.Communication.Channel.Create">
            <summary>
            Creates a new <see cref="T:MyoSharp.Communication.IChannel"/> instance.
            </summary>
            <returns>A new <see cref="T:MyoSharp.Communication.IChannel"/> instance.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified application identifier is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when there is a failure to connect to the Bluetooth hub.
            </exception>
        </member>
        <member name="M:MyoSharp.Communication.Channel.Create(System.String,System.Boolean)">
            <param name="applicationIdentifier">The application identifier must follow a reverse domain name format (ex. com.domainname.appname). Application
            identifiers can be formed from the set of alphanumeric ASCII characters (a-z, A-Z, 0-9). The hyphen (-) and
            underscore (_) characters are permitted if they are not adjacent to a period (.) character  (i.e. not at the
            start or end of each segment), but are not permitted in the top-level domain. Application identifiers must have
            three or more segments. For example, if a company's domain is example.com and the application is named
            hello-world, one could use "com.example.hello-world" as a valid application identifier. The application identifier
            can be an empty string. The application identifier cannot be longer than 255 characters.</param>
            <param name="autostart">If set to <c>true</c>, the channel will be automatically started.</param>
            <returns>
            A new <see cref="T:MyoSharp.Communication.IChannel"/> instance.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified application identifier is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when there is a failure to connect to the Bluetooth hub.</exception>
        </member>
        <member name="M:MyoSharp.Communication.Channel.StartListening">
            <summary>
            Starts listening on the communication channel.
            </summary>
        </member>
        <member name="M:MyoSharp.Communication.Channel.StopListening">
            <summary>
            Stops listening on the communication channel.
            </summary>
        </member>
        <member name="M:MyoSharp.Communication.Channel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MyoSharp.Communication.Channel.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:MyoSharp.Communication.Channel.OnEventReceived(System.IntPtr,System.IntPtr,MyoSharp.Device.MyoEventType,System.DateTime)">
            <summary>
            Called when an event has been received on the communication channel.
            </summary>
            <param name="myoHandle">The Myo handle.</param>
            <param name="evt">The event handle.</param>
            <param name="eventType">The type of the event.</param>
            <param name="timestamp">The timestamp of the event.</param>
        </member>
        <member name="E:MyoSharp.Communication.Channel.EventReceived">
            <summary>
            The event that is triggered when an event is received on a communication channel.
            </summary>
        </member>
        <member name="T:MyoSharp.Communication.RouteMyoEventArgs">
            <summary>
            A class that contains information about an event for routing Myo events.
            </summary>
        </member>
        <member name="M:MyoSharp.Communication.RouteMyoEventArgs.#ctor(System.IntPtr,System.IntPtr,MyoSharp.Device.MyoEventType,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:MyoSharp.Communication.RouteMyoEventArgs"/> class.
            </summary>
            <param name="myoHandle">The Myo handle.</param>
            <param name="evt">The event handle.</param>
            <param name="eventType">The type of the event.</param>
            <param name="timestamp">The timestamp of the event.</param>
        </member>
        <member name="P:MyoSharp.Communication.RouteMyoEventArgs.MyoHandle">
            <summary>
            Gets the Myo handle.
            </summary>
        </member>
        <member name="P:MyoSharp.Communication.RouteMyoEventArgs.Event">
            <summary>
            Gets the event handle.
            </summary>
        </member>
        <member name="P:MyoSharp.Communication.RouteMyoEventArgs.EventType">
            <summary>
            Gets the type of the event.
            </summary>
        </member>
        <member name="P:MyoSharp.Communication.RouteMyoEventArgs.Timestamp">
            <summary>
            Gets the timestamp of the event.
            </summary>
        </member>
        <member name="T:MyoSharp.Device.Hub">
            <summary>
            A class that manages a collection of Myos.
            </summary>
        </member>
        <member name="T:MyoSharp.Device.IHub">
            <summary>
            An interface that defines a hub for managing Myos
            </summary>
        </member>
        <member name="E:MyoSharp.Device.IHub.MyoConnected">
            <summary>
            The event that is triggered when a Myo has connected.
            </summary>
        </member>
        <member name="E:MyoSharp.Device.IHub.MyoDisconnected">
            <summary>
            The event that is triggered when a Myo has disconnected.
            </summary>
        </member>
        <member name="P:MyoSharp.Device.IHub.Myos">
            <summary>
            Gets the collection of Myos being managed by this hub.
            </summary>
        </member>
        <member name="M:MyoSharp.Device.Hub.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyoSharp.Device.Hub"/> class and 
            immediately starts listening for Myo activity.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown when there is a failure to connect to the Bluetooth hub.
            </exception>
        </member>
        <member name="M:MyoSharp.Device.Hub.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyoSharp.Device.Hub"/> class and 
            immediately starts listening for Myo activity.
            </summary>
            <param name="applicationIdentifier">The application identifier.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified application identifier is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when there is a failure to connect to the Bluetooth hub.
            </exception>
        </member>
        <member name="M:MyoSharp.Device.Hub.#ctor(MyoSharp.Communication.IChannelListener)">
            <summary>
            Initializes a new instance of the <see cref="T:MyoSharp.Device.Hub"/> class.
            </summary>
            <param name="channelListener">The channel listener.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the channel listener is null.</exception>
        </member>
        <member name="M:MyoSharp.Device.Hub.#ctor(MyoSharp.Discovery.IDeviceListener)">
            <summary>
            Initializes a new instance of the <see cref="T:MyoSharp.Device.Hub"/> class.
            </summary>
            <param name="deviceListener">The device listener.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the device listener is null.</exception>
        </member>
        <member name="M:MyoSharp.Device.Hub.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MyoSharp.Device.Hub"/> class.
            </summary>
        </member>
        <member name="M:MyoSharp.Device.Hub.Create(System.String)">
            <summary>
            Creates a new <see cref="T:MyoSharp.Device.IHub"/> instance.
            </summary>
            <param name="applicationIdentifier">The application identifier.</param>
            <returns>
            A new <see cref="T:MyoSharp.Device.IHub"/> instance.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified application identifier is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when there is a failure to connect to the Bluetooth hub.
            </exception>
        </member>
        <member name="M:MyoSharp.Device.Hub.Create(MyoSharp.Communication.IChannelListener)">
            <summary>
            Creates a new <see cref="T:MyoSharp.Device.IHub"/> instance.
            </summary>
            <param name="channelListener">The channel listener.</param>
            <returns>A new <see cref="T:MyoSharp.Device.IHub"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the channel listener is null.</exception>
        </member>
        <member name="M:MyoSharp.Device.Hub.Create(MyoSharp.Discovery.IDeviceListener)">
            <summary>
            Creates a new <see cref="T:MyoSharp.Device.IHub"/> instance.
            </summary>
            <param name="deviceListener">The device listener.</param>
            <returns>A new <see cref="T:MyoSharp.Device.IHub"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the device listener is null.</exception>
        </member>
        <member name="M:MyoSharp.Device.Hub.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MyoSharp.Device.Hub.CreateMyo(System.IntPtr,MyoSharp.Communication.IChannelListener)">
            <summary>
            Creates a new <see cref="T:MyoSharp.Device.IMyo"/> instance.
            </summary>
            <param name="myoHandle">The Myo handle.</param>
            <param name="channelListener">The channel listener.</param>
            <returns>A new <see cref="T:MyoSharp.Device.IMyo"/> instance.</returns>
        </member>
        <member name="M:MyoSharp.Device.Hub.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:MyoSharp.Device.Hub.HookMyoEvents(MyoSharp.Device.IMyoEventGenerator)">
            <summary>
            Hooks the Myo events.
            </summary>
            <param name="myo">The Myo to hook onto.</param>
        </member>
        <member name="M:MyoSharp.Device.Hub.UnhookMyoEvents(MyoSharp.Device.IMyoEventGenerator)">
            <summary>
            Unhooks the Myo events.
            </summary>
            <param name="myo">The myo to hook onto.</param>
        </member>
        <member name="M:MyoSharp.Device.Hub.OnMyoConnected(MyoSharp.Device.MyoEventArgs)">
            <summary>
            Raises the <see cref="E:MyoConnected"/> event.
            </summary>
            <param name="e">The <see cref="T:MyoSharp.Device.MyoEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:MyoSharp.Device.Hub.OnMyoDisconnected(MyoSharp.Device.MyoEventArgs)">
            <summary>
            Raises the <see cref="E:MyoDisconnected"/> event.
            </summary>
            <param name="e">The <see cref="T:MyoSharp.Device.MyoEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:MyoSharp.Device.Hub.MyoConnected">
            <summary>
            The event that is triggered when a Myo has connected.
            </summary>
        </member>
        <member name="E:MyoSharp.Device.Hub.MyoDisconnected">
            <summary>
            The event that is triggered when a Myo has disconnected.
            </summary>
        </member>
        <member name="P:MyoSharp.Device.Hub.Myos">
            <summary>
            Gets the collection of Myos being managed by this hub.
            </summary>
        </member>
        <member name="T:MyoSharp.Device.IReadOnlyMyoCollection">
            <summary>
            An interface that defines a collection of Myos.
            </summary>
        </member>
        <member name="P:MyoSharp.Device.IReadOnlyMyoCollection.Count">
            <summary>
            Gets the number of Myos in the collection.
            </summary>
        </member>
        <member name="M:MyoSharp.Device.IMyo.Vibrate(MyoSharp.Device.VibrationType)">
            <summary>
            Causes the Myo to vibrate.
            </summary>
            <param name="type">The type of vibration.</param>
        </member>
        <member name="M:MyoSharp.Device.IMyo.RequestRssi">
            <summary>
            Requests RSSI from the Myo.
            </summary>
        </member>
        <member name="M:MyoSharp.Device.Myo.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MyoSharp.Device.Myo"/> class.
            </summary>
        </member>
        <member name="M:MyoSharp.Device.Myo.Create(System.IntPtr,MyoSharp.Communication.IChannelListener)">
            <summary>
            Creates a new <see cref="T:MyoSharp.Device.IMyo"/> instance.
            </summary>
            <param name="handle">The handle of the Myo device.</param>
            <param name="channelListener">The channel listener.</param>
            <returns>
            A new <see cref="T:MyoSharp.Device.IMyo"/> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the hub is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the handle is not set.</exception>
        </member>
        <member name="M:MyoSharp.Device.Myo.Vibrate(MyoSharp.Device.VibrationType)">
            <summary>
            Causes the Myo to vibrate.
            </summary>
            <param name="type">The type of vibration.</param>
        </member>
        <member name="M:MyoSharp.Device.Myo.RequestRssi">
            <summary>
            Requests RSSI from the Myo.
            </summary>
        </member>
        <member name="M:MyoSharp.Device.Myo.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MyoSharp.Device.Myo.HandleEvent(MyoSharp.Device.MyoEventType,System.DateTime,System.IntPtr)">
            <summary>
            Handles an event that was received for this device.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="timestamp">The timestamp of the event.</param>
            <param name="evt">The pointer to the event.</param>
        </member>
        <member name="M:MyoSharp.Device.Myo.OnRssi(System.IntPtr,System.DateTime)">
            <summary>
            Called when the Myo sends a <see cref="F:MyoSharp.Device.MyoEventType.Rssi"/> event.
            </summary>
            <param name="evt">The pointer to the event.</param>
            <param name="timestamp">The timestamp of the event.</param>
        </member>
        <member name="M:MyoSharp.Device.Myo.OnPoseChanged(System.IntPtr,System.DateTime)">
            <summary>
            Called when the Myo has detected a change in the user's pose.
            </summary>
            <param name="evt">The pointer to the event.</param>
            <param name="timestamp">The timestamp of the event.</param>
        </member>
        <member name="M:MyoSharp.Device.Myo.OnOrientationChanged(System.IntPtr,System.DateTime)">
            <summary>
            Called when the Myo has detected an orientation change.
            </summary>
            <param name="evt">The pointer to the event.</param>
            <param name="timestamp">The timestamp of the event.</param>
        </member>
        <member name="M:MyoSharp.Device.Myo.OnAcquiredGyroscopeData(System.IntPtr,System.DateTime)">
            <summary>
            Called when gyroscope data has been acquired from the Myo.
            </summary>
            <param name="evt">The pointer to the event.</param>
            <param name="timestamp">The timestamp of the event.</param>
        </member>
        <member name="M:MyoSharp.Device.Myo.OnAcquiredAccelerometerData(System.IntPtr,System.DateTime)">
            <summary>
            Called when accelerometer data has been acquired from the Myo.
            </summary>
            <param name="evt">The pointer to the event.</param>
            <param name="timestamp">The timestamp of the event.</param>
        </member>
        <member name="M:MyoSharp.Device.Myo.OnAcquiredOrientationData(System.IntPtr,System.DateTime)">
            <summary>
            Called when orientation data has been acquired from the Myo.
            </summary>
            <param name="evt">The pointer to the event.</param>
            <param name="timestamp">The timestamp of the event.</param>
        </member>
        <member name="M:MyoSharp.Device.Myo.OnArmLost(System.DateTime)">
            <summary>
            Called when the Myo can no longer recognize which arm it is on.
            </summary>
            <param name="timestamp">The timestamp of the event.</param>
        </member>
        <member name="M:MyoSharp.Device.Myo.OnArmRecognized(System.IntPtr,System.DateTime)">
            <summary>
            Called when the Myo has recognized which arm it is on.
            </summary>
            <param name="evt">The pointer to the event.</param>
            <param name="timestamp">The timestamp of the event.</param>
        </member>
        <member name="M:MyoSharp.Device.Myo.OnDisconnected(System.DateTime)">
            <summary>
            Called when the Myo has disconnected.
            </summary>
            <param name="timestamp">The timestamp of the event.</param>
        </member>
        <member name="M:MyoSharp.Device.Myo.OnConnected(System.DateTime)">
            <summary>
            Called when the Myo has connected..
            </summary>
            <param name="timestamp">The timestamp of the event.</param>
        </member>
        <member name="M:MyoSharp.Device.Myo.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MyoSharp.Discovery.IDeviceListener">
            <summary>
            An interface that defines functionality for listening to device connectivity.
            </summary>
        </member>
        <member name="E:MyoSharp.Discovery.IDeviceListener.Paired">
            <summary>
            The event that is triggered when a device has paired.
            </summary>
        </member>
        <member name="P:MyoSharp.Discovery.IDeviceListener.ChannelListener">
            <summary>
            Gets the <see cref="T:MyoSharp.Communication.IChannelListener"/> that this 
            <see cref="T:MyoSharp.Discovery.IDeviceListener"/> is listening to events with.
            </summary>
        </member>
        <member name="M:MyoSharp.Discovery.DeviceListener.#ctor(MyoSharp.Communication.IChannelListener)">
            <summary>
            Initializes a new instance of the <see cref="T:MyoSharp.Discovery.DeviceListener"/> class.
            </summary>
            <param name="channelListener">The channel listener.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the channel listener is null.</exception>
        </member>
        <member name="M:MyoSharp.Discovery.DeviceListener.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MyoSharp.Discovery.DeviceListener"/> class.
            </summary>
        </member>
        <member name="M:MyoSharp.Discovery.DeviceListener.Create(MyoSharp.Communication.IChannelListener)">
            <summary>
            Creates a new <see cref="T:MyoSharp.Discovery.IDeviceListener"/> instance.
            </summary>
            <param name="channelListener">The channel listener that will be used to listen for events.</param>
            <returns>A new <see cref="T:MyoSharp.Discovery.IDeviceListener"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the channel listener is null.</exception>
        </member>
        <member name="M:MyoSharp.Discovery.DeviceListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MyoSharp.Discovery.DeviceListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:MyoSharp.Discovery.DeviceListener.OnPaired(System.IntPtr)">
            <summary>
            Called when a device has paired.
            </summary>
            <param name="myoHandle">The Myo handle.</param>
        </member>
        <member name="E:MyoSharp.Discovery.DeviceListener.Paired">
            <summary>
            The event that is triggered when a device has paired.
            </summary>
        </member>
        <member name="P:MyoSharp.Discovery.DeviceListener.ChannelListener">
            <summary>
            Gets the <see cref="T:MyoSharp.Communication.IChannelListener"/> that this
            <see cref="T:MyoSharp.Discovery.IDeviceListener"/> is listening to events with.
            </summary>
        </member>
        <member name="T:MyoSharp.Device.PairedEventArgs">
            <summary>
            A class that contains information about a paired event for a device.
            </summary>
        </member>
        <member name="M:MyoSharp.Device.PairedEventArgs.#ctor(System.IntPtr,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:MyoSharp.Device.PairedEventArgs"/> class.
            </summary>
            <param name="myoHandle">The myo Handle.</param>
            <param name="timestamp">The timestamp of the event.</param>
        </member>
        <member name="P:MyoSharp.Device.PairedEventArgs.MyoHandle">
            <summary>
            Gets the Myo handle.
            </summary>
        </member>
        <member name="P:MyoSharp.Device.PairedEventArgs.Timestamp">
            <summary>
            Gets the timestamp of the event.
            </summary>
        </member>
        <member name="M:MyoSharp.Poses.HeldPose.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MyoSharp.Poses.HeldPose"/> class.
            </summary>
        </member>
        <member name="M:MyoSharp.Poses.HeldPose.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:MyoSharp.Poses.Pose.Rest">
            <summary>
            When the user is at rest.
            </summary>
        </member>
        <member name="F:MyoSharp.Poses.Pose.Fist">
            <summary>
            When the user makes a fist.
            </summary>
        </member>
        <member name="F:MyoSharp.Poses.Pose.WaveIn">
            <summary>
            When the user has an open palm rotated towards the posterior of their wrist.
            </summary>
        </member>
        <member name="F:MyoSharp.Poses.Pose.WaveOut">
            <summary>
            When the user has an open palm rotated towards the anterior of their wrist.
            </summary>
        </member>
        <member name="F:MyoSharp.Poses.Pose.FingersSpread">
            <summary>
            When the user has an open palm with their fingers spread away from each other.
            </summary>
        </member>
        <member name="F:MyoSharp.Poses.Pose.Reserved1">
            <summary>
            Reserved value; not a valid pose.
            </summary>
        </member>
        <member name="F:MyoSharp.Poses.Pose.ThumbToPinky">
            <summary>
            When the user is touching the tip of their thumb to the tip of their pinky.
            </summary>
        </member>
        <member name="F:MyoSharp.Poses.Pose.Unknown">
            <summary>
            Unknown pose.
            </summary>
        </member>
        <member name="M:MyoSharp.Poses.PoseSequence.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MyoSharp.Poses.PoseSequence"/> class.
            </summary>
        </member>
        <member name="M:MyoSharp.Poses.PoseSequence.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:EZ_B.HT16K33Animator.Name">
            <summary>
            Unique name for this auto position instance
            </summary>
        </member>
        <member name="M:EZ_B.HT16K33Animator.#ctor(EZ_B.EZB,System.String)">
            <summary>
            Create an instance of the AutoPosition Control
            </summary>
        </member>
        <member name="M:EZ_B.HT16K33Animator.DisposeOverride">
            <summary>
            Dispose of the AutoPositioner
            </summary>    
        </member>
        <member name="M:EZ_B.HT16K33Animator.Stop">
            <summary>
            Stops the current movement. Blocks until stop is successful.
            </summary>
        </member>
        <member name="M:EZ_B.HT16K33Animator.ExecAction(EZ_B.Classes.HT16K33AnimatorAction)">
            <summary>
            Execute the Action
            </summary>
        </member>
        <member name="E:EZ_B.HT16K33Animator.OnComplete">
            <summary>
            Event risen when movement is complete
            </summary>
        </member>
        <member name="E:EZ_B.HT16K33Animator.OnStartAction">
            <summary>
            Event risen when an action is started
            </summary>
        </member>
        <member name="F:EZ_B.RGBAnimator.Name">
            <summary>
            Unique name for this auto position instance
            </summary>
        </member>
        <member name="M:EZ_B.RGBAnimator.#ctor(EZ_B.EZB,System.String)">
            <summary>
            Create an instance of the AutoPosition Control
            </summary>
        </member>
        <member name="M:EZ_B.RGBAnimator.DisposeOverride">
            <summary>
            Dispose of the AutoPositioner
            </summary>    
        </member>
        <member name="M:EZ_B.RGBAnimator.Stop">
            <summary>
            Stops the current movement. Blocks until stop is successful.
            </summary>
        </member>
        <member name="M:EZ_B.RGBAnimator.ExecAction(EZ_B.Classes.RGBAnimatorAction)">
            <summary>
            Execute the Action
            </summary>
        </member>
        <member name="E:EZ_B.RGBAnimator.OnComplete">
            <summary>
            Event risen when movement is complete
            </summary>
        </member>
        <member name="E:EZ_B.RGBAnimator.OnStartAction">
            <summary>
            Event risen when an action is started
            </summary>
        </member>
        <member name="P:EZ_B.RGBAnimator.SetEZB">
            <summary>
            Set the EZ-B being used by this RGB Animator
            </summary>
        </member>
        <member name="F:EZ_B.AVM.CvAssociativeMemory32S.hAVM">
            <summary>
            A handle of AVM API
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.Create(System.Drawing.Size,System.Int16,System.Int32,System.Boolean)">
             <summary>
             Creating of associative memory
            
             Notes: The parameter aKeyImgSize is depended on sequence 40, 80, 160, 320, 640, 1280... 2^n*10.
                    Use of this numbers for sizing gives more accuracy in recognition.
                    The parameter aLevelMax set a maximal level for associative tree.
                    If set to zero then a maximal level will be computed as optimal for image key size.
                    aTreeTotal  - total number of independent associative trees.
                    aClustering - flag of using cluster tree
             </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.Destroy">
            <summary>
            Destroying of associative memory
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.SetActiveTree(System.Int32)">
            <summary>
            Set the active associative tree
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.ClearTreeData">
            <summary>
            Removing all data out from associative tree
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.Save(System.String,System.Boolean)">
            <summary>
            Saving of recognition data
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.Load(System.String)">
            <summary>
            Loading of recognition data
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.GetPackedDataSize">
            <summary>
            Get size of packed recognition data
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.WritePackedData">
            <summary>
            Writing a packed recognition data to memory
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.ReadPackedData(System.Byte[])">
            <summary>
            Reading a packed recognition data from memory
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.OptimizeAssociativeTree">
            <summary>
            Optimization of associative tree
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.RestartTimeForOptimization">
            <summary>
            Restart time counter of optimization event
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.EstimateOpportunityForTraining(System.Drawing.Rectangle)">
            <summary>
            The estimation of an opportunity for training
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.SetImage(System.Drawing.Bitmap@)">
            <summary>
            Set an image for processing
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.PtrToArray(System.Type,System.IntPtr,System.Int32)">
            <summary>
            Convert structure pointer into array
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.ObjectRecognition">
            <summary>
            Object recognition (result will be returned as sequence) 
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.ObjectTracking(System.Boolean,System.Double,System.Double)">
            <summary>
            Object recognition and tracking (result will be returned as sequence)
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.Read(System.Drawing.Rectangle,System.Drawing.Rectangle@,System.IntPtr@,System.UInt64@,System.UInt64@,System.Double@,System.Boolean)">
             <summary>
             Reading from associative memory cell (associative base)
            
             Notes: aInterestArea - interest area for object searching;
                    apObjRect     - rectangle where object found;
                    appData       - pointer to the data of associative cell;
                    apIndex       - unique index of associative base;
                    apHitCounter  - number of hitting to associative base;
                    apSimilarity  - similarity of the interest area to an object (0 ... 1);
                    aTotalSearch  - flag of the total search until end level of associative memory.
             </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.Write(System.Drawing.Rectangle,System.Int32,System.Boolean)">
            <summary>
            Writing to associative memory cell
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.GetTotalABases">
            <summary>
            Get total number of associative bases
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.GetTotalLevels">
            <summary>
            Get total number of memory levels
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.GetCurIndex">
            <summary>
            Get current index of associative base
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.GetWrRdCounter">
            <summary>
            Get read-write counter
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.GetKeyImageSize">
            <summary>
            Get size of key image of associative memory
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.GetBaseKeySize">
            <summary>
            Get base key size
            </summary>
        </member>
        <member name="M:EZ_B.AVM.CvAssociativeMemory32S.SetParam(EZ_B.AVM.CvAM_ParamType,System.Double)">
            <summary>
            Set the value of parameter
            </summary>
        </member>
        <member name="F:EZ_B.AVM.avmInvoke.AVM_LIBRARY">
            <summary>
            The file name of the AVM library
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmOpen(System.Int16)">
            <summary>
            Open AVM API
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmClose(EZ_B.AVM.avmHandle)">
            <summary>
            Close AVM API
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmCreate(EZ_B.AVM.avmHandle,System.Drawing.Size,System.Int16,System.Int32,System.Boolean)">
            <summary>
            Creating of associative memory
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmDestroy(EZ_B.AVM.avmHandle)">
            <summary>
            Destroying of associative memory
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmSetActiveTree(EZ_B.AVM.avmHandle,System.Int32)">
            <summary>
            Set the active associative tree
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmClearTreeData(EZ_B.AVM.avmHandle)">
            <summary>
            Removing all data out from associative tree
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmSave(EZ_B.AVM.avmHandle,System.Char[],System.Boolean)">
            <summary>
            Saving of recognition data
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmLoad(EZ_B.AVM.avmHandle,System.Char[])">
            <summary>
            Loading of recognition data
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmGetPackedDataSize(EZ_B.AVM.avmHandle)">
            <summary>
            Get size of packed recognition data
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmWritePackedData(EZ_B.AVM.avmHandle,System.IntPtr)">
            <summary>
            Writing a packed recognition data to memory
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmReadPackedData(EZ_B.AVM.avmHandle,System.IntPtr)">
            <summary>
            Reading a packed recognition data from memory
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmOptimizeAssociativeTree(EZ_B.AVM.avmHandle)">
            <summary>
            Optimization of associative tree
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmRestartTimeForOptimization(EZ_B.AVM.avmHandle)">
            <summary>
            Restart time counter of optimization event
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmEstimateOpportunityForTraining(EZ_B.AVM.avmHandle,System.Drawing.Rectangle)">
            <summary>
            The estimation of an opportunity for training 
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmSetImageAsArray(EZ_B.AVM.avmHandle,System.Drawing.Size,System.IntPtr,System.IntPtr)">
            <summary>
            Set an image for processing where image is presented as 2D pixel (byte) array
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmObjectRecognition_sq_32S(EZ_B.AVM.avmHandle,System.Int32@)">
            <summary>
            Object recognition (result will be returned as sequence) 
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmObjectTracking_sq_32S(EZ_B.AVM.avmHandle,System.Int32@,System.Boolean,System.Double,System.Double)">
            <summary>
            Object recognition and tracking (result will be returned as sequence)
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmRead_32S(EZ_B.AVM.avmHandle,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.IntPtr@,System.UInt64@,System.UInt64@,System.Double@,System.Boolean)">
            <summary>
            Reading from associative memory cell (associative base)
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmWrite_32S(EZ_B.AVM.avmHandle,System.Drawing.Rectangle,System.Int32@,System.Boolean)">
            <summary>
            Writing to associative memory cell
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmGetTotalABases(EZ_B.AVM.avmHandle)">
            <summary>
            Get total number of associative bases
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmGetTotalLevels(EZ_B.AVM.avmHandle)">
            <summary>
            Get total number of memory levels
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmGetCurIndex(EZ_B.AVM.avmHandle)">
            <summary>
            Get current index of associative base
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmGetWrRdCounter(EZ_B.AVM.avmHandle)">
            <summary>
            Get read-write counter
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmGetKeyImageSize(EZ_B.AVM.avmHandle)">
            <summary>
            Get size of key image of associative memory
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmGetBaseKeySize(EZ_B.AVM.avmHandle)">
            <summary>
            Get base key size
            </summary>
        </member>
        <member name="M:EZ_B.AVM.avmInvoke.avmSetParam(EZ_B.AVM.avmHandle,EZ_B.AVM.CvAM_ParamType,System.Double)">
            <summary>
            Set the value of parameter
            </summary>
        </member>
        <member name="T:EZ_B.AVM.avmHandle">
            <summary>
            Wrapper for handle of AVM API
            </summary>
        </member>
        <member name="T:EZ_B.AVM.CvAM_ParamType">
            <summary>
            Definition of parameter types
            </summary>
        </member>
        <member name="T:EZ_B.AVM.CvAM_State">
            <summary>
            Definition of the state constants for recognition function
            </summary>
        </member>
        <member name="T:EZ_B.AVM.CvTrcInfo">
            <summary>
            Data structure of tracking
            </summary>
        </member>
        <member name="F:EZ_B.AVM.CvTrcInfo.cAM_TrcLen">
            <summary>
            Length of tracking
            </summary>
        </member>
        <member name="F:EZ_B.AVM.CvTrcInfo.Pnt">
            <summary>
            Trajectory points
            </summary>
        </member>
        <member name="F:EZ_B.AVM.CvTrcInfo.Age">
            <summary>
            Age of tracking
            </summary>
        </member>
        <member name="T:EZ_B.AVM.CvObjDsr32S">
            <summary>
            Definition of object descriptor for type "long"
            </summary>
        </member>
        <member name="F:EZ_B.AVM.CvObjDsr32S.State">
            <summary>
            State of recognition function
            </summary>
        </member>
        <member name="F:EZ_B.AVM.CvObjDsr32S.ObjRect">
            <summary>
            Rectangle where object found
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:EZ_B.AVM.CvObjDsr32S.Similarity" -->
        <member name="F:EZ_B.AVM.CvObjDsr32S.Data">
            <summary>
            Associated data
            </summary>
        </member>
        <member name="F:EZ_B.AVM.CvObjDsr32S.Trj">
            <summary>
            Trajectory
            </summary>
        </member>
        <member name="T:EZ_B.AVM.TrainedObjectsContainer">
            <summary>
            Recognition data structure
            </summary>
        </member>
        <member name="M:EZ_B.CameraDetection.AVMObjectDetection.LoadObjects(EZ_B.AVM.TrainedObjectsContainer)">
            <summary>
            Load any trained objects from an XML container of a saved file
            </summary>
        </member>
        <member name="M:EZ_B.CameraDetection.AVMObjectDetection.GetDetectedObjects(System.Boolean,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Manager.SetLipoBatteryProtection(System.Boolean,System.Decimal)">
            <summary>
            Disable or Enable the battery monitor for the EZ-B v4. If the battery monitor is disabled, the EZ-B will continue to operate I/O if the voltage is low.
            You can also adjust the lowest voltage value to one decimal place.
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Manager.SetLipoBatteryLowestVoltage(System.Decimal)">
            <summary>
            Sets the lowest voltage that the EZ-B will operate with for the battery monitor. This is useful to Lipo batteries. 
            This feature is enabled by default on the EZ-B v4.
            </summary>
            <param name="lowestVoltage"></param>
        </member>
        <member name="M:EZ_B.EZBv4Manager.SetLipoBatteryProtectionState(System.Boolean)">
            <summary>
            Disable or Enable the battery monitor for the EZ-B v4. If the battery monitor is disabled, the EZ-B will continue to operate I/O if the voltage is low.
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Manager.GetCPUTemperature">
            <summary>
            Returns the cpu core temperature in degrees celcuis
            </summary>
            <returns></returns>
        </member>
        <member name="M:EZ_B.EZBv4Manager.GetBatteryVoltage">
            <summary>
            Returns the battery voltage
            </summary>
            <returns></returns>
        </member>
        <member name="F:EZ_B.HT16K33.I2C_ADDRESS">
            <summary>
            Default I2C Address of the HT16K33 Module (0x70)
            </summary>
        </member>
        <member name="F:EZ_B.HT16K33.BRIGHTNESS_MAX">
            <summary>
            The maximum brightness that can be sent to the LED (15)
            </summary>
        </member>
        <member name="F:EZ_B.HT16K33.BRIGHTNESS_MIN">
            <summary>
            The minimium brightness that can be sent to the LED (0)
            </summary>
        </member>
        <member name="M:EZ_B.HT16K33.Init">
            <summary>
            Initialize the HT16K33 by enabling the oscillator and setting the brightness to 15
            </summary>
        </member>
        <member name="M:EZ_B.HT16K33.SetAllStatus(System.Boolean)">
            <summary>
            Sets all of the LED's to the specific color.
            </summary>
        </member>
        <member name="M:EZ_B.HT16K33.SetLED(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set the LED status in the array
            *Note: This will not actually change the physical LED. You must call Update() to update the array
            </summary>
        </member>
        <member name="M:EZ_B.HT16K33.GetLED(System.Int32,System.Int32)">
            <summary>
            Return the status of the LED in the array
            </summary>
        </member>
        <member name="M:EZ_B.HT16K33.UpdateLEDs(System.Boolean[0:,0:])">
            <summary>
            Update the LEDs with the current matrix. Also sets the current matrix to this value
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:EZ_B.HT16K33.UpdateLEDs">
            <summary>
            Update the LEDs with the current matrix
            </summary>
        </member>
        <member name="P:EZ_B.HT16K33.Matrix">
            <summary>
            Set or Get the matrix data (8x8 array)
            </summary>
        </member>
        <member name="F:EZ_B.RGB8x8.I2C_ADDRESS">
            <summary>
            Default I2C Address of the RGB 8x8 Module (0xa2)
            </summary>
        </member>
        <member name="F:EZ_B.RGB8x8.INDEX_MAX">
            <summary>
            The number of RGB LEDs is referenced by the index
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EZ_B.RGB8x8.ChangeI2CAddress(System.Byte,System.Byte)" -->
        <!-- Badly formed XML comment ignored for member "M:EZ_B.RGB8x8.ClearDisplay" -->
        <!-- Badly formed XML comment ignored for member "M:EZ_B.RGB8x8.ClearDisplay(System.Byte)" -->
        <!-- Badly formed XML comment ignored for member "M:EZ_B.RGB8x8.ClearDisplay(System.Boolean,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:EZ_B.RGB8x8.ClearDisplay(System.Byte,System.Boolean,System.Boolean,System.Boolean)" -->
        <member name="M:EZ_B.RGB8x8.SetAllColor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets all of the LED's to the specific color.
            </summary>
        </member>
        <member name="M:EZ_B.RGB8x8.SetAllColor(System.Boolean,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            Sets all of the LED's to the specific color.
            </summary>
        </member>
        <member name="M:EZ_B.RGB8x8.SetColor(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the color of the specified index.
            </summary>
        </member>
        <member name="M:EZ_B.RGB8x8.SetColor(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            Sets the color of the specified index.
            </summary>
        </member>
        <member name="M:EZ_B.RGB8x8.SetColor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the color of the specified index.
            </summary>
        </member>
        <member name="M:EZ_B.RGB8x8.SetColor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            Sets the color of the specified index.
            </summary>
        </member>
        <member name="M:EZ_B.RGB8x8.SetColors(EZ_B.RGB8x8.RGBDef[])">
            <summary>
            Sets the LED's to the specific color.
            The RGBDef must be 64 items or less. 
            </summary>
        </member>
        <member name="M:EZ_B.RGB8x8.SetColors(EZ_B.RGB8x8.RGBDef[],System.Byte)">
            <summary>
            Sets the LED's to the specific color.
            The RGBDef must be 64 items or less. 
            </summary>
        </member>
        <member name="P:EZ_B.RGB8x8.SetEZB">
            <summary>
            Set the EZ-B being used by these RGB 8x8
            </summary>
        </member>
        <member name="F:EZ_B.RGBEyes.I2C_ADDRESS">
            <summary>
            Default I2C Address of the RGB Eyes Module (0xa0)
            </summary>
        </member>
        <member name="F:EZ_B.RGBEyes.BRIGHTNESS_MAX">
            <summary>
            The maximum brightness that can be sent to the RGB LED (7)
            </summary>
        </member>
        <member name="F:EZ_B.RGBEyes.BRIGHTNESS_MIN">
            <summary>
            The minimium brightness that can be sent to the RGB LED (0)
            </summary>
        </member>
        <member name="F:EZ_B.RGBEyes.INDEX_MAX">
            <summary>
            The number of RGB LEDs is referenced by the index
            </summary>
        </member>
        <member name="M:EZ_B.RGBEyes.ChangeI2CAddress(System.Byte)">
            <summary>
            Change the I2C address of the device. Will send the command to the default address.
            </summary>
            <param name="NewI2CAddress"></param>
        </member>
        <member name="M:EZ_B.RGBEyes.ChangeI2CAddress(System.Byte,System.Byte)">
            <summary>
            Change the I2C address of the device.
            </summary>
        </member>
        <member name="M:EZ_B.RGBEyes.SetAllColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set all of the LED's to the specific color. Sends the command to the default I2C address
            </summary>
        </member>
        <member name="M:EZ_B.RGBEyes.SetAllColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets all of the LED's to the specific color.
            </summary>
        </member>
        <member name="M:EZ_B.RGBEyes.SetColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Set the color of the specified index. Sends the command to the default I2C address
            </summary>
        </member>
        <member name="M:EZ_B.RGBEyes.SetColor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the specified index.
            </summary>
        </member>
        <member name="M:EZ_B.RGBEyes.SetColor(System.Byte[],System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the specified indexes within the array. Sends the command to the default I2C Addres
            </summary>
        </member>
        <member name="M:EZ_B.RGBEyes.SetColor(System.Byte,System.Byte[],System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the specified indexes within the array.
            </summary>
        </member>
        <member name="P:EZ_B.RGBEyes.SetEZB">
            <summary>
            Set the EZ-B being used by these RGB Eyes
            </summary>
        </member>
        <member name="F:EZ_B.MIP.UART_PORT">
            <summary>
            Set the UART Peripheral Port
            </summary>
        </member>
        <member name="F:EZ_B.MIP.BAUD_RATE">
            <summary>
            The baud rate of the MIP communication
            </summary>
        </member>
        <member name="M:EZ_B.MIP.Init(System.Int32)">
            <summary>
            Initialize the MIP Robot over the specified UART Port Index
            </summary>
        </member>
        <member name="M:EZ_B.MIP.Forward(System.Byte)">
            <summary>
            Move the MIP forward. The speed is a value between 1 and 31
            </summary>
        </member>
        <member name="M:EZ_B.MIP.Reverse(System.Byte)">
            <summary>
            Move the MIP reverse. The speed is a value between 1 and 31
            </summary>
        </member>
        <member name="M:EZ_B.MIP.Right(System.Byte)">
            <summary>
            Move the MIP right. The speed is a value between 1 and 31
            </summary>
        </member>
        <member name="M:EZ_B.MIP.Left(System.Byte)">
            <summary>
            Move the MIP left. The speed is a value between 1 and 31
            </summary>
        </member>
        <member name="M:EZ_B.MIP.Stop">
            <summary>
            Stop the MIP
            </summary>
        </member>
        <member name="M:EZ_B.MIP.PlaySound(System.Byte)">
            <summary>
            Play the sound file between 1 and 106
            </summary>
        </member>
        <member name="M:EZ_B.MIP.AdjustVolume(System.Byte)">
            <summary>
            Adjust the audio volume of the MIP between 0 and 6
            </summary>
            <param name="volume"></param>
        </member>
        <member name="M:EZ_B.MIP.SetChestLED(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Set the color of the MIP chest LED. Colors can be between 0-255, and fadeInTime is 10ms intervals between 0-255
            </summary>
        </member>
        <member name="M:EZ_B.MIP.FlashChestLED(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Flash color of the MIP chest LED. Colors can be between 0-255, and timeOn and timeOff is 20ms intervals between 0-255
            </summary>
        </member>
        <member name="M:EZ_B.SerialRGBLED.SetColor(EZ_B.Digital.DigitalPortEnum,System.Byte,System.Byte,System.Byte)">
            <summary>
            Set the brightness of each led component. The value is 0-15
            </summary>
        </member>
        <member name="M:EZ_B.SerialRGBLED.SetColor(EZ_B.Digital.DigitalPortEnum,EZ_B.SerialRGBLED.ColorEnum,System.Byte)">
            <summary>
            Set the brightness of each led component. The value is 0-15
            </summary>
        </member>
        <member name="M:EZ_B.CameraDetection.CustomColorDetection.GetObjectLocationByColor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Check for an object of the specified color. Returns a class that references its location.
            The searchObjecTSizePixels is the number of pixels for the minimum detected object size and is suggested around 25.
            hueMin and hueMax is a range of Hue for the color.
            SaturatioMin and Saturation Max is the range of Saturation for the color.
            LuminanceMin and LuminanceMax is the range of Luminance for the color.
            </summary>
        </member>
        <member name="M:EZ_B.CameraDetection.CustomColorDetection.GetObjectLocationByColor(System.Boolean,EZ_B.Classes.CustomColorConfig)">
            <summary>
            Check for an object of the specified color. Returns a class that references its location.
            </summary>
        </member>
        <member name="M:EZ_B.CameraDetection.CustomColorDetection.GetObjectLocationByColor(System.Boolean,EZ_B.Classes.CustomColorConfig,System.Drawing.Rectangle[])">
            <summary>
            Check for an object of the specified color. Returns a class that references its location.
            </summary>
        </member>
        <member name="M:EZ_B.CameraDetection.QRCodeDetection.GetObjectLocationByQRCode">
            <summary>
            Check for a QRCode. Returns a class that references its location.
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Video.Start(EZ_B.EZB,System.String,System.Int32)">
            <summary>
            Connect and begin receiving the camera stream
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Video.DisposeOverride">
            <summary>
            Dispose of this object
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Video.Stop">
            <summary>
            Stop the camera from streaming and receiving frames
            </summary>
        </member>
        <member name="E:EZ_B.EZBv4Video.OnImageReady">
            <summary>
            Event raised when the image is ready. This image must be disposed after use.
            </summary>
        </member>
        <member name="E:EZ_B.EZBv4Video.OnStart">
            <summary>
            Event raised when the JPEGStream has started
            </summary>
        </member>
        <member name="E:EZ_B.EZBv4Video.OnStop">
            <summary>
            Event raised when the JPEGStream has stopped
            </summary>
        </member>
        <member name="P:EZ_B.EZBv4Video.GetImageSize">
            <summary>
            Returns the size of the last camera image
            </summary>
        </member>
        <member name="P:EZ_B.EZBv4Video.IsRunning">
            <summary>
            Returns the status of the camera streaming
            </summary>
        </member>
        <member name="F:EZ_B.MusicSynth.random">
            <summary>
            Random provider for noise generator
            </summary>
        </member>
        <member name="M:EZ_B.MusicSynth.DisposeOverride">
            <summary>
            Dispose of the AutoPositioner
            </summary>
        </member>
        <member name="P:EZ_B.MusicSynth.SignalType">
            <summary>
            Signal Type.
            </summary>
        </member>
        <member name="P:EZ_B.MusicSynth.Phase">
            <summary>
            Signal Phase.
            </summary>
        </member>
        <member name="P:EZ_B.MusicSynth.Invert">
            <summary>
            Signal Inverted?
            </summary>
        </member>
        <member name="F:EZ_B.EZBv4Sound.RECOMMENDED_PACKET_SIZE">
            <summary>
            The recommended size of the the audio packets
            </summary>
        </member>
        <member name="F:EZ_B.EZBv4Sound.RECOMMENDED_PREBUFFER_SIZE">
            <summary>
            The recommended size of the prebuffer before playing the audio
            </summary>
        </member>
        <member name="F:EZ_B.EZBv4Sound.AUDIO_SAMPLE_BITRATE">
            <summary>
            The sample rate at which the data is played back on the EZ-B
            </summary>
        </member>
        <member name="F:EZ_B.EZBv4Sound.PACKET_SIZE">
            <summary>
            The size of each packet which is transmitted over the wire to the EZ-B.
            </summary>
        </member>
        <member name="F:EZ_B.EZBv4Sound.PREBUFFER_SIZE">
            <summary>
            The ammount of data to prebuffer to the EZ-B before playing the audio. The EZ-B has a 50k buffer, so this value cannot be any higher than that.
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.PlayDataWait(System.Byte[])">
            <summary>
            Play the Audio Data out of the EZ-B. 
            The audio must be RAW 8 Bit at 18 KHZ Sample Rate
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.PlayData(System.Byte[])">
            <summary>
            Stream raw audio data to the EZ-B v4's speakers.
            0 is silent, 100 is normal, 200 is 2x gain, 300 is 3x gain, etc.
            The audio must be RAW 8 Bit at 18 KHZ Sample Rate
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.PlayData(System.Byte[],System.Decimal)">
            <summary>
            Stream raw audio data to the EZ-B v4's speakers.
            0 is silent, 100 is normal, 200 is 2x gain, 300 is 3x gain, etc.
            The audio must be RAW 8 Bit at 18 KHZ Sample Rate
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.PlayData(System.Byte[],System.Decimal,System.Int32[])">
            <summary>
            Stream raw audio data to the EZ-B v4's speakers.
            0 is silent, 100 is normal, 200 is 2x gain, 300 is 3x gain, etc.
            The audio must be RAW 8 Bit at 18 KHZ Sample Rate
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.PlayDataWait(System.Byte[],System.Decimal)">
            <summary>
            Stream raw audio data to the EZ-B v4's speakers.
            0 is silent, 100 is normal, 200 is 2x gain, 300 is 3x gain, etc.
            The audio must be RAW 8 Bit at 18 KHZ Sample Rate
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.PlayData(System.IO.Stream)">
            <summary>
            Stream raw audio data to the EZ-B v4's speakers.
            0 is silent, 100 is normal, 200 is 2x gain, 300 is 3x gain, etc.
            The audio must be RAW 8 Bit at 18 KHZ Sample Rate
            *Note: You must dispose of the memory stream yourself after calling this
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.PlayData(System.IO.Stream,System.Int32[])">
            <summary>
            Stream raw audio data to the EZ-B v4's speakers.
            0 is silent, 100 is normal, 200 is 2x gain, 300 is 3x gain, etc.
            The audio must be RAW 8 Bit at 18 KHZ Sample Rate
            *Note: You must dispose of the memory stream yourself after calling this
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.PlayData(System.IO.Stream,System.Int32[],System.Int32)">
            <summary>
            Stream raw audio data to the EZ-B v4's speakers.
            0 is silent, 100 is normal, 200 is 2x gain, 300 is 3x gain, etc.
            The audio must be RAW 8 Bit at 18 KHZ Sample Rate
            *Note: You must dispose of the memory stream yourself after calling this
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.PlayDataWait(System.IO.Stream)">
            <summary>
            Stream raw audio data to the EZ-B v4's speakers.
            0 is silent, 100 is normal, 200 is 2x gain, 300 is 3x gain, etc.
            The audio must be RAW 8 Bit at 18 KHZ Sample Rate
            *Note: You must dispose of the memory stream yourself after calling this
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.PlayData(System.IO.Stream,System.Decimal)">
            <summary>
            Stream raw audio data to the EZ-B v4's speakers.
            0 is silent, 100 is normal, 200 is 2x gain, 300 is 3x gain, etc.
            The audio must be RAW 8 Bit at 18 KHZ Sample Rate
            *Note: You must dispose of the memory stream yourself after calling this
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.PlayData(System.IO.Stream,System.Decimal,System.Int32[])">
            <summary>
            Stream raw audio data to the EZ-B v4's speakers.
            0 is silent, 100 is normal, 200 is 2x gain, 300 is 3x gain, etc.
            The audio must be RAW 8 Bit at 18 KHZ Sample Rate
            *Note: You must dispose of the memory stream yourself after calling this
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.PlayData(System.IO.Stream,System.Byte[],System.Decimal,System.Int32[],System.Int32)">
            <summary>
            Stream raw audio data to the EZ-B v4's speakers.
            0 is silent, 100 is normal, 200 is 2x gain, 300 is 3x gain, etc.
            The audio must be RAW 8 Bit at 18 KHZ Sample Rate
            *Note: You must dispose of the memory stream yourself after calling this
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.PlayDataWait(System.IO.Stream,System.Byte[],System.Decimal,System.Int32[],System.Int32)">
            <summary>
            Stream raw audio data to the EZ-B v4's speakers.
            0 is silent, 100 is normal, 200 is 2x gain, 300 is 3x gain, etc.
            The audio must be RAW 8 Bit at 18 KHZ Sample Rate
            *Note: You must dispose of the memory stream yourself after calling this
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.Stop">
            <summary>
            Stop the audio which is being played
            </summary>
        </member>
        <member name="M:EZ_B.EZBv4Sound.DisposeOverride">
            <summary>
            Dispose of the AutoPositioner
            </summary>
        </member>
        <member name="T:EZ_B.EZBv4Sound.OnAudioDataHandler">
            <summary>
            Event exceuted when new data is being sent to the EZ-B
            </summary>
        </member>
        <member name="T:EZ_B.EZBv4Sound.OnVolumeChangedHandler">
            <summary>
            Event executed when the volume value has changed
            </summary>
        </member>
        <member name="T:EZ_B.EZBv4Sound.OnStopPlayingHandler">
            <summary>
            Event executed when the audio has stopped playing
            </summary>
        </member>
        <member name="T:EZ_B.EZBv4Sound.OnStartPlayingHandler">
            <summary>
            Event executed when the audio has begun playing
            </summary>
        </member>
        <member name="T:EZ_B.EZBv4Sound.OnClippingStatusHandler">
            <summary>
            Event executed when the audio level is clipping. This means the volume value is amplifying the audio past the limits
            </summary>
        </member>
        <member name="T:EZ_B.EZBv4Sound.OnProgressHandler">
            <summary>
            Event executed with the playing progress by sample position. The resolution of this event can be specified with Play method.
            In summary, you set the Play Positions by the sample index and this event will execute when the playing reaches that particular sample point.
            If you simply want an update of the curernt play time, use the OnPlayTime event.
            </summary>
        </member>
        <member name="T:EZ_B.EZBv4Sound.OnPlayTimeHandler">
            <summary>
            Event executed with the playing progress by sample position with 1000ms resolution.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.JoystickDevice.ID">
            <summary>
            Joystick ID, [0..15].
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.JoystickDevice.Name">
            <summary>
            Joystick name.
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.JoystickDevice.Axes">
            <summary>
            Number of joystick axes.
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.JoystickDevice.Buttons">
            <summary>
            Number of joystick buttons.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.Commands.SwitchVideoChannel">
            <summary>
            This AT command is used to switch between different camera views.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.Commands.SetFlyingValue">
            <summary>
            This AT Command is used for take off/land and emergency reset.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.Commands.SetFlatTrim">
            <summary>
            This AT command sets a reference of the horizontal plane for the drone internal control system.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.Commands.SetConfiguration">
            <summary>
            This AT Command sets an configurable option on the drone.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.Commands.SetControlMode">
            <summary>
            This AT Command is used when communicating with the control communication channel.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.Commands.PlayLedAnimation">
            <summary>
            This AT Command makes the ARDrone animate its LED's according to a selectable pattern.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.Commands.SetProgressiveInputValues">
            <summary>
            This AT Command is used to provide the ARDrone with piloting instructions.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.Commands.SetTagDetection">
            <summary>
            This AT Command activates/deactivates the detection of coloured patterns.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.Commands.ResetCommunicationHub">
            <summary>
            This AT Command resets the internal ARDrone communication system.
            </summary>
        </member>
        <member name="T:EZ_B.ARDrone.Commands.LedAnimationEnum">
            <summary>
            Indicates the LED animation to perform.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.Commands.VideoChannelEnum.Horizontal">
            <summary>
            Captured images are coming from the horizontal (forward) camera.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.Commands.VideoChannelEnum.Vertical">
            <summary>
            Captured images are coming from the vertical (downward) camera.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.Commands.VideoChannelEnum.VerticalInHorizontal">
            <summary>
            Captured images are coming from both the vertical and horizontal camera. The vertical image is shown in upper left corner.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.Commands.VideoChannelEnum.HorizontalInVertical">
            <summary>
            Captured images are coming from both the vertical and horizontal camera. The horizontal image is shown in upper left corner.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.Commands.VideoChannelEnum.Next">
            <summary>
            Captured images are coming the next videochannel determined by this enumeration.
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.Connect(EZ_B.ARDrone.ARDrone.ARDroneVersionEnum)">
            <summary>
            Establish connection to drone
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.Disconnect">
            <summary>
            Disconnect from the Drone
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.DisposeOverride">
            <summary>
            Dispose this object and disconnect from AR Drone
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.StartVideo">
            <summary>
            Start receiving video from Drone.
            Image can be obtained from OnImage event
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.StopVideo">
            <summary>
            Stop receiving video from drone
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.SendDefaultValues">
            <summary>
            This uploads default values to the drone for easy flying
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.SetIsOutside(System.Boolean)">
            <summary>
            Set true if you are flying outside
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.SetIsFlyingWithoutShell(System.Boolean)">
            <summary>
            Set to TRUE if you are flying with the outside shell
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.SetWiFiNetworkName(System.String)">
            <summary>
            Set the WiFi network name for the AR Drone. Changes are applied on reboot
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.SetYaw(System.Single)">
            <summary>
            Maximum yaw (spin) speed of the AR.Drone, in radians per second.
            Recommanded values goes from (0.7) 40/s to (6.11) 350/s. Others values
            may cause instability.
            Default: 3.0
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.SetVZMax(System.Int32)">
            <summary>
            Maximum vertical speed of the AR.Drone, in milimeters per second.
            Recommanded values goes from 200 to 2000. Others values may cause instability.
            Default: 1000
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.SetEulerAngleMax(System.Single)">
            <summary>
            Set maximum bending angle for drone in radians for pitch and roll.
            I.E. Maximum angle for going forward, back, left or right
            This does not affect YAW (spin)
            Floating point between 0 (0 deg) and 0.52 (32 deg) 
            Default: 0.25
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.SetAltitudeMax(System.Int32)">
            <summary>
            Maximum drone altitude in millimeters.
            Give an integer value between 500 and 5000 to prevent the drone from flying above this limit,
            or set it to 10000 to let the drone fly as high as desired.
            Default: 3000
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.SetAltitudeMin(System.Int32)">
            <summary>
            Minimum drone altitude in millimeters.
            Should be left to default value, for control stabilities issues
            Default: 50
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.SetProgressiveInputValues(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Move the drone. Values are between -1f and +1f
            </summary>
            <param name="roll">Negative tilt left, positive tilt right</param>
            <param name="pitch">Negative lowers nose (forward), positive raises nose (backward)</param>
            <param name="gaz">Negative lowers height, positive raises height</param>
            <param name="yaw">Negative spins left, positive spins right</param>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.NextVideoChannel">
            <summary>
            Cycle through the video channels. Go to next.
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.Hover">
            <summary>
            Call this method to stop moving and hover in one place
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.Land">
            <summary>
            Land the drone
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.TakeOff">
            <summary>
            Take off/Start Engines
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.Emergency">
            <summary>
            Emergency Stop the drone. Cuts power to motors
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.SetFlatTrim">
            <summary>
            Must be called before take-off (start engines).
            Must be called on a flat surface. This flattens the trim values for the surface.
            </summary>
        </member>
        <member name="M:EZ_B.ARDrone.ARDrone.PlayLedAnimation(EZ_B.ARDrone.Commands.LedAnimationEnum,System.Int32,System.Int32)">
            <summary>
            Makes the ARDrone animate its LED's.
            </summary>
            <param name="ledAnimation">The animation to play.</param>
            <param name="frequency">The blink frequency of the animation in times per second (Hz).</param>
            <param name="duration">The duration of the animation in seconds.</param>
        </member>
        <member name="P:EZ_B.ARDrone.VideoImage.PixelRowSize">
            <summary>
            Length of one row of pixels in the destination image in bytes.
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.VideoImage.PictureFormats.Cif">
            <summary>
            176px x 144px
            </summary>
        </member>
        <member name="F:EZ_B.ARDrone.VideoImage.PictureFormats.Vga">
            <summary>
            320px x 240px
            </summary>
        </member>
        <member name="F:EZ_B.Camera.DisableDetectedRectangleDisplay">
            <summary>
            If true, the rectangle around the detect object is not displayed. The objectLocation is still returned, but there is no visual identifier of where the object was detected.
            </summary>
        </member>
        <member name="F:EZ_B.Camera.AVIIntroText">
            <summary>
            Set the title for the intro text for video recording
            </summary>
        </member>
        <member name="F:EZ_B.Camera.AVIIntroBGColor">
            <summary>
            Set the intro title background color for video recording
            </summary>
        </member>
        <member name="F:EZ_B.Camera.AVIIntroFGColor">
            <summary>
            Set the intro title foreground color for video recording
            </summary>
        </member>
        <member name="F:EZ_B.Camera.AVIShowIntro">
            <summary>
            Enable/Disable intro title in video recording
            </summary>
        </member>
        <member name="F:EZ_B.Camera.AVIIntroLength">
            <summary>
            Length of time the intro title will display for video recording
            </summary>
        </member>
        <member name="F:EZ_B.Camera.AVIPauseRecording">
            <summary>
            Set to true to pause the current recording
            </summary>
        </member>
        <member name="F:EZ_B.Camera.GridTransparency">
            <summary>
            Set the transparency of the camera grid. 0 is transparent, 255 is solid.
            </summary>
        </member>
        <member name="F:EZ_B.Camera.CameraBasicColorDetection">
            <summary>
            Camera Basic Color Detection
            </summary>
        </member>
        <member name="F:EZ_B.Camera.CameraFaceDetection">
            <summary>
            Camera Face Detection
            </summary>
        </member>
        <member name="F:EZ_B.Camera.CameraMotionDetection">
            <summary>
            Camera Motion Detection
            </summary>
        </member>
        <member name="F:EZ_B.Camera.CameraCustomColorDetection">
            <summary>
            Camera Custom Color Detection
            </summary>
        </member>
        <member name="F:EZ_B.Camera.CameraGlyphDetection">
            <summary>
            Camera Glyph Detection
            </summary>
        </member>
        <member name="F:EZ_B.Camera.CameraQRCodeDetection">
            <summary>
            Camera QR Code Detection
            </summary>
        </member>
        <member name="F:EZ_B.Camera.CameraCustomHaarDetection">
            <summary>
            Camera Custom Haar Detection
            </summary>
        </member>
        <member name="F:EZ_B.Camera.CameraAVMObjectDetection">
            <summary>
            Camera Custom Object Detection
            </summary>
        </member>
        <member name="F:EZ_B.Camera.QuadLeftX">
            <summary>
            The X cordinate of the Left quadrant
            </summary>
        </member>
        <member name="F:EZ_B.Camera.QuadRightX">
            <summary>
            The X cordinate of the Right quadrant
            </summary>
        </member>
        <member name="F:EZ_B.Camera.QuadTopY">
            <summary>
            The Y cordinate of the Top quadrant
            </summary>
        </member>
        <member name="F:EZ_B.Camera.QuadBottomY">
            <summary>
            The Y cordinate of the Bottom quadrant
            </summary>
        </member>
        <member name="F:EZ_B.Camera.Brightness">
            <summary>
            Set the brightness correction of the image.
            Range is between -255 and +255.
            Positive values increase brightness.
            Negative values decrease brightness.
            </summary>
        </member>
        <member name="F:EZ_B.Camera.Saturation">
            <summary>
            Set the saturation between -1f and 1f
            </summary>
        </member>
        <member name="F:EZ_B.Camera.SharpenImage">
            <summary>
            Set the sharpening enhancement
            </summary>
        </member>
        <member name="F:EZ_B.Camera.Contrast">
            <summary>
            Set the contrast correction of the image.
            Range is between -255 and +255.
            Positive values increase contrast.
            Negative values decrease contrast.
            </summary>
        </member>
        <member name="F:EZ_B.Camera.SnapshotQuality">
            <summary>
            The quality for the snapshot jpeg file
            </summary>
        </member>
        <member name="F:EZ_B.Camera.FrameDelayMs">
            <summary>
            The delay time between frames. Use this to lower the frame rate.
            After the preview control is updated with the most recent image, this frame delay will pause before processing the next frame.
            Slowing the frame rate is useful for tracking to match the framerate to the servo speed.
            </summary>
        </member>
        <member name="F:EZ_B.Camera.RotateType">
            <summary>
            The type of rotation for the video stream
            </summary>
        </member>
        <member name="M:EZ_B.Camera.#ctor(EZ_B.EZB)">
            <summary>
            Create an instance of a camera capture device for visual tracking.
            Recommended capture resolution is 320x240. You will receive an error if attempting to capture a resolution
            that is not supported by your capture hardware.
            </summary>
        </member>
        <member name="M:EZ_B.Camera.StartCamera(EZ_B.ValuePair,System.Int32,System.Int32)">
            <summary>
            Initialize a camera in preperation for object detection. 
            The processedPreviewControl will act as display for the processed video. A System.Windows.Forms.Panel works great.
            The VideoCaptureDevice must be a ValuePair, where the Key is what contains either the Moniker String for the Video Driver, or the device name if AR Drone. Also, the Key can contain a URL to a JPEG.
            </summary>
        </member>
        <member name="M:EZ_B.Camera.StartCamera(EZ_B.ValuePair,System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Initialize a camera in preperation for object detection. 
            The processedPreviewControl will act as display for the processed video. A System.Windows.Forms.Panel works great.
            The VideoCaptureDevice must be a ValuePair, where the Key is what contains either the Moniker String for the Video Driver, or the device name if AR Drone. Also, the Key can contain a URL to a JPEG.
            </summary>
        </member>
        <member name="M:EZ_B.Camera.StartCamera(EZ_B.ValuePair,System.Windows.Forms.Control,System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Initialize a camera in preperation for object detection. 
            The processedPreviewControl will act as display for the processed video. A System.Windows.Forms.Panel works great.
            JPEGStream can be specified with prefix HTTP.
            If you wish to provide your own video stream by calling SetCaptureImage, specify the videoCaptureDeviceName as "Custom".
            The VideoCaptureDevice must be a ValuePair, where the Key is what contains either the Moniker String for the Video Driver, or the device name if AR Drone. Also, the Key can contain a URL to a JPEG.    /// </summary>
        </member>
        <member name="M:EZ_B.Camera.StopCamera">
            <summary>
            Disable camera, if enabled. Free the scanning resources.
            </summary>
        </member>
        <member name="M:EZ_B.Camera.GetVideoCaptureDevices">
            <summary>
            Get a list of available video capture devices
            </summary>
        </member>
        <member name="M:EZ_B.Camera.SetCaptureImage(System.Drawing.Bitmap)">
            <summary>
            Manually set a bitmap as the capture image to be processed. You can manually set a bitmap instead of using a hardware device. 
            You may also add your own hardware device supporting by setting the bitmap within this function.
            </summary>
        </member>
        <member name="M:EZ_B.Camera.AVIStartRecording(System.String,EZ_B.Camera.VideoCodec,System.Int32)">
            <summary>
            Save the incoming video stream to a video file
            </summary>
        </member>
        <member name="M:EZ_B.Camera.AVIStartRecording(System.String,System.Int32)">
            <summary>
            Save the incoming video stream to an AVI file
            </summary>
        </member>
        <member name="M:EZ_B.Camera.SaveImageAsJPEG(System.String,System.Byte)">
            <summary>
            Save the current image to the specified file
            </summary>
        </member>
        <member name="M:EZ_B.Camera.SaveImageAsJPEG(System.String)">
            <summary>
            Save the current image to the specified file
            </summary>
        </member>
        <member name="M:EZ_B.Camera.SetEZBv4CameraExposureMode(EZ_B.EZBv4Video.CameraExposureMode)">
            <summary>
            Value is between 0 and 4 for different exposure modes
            </summary>
        </member>
        <member name="E:EZ_B.Camera.OnStart">
            <summary>
            Event raised when the Image Processing has started
            </summary>
        </member>
        <member name="E:EZ_B.Camera.OnStop">
            <summary>
            Event raised when the Image Processing has stopped
            </summary>
        </member>
        <member name="E:EZ_B.Camera.OnNewFrame">
            <summary>
            Event risen when a new video frame is received.
            This event is risen BEFORE OnNewFrameProcessed
            </summary>
        </member>
        <member name="E:EZ_B.Camera.OnNewFrameProcessed">
            <summary>
            Event risen when a new video frame is received.
            This event is raised after OnNewFrame
            </summary>
        </member>
        <member name="P:EZ_B.Camera.GetPixelFormat">
            <summary>
            Returns the image pixel format
            </summary>
        </member>
        <member name="P:EZ_B.Camera.CaptureWidth">
            <summary>
            Width of the raw capture image
            </summary>
        </member>
        <member name="P:EZ_B.Camera.CaptureHeight">
            <summary>
            Height of the raw capture image
            </summary>
        </member>
        <member name="P:EZ_B.Camera.GetCurrentBitmap">
            <summary>
            Get the current video frame as a managed bitmap from the capture device. This is only populated within the CameraOnOnNewFrame() event.
            Do not dispose this object! This means, do not use this in a USING ()
            </summary>
        </member>
        <member name="P:EZ_B.Camera.GetOutputBitmap">
            <summary>
            Get the current video frame as an unmanaged bitmap from the capture device. This is only populated within the CameraOnOnNewFrame() event.
            Do not dispose this object! This means, do not use this in a USING ()
            </summary>
        </member>
        <member name="P:EZ_B.Camera.SetPreviewControl">
            <summary>
            Set the control that will be used for the video preview. This can be null if needed. The OnNewFrame event will still be raised, however it will not automatically draw the image to any control. You can use the GetOutputBitmap or GetCurrentBitmap to extract the image within the OnNewFrame event.
            </summary>
        </member>
        <member name="P:EZ_B.Camera.IsActive">
            <summary>
            Check to see if the camera module has been assigned to a video capture device and is ready for detection.
            </summary>
        </member>
        <member name="T:EZ_B.Camera.VideoCodec">
            <summary>
            Type of Video File to save
            </summary>
        </member>
        <member name="M:EZ_B.CameraDetection.ColorDetection.GetObjectLocationByColor(System.Boolean,EZ_B.CameraDetection.ColorDetection.ColorEnum,System.Int32,System.Byte)">
            <summary>
            Check for an object of the specified color. Returns a class that references its location.
            You can use the returned class information to determine what direction to move your robots head.
            minBrightness will need to be adjusted for the environment. Higher number is for brighter images. Lower number is for darker environments.
            The searchObjecTSizePixels is the number of pixels for the minimum detected object size 
            </summary>
        </member>
        <member name="M:EZ_B.CameraDetection.ColorDetection.GetObjectLocationByColor(System.Boolean,EZ_B.CameraDetection.ColorDetection.ColorEnum,System.Int32,System.Byte,System.Drawing.Rectangle[])">
            <summary>
            Check for an object of the specified color. Returns a class that references its location.
            You can use the returned class information to determine what direction to move your robots head.
            minBrightness will need to be adjusted for the environment. Higher number is for brighter images. Lower number is for darker environments.
            The searchObjecTSizePixels is the number of pixels for the minimum detected object size 
            </summary>
        </member>
        <member name="T:EZ_B.CameraDetection.ColorDetection.ColorEnum">
            <summary>
            A list of colors used for searching for objects.
            </summary>
        </member>
        <member name="M:EZ_B.CameraDetection.CustomHaarDetection.LoadHaarCascade(System.String)">
            <summary>
            Load a custom Haar Cascade XML file to be detected
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:EZ_B.CameraDetection.CustomHaarDetection.GetCustomDetection">
            <summary>
            Get the location of a detected object
            </summary>
        </member>
        <member name="M:EZ_B.CameraDetection.FaceDetection.GetFaceDetection">
            <summary>
            Get the location of a detected face
            </summary>
        </member>
        <member name="F:EZ_B.CameraDetection.GlyphDetection.Glyph1Overlay">
            <summary>
            Glyph Overlay Image for Augmented Reality. Set this image and it will be overlayed on top of the actual glyph.
            </summary>
        </member>
        <member name="F:EZ_B.CameraDetection.GlyphDetection.Glyph2Overlay">
            <summary>
            Glyph Overlay Image for Augmented Reality. Set this image and it will be overlayed on top of the actual glyph.
            </summary>
        </member>
        <member name="F:EZ_B.CameraDetection.GlyphDetection.Glyph3Overlay">
            <summary>
            Glyph Overlay Image for Augmented Reality. Set this image and it will be overlayed on top of the actual glyph.
            </summary>
        </member>
        <member name="F:EZ_B.CameraDetection.GlyphDetection.Glyph4Overlay">
            <summary>
            Glyph Overlay Image for Augmented Reality. Set this image and it will be overlayed on top of the actual glyph.
            </summary>
        </member>
        <member name="M:EZ_B.CameraDetection.GlyphDetection.GetGlyphDetection">
            <summary>
            Get the location of shapes
            </summary>
        </member>
        <member name="M:EZ_B.CameraDetection.MotionDetection.GetMotionDetection(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return an object that describes the location of the change in motion.
            Suggested values are: ColorFunctions.Difference=30, CountLimit=80
            The searchObjecTSizePixels is the number of pixels for the minimum detected object size
            skipFrames value determines how many frames to wait before checking the difference. In most cases, this value can be a 0. However, you can use this value to wait until the robot has moved from the last update before checking for motion.
            </summary>
        </member>
        <member name="M:EZ_B.CameraDetection.MotionDetection.GetMotionDetection(System.Int32,System.Int32,System.Int32,System.Drawing.Rectangle[])">
            <summary>
            Return an object that describes the location of the change in motion.
            Suggested values are: ColorFunctions.Difference=30, CountLimit=80
            The searchObjecTSizePixels is the number of pixels for the minimum detected object size
            skipFrames value determines how many frames to wait before checking the difference. In most cases, this value can be a 0. However, you can use this value to wait until the robot has moved from the last update before checking for motion.
            </summary>
        </member>
        <member name="M:EZ_B.BlinkM.StopScript(System.Byte)">
            <summary>
            Stop Script with 7 bit address
            </summary>
        </member>
        <member name="M:EZ_B.BlinkM.ChangeToColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Change the BlinkM to the specified Red/Green/Blue color
            </summary>
        </member>
        <member name="M:EZ_B.BlinkM.FadeToColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Fade the BlinkM to the specified Red/Green/Blue color
            </summary>
        </member>
        <member name="M:EZ_B.BlinkM.GetCurrentColor(System.Byte)">
            <summary>
            Returns the current colors on the BlinkM
            </summary>
        </member>
        <member name="M:EZ_B.BV4615.GetFirmware">
            <summary>
            Return the firmware of the device
            </summary>
        </member>
        <member name="M:EZ_B.BV4615.GetData">
            <summary>
            Returns a response object with the data from the buffer
            </summary>
        </member>
        <member name="M:EZ_B.BV4113.Stop">
            <summary>
             Stop
            </summary>
        </member>
        <member name="M:EZ_B.BV4113.Forward">
            <summary>
             Move forward.
            </summary>
        </member>
        <member name="M:EZ_B.BV4113.Reverse">
            <summary> 
             Move reverse.
            </summary>
        </member>
        <member name="M:EZ_B.BV4113.Right">
            <summary> 
             Right.
            </summary>
        </member>
        <member name="M:EZ_B.BV4113.Left">
            <summary> 
             Left.
            </summary>
        </member>
        <member name="M:EZ_B.Classes.AutoPositionConfig.AddFrame(EZ_B.Classes.AutoPositionFrame)">
            <summary>
            Add a frame to the list of frames. Returns the GUID of the frame
            </summary>
        </member>
        <member name="M:EZ_B.Classes.AutoPositionConfig.AddFrame(System.String)">
            <summary>
            Add a frame to the list of frames. Returns the GUID of the frame
            </summary>
        </member>
        <member name="M:EZ_B.Classes.AutoPositionConfig.AddFrame(System.String,System.String)">
            <summary>
            Add a frame to the list of frames. Returns the GUID of the frame
            </summary>
        </member>
        <member name="M:EZ_B.Classes.AutoPositionConfig.AddFrame(System.String,System.String,System.Int32[])">
            <summary>
            Add a frame to the list of frames. Returns the GUID of the frame
            </summary>
        </member>
        <member name="M:EZ_B.Classes.AutoPositionConfig.AddFrame(System.String,System.Int32[])">
            <summary>
            Add a frame to the list of frames. Returns the GUID of the frame
            </summary>
        </member>
        <member name="M:EZ_B.Classes.AutoPositionConfig.AddAction(EZ_B.Classes.AutoPositionAction)">
            <summary>
            Add an action to the list of actions. Returns the GUID of the action
            </summary>
        </member>
        <member name="F:EZ_B.Classes.GPSData.IsValid">
            <summary>
            Is the data valid (i.e. is there a satellite lock)
            </summary>
        </member>
        <member name="F:EZ_B.Classes.GPSData.GPRMCRaw">
            <summary>
            The RMC Sentence from the gps
            </summary>
        </member>
        <member name="F:EZ_B.Classes.GPSData.GPGSVRaw">
            <summary>
            The GSV Sentence from the gps
            </summary>
        </member>
        <member name="F:EZ_B.Classes.GPSData.GPGSARaw">
            <summary>
            The GSA sentence from the gps
            </summary>
        </member>
        <member name="F:EZ_B.Classes.GPSData.GPGGARaw">
            <summary>
            The GGA sentence from the gps
            </summary>
        </member>
        <member name="F:EZ_B.Classes.GPSData.LastUpdated">
            <summary>
            The last timestamp of data
            </summary>
        </member>
        <member name="F:EZ_B.Classes.GPSData.EarthLocationNS">
            <summary>
            Your position location of the earth (north/south)
            </summary>
        </member>
        <member name="F:EZ_B.Classes.GPSData.EarthLocationEW">
            <summary>
            Your position location of the earth (east/west)
            </summary>
        </member>
        <member name="F:EZ_B.Classes.GPSData.SatellitesUsed">
            <summary>
            Number of satellites used to obtain the data
            </summary>
        </member>
        <member name="F:EZ_B.Classes.GPSData.SpeedKnots">
            <summary>
            The speed your robot is moving in knots
            </summary>
        </member>
        <member name="F:EZ_B.Classes.GPSData.Course">
            <summary>
            Course over ground in degrees
            </summary>
        </member>
        <member name="F:EZ_B.Classes.GPSData.Altitude">
            <summary>
            Your current altitude in meters
            </summary>
        </member>
        <member name="P:EZ_B.Classes.GPSData.Latitude">
            <summary>
            Latitude Position
            </summary>
        </member>
        <member name="P:EZ_B.Classes.GPSData.Longitude">
            <summary>
            Longitude Position
            </summary>
        </member>
        <member name="P:EZ_B.Classes.GPSData.RawLatitude">
            <summary>
            The latitude value returned by the GPS in minutes
            </summary>
        </member>
        <member name="P:EZ_B.Classes.GPSData.RawLongitude">
            <summary>
            The longitude returned by the GPS in minutes
            </summary>
        </member>
        <member name="P:EZ_B.Classes.GPSData.MovingDirectionNS">
            <summary>
            The North and South direction your robot is moving
            </summary>
        </member>
        <member name="P:EZ_B.Classes.GPSData.MovingDirectionEW">
            <summary>
            The East and West direction the robot is moving
            </summary>
        </member>
        <member name="P:EZ_B.Classes.GPSData.SpeedKilometers">
            <summary>
            The speed your robot is moving in KM/Hour
            </summary>
        </member>
        <member name="P:EZ_B.Classes.GPSData.CompassDegrees">
            <summary>
            Get the compass degrees
            </summary>
        </member>
        <member name="P:EZ_B.Classes.GPSData.SpeedMiles">
            <summary>
            The speed your robot is moving in Miles/Hour
            </summary>
        </member>
        <member name="P:EZ_B.Classes.GPSData.LocationChanged">
            <summary>
            Returns true if the gps has moved location from the last sample
            </summary>
        </member>
        <member name="M:EZ_B.ConfigurationManager.SetConfiguration(EZ_B.ConfigurationManager.ConfigurationEnum,System.Byte)">
            <summary>
            Write configuration data to the EZ-B v3
            </summary>
            <param name="memoryPosition">position in eeprom</param>
            <param name="value">the byte to store</param>
        </member>
        <member name="M:EZ_B.ConfigurationManager.SetConfiguration(EZ_B.ConfigurationManager.StringConfigurationEnum,System.Byte,System.String)">
            <summary>
            Write configuration data to the EZ-B v3
            </summary>
            <param name="memoryPosition">position in eeprom</param>
            <param name="maxLength">the max length of the data reserved in eeprom. if the Value is greater than the MaxLength, the Value will be truncated. This size is reserved.</param>
            <param name="value">the value to store</param>
        </member>
        <member name="M:EZ_B.ConfigurationManager.GetConfiguration(EZ_B.ConfigurationManager.ConfigurationEnum)">
            <summary>
            Return data at a memory location from the EZ-B v3 eeprom
            </summary>
        </member>
        <member name="M:EZ_B.ConfigurationManager.GetConfiguration(EZ_B.ConfigurationManager.StringConfigurationEnum,System.Byte)">
            <summary>
            Return data at the memory location and the length of bytes in the EZ-B v3 eeprom
            </summary>
        </member>
        <member name="P:EZ_B.ConfigurationManager.BluetoothName">
            <summary>
            Set the bluetooth name of the EZ-B. Max 10 characters, will be truncated.
            </summary>
        </member>
        <member name="F:EZ_B.AutoPosition.Config">
            <summary>
            Set/Get the current configuration of Frames and Actions
            </summary>
        </member>
        <member name="F:EZ_B.AutoPosition.Name">
            <summary>
            Unique name for this auto position instance
            </summary>
        </member>
        <member name="M:EZ_B.AutoPosition.#ctor(EZ_B.EZB,System.String)">
            <summary>
            Create an instance of the AutoPosition Control
            </summary>
        </member>
        <member name="M:EZ_B.AutoPosition.RequireInit">
            <summary>
            Set the require init flag so that the next time a transition is requested, it initializes the servos first.
            </summary>
        </member>
        <member name="M:EZ_B.AutoPosition.Stop">
            <summary>
            Stops the current movement. Blocks until stop is successful.
            </summary>
        </member>
        <member name="M:EZ_B.AutoPosition.MoveImmediate(System.String)">
            <summary>
            Move to the specified frame
            </summary>
        </member>
        <member name="M:EZ_B.AutoPosition.MoveToFrame(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Move into the selected position from the current position
            </summary>
        </member>
        <member name="M:EZ_B.AutoPosition.ExecAction(System.String)">
            <summary>
            Execute the Action
            </summary>
        </member>
        <member name="M:EZ_B.AutoPosition.ExecAction(EZ_B.Classes.AutoPositionAction.ActionTypeEnum)">
            <summary>
            Execute the Action
            </summary>
        </member>
        <member name="M:EZ_B.AutoPosition.DisposeOverride">
            <summary>
            Dispose of the AutoPositioner
            </summary>
        </member>
        <member name="E:EZ_B.AutoPosition.OnComplete">
            <summary>
            Event risen when movement is complete
            </summary>
        </member>
        <member name="E:EZ_B.AutoPosition.OnStartAction">
            <summary>
            Event risen when an action is started
            </summary>
        </member>
        <member name="E:EZ_B.AutoPosition.OnStartFrame">
            <summary>
            Event risen when a frame is started
            </summary>
        </member>
        <member name="P:EZ_B.AutoPosition.SetEZB">
            <summary>
            Set the EZB instance for this positioner
            </summary>
        </member>
        <member name="T:FaceDetect.Imaging.IntegralImage2">
            <summary>
              Joint representation of both Integral Image and Squared Integral Image.
            </summary>
            
            <remarks>
              Using this representation, both structures can be created in a single pass
              over the data. This is interesting for real time applications. This class
              also accepts a channel parameter indicating the Integral Image should be
              computed using a specified color channel. This avoids costly conversions.
            </remarks>
            
        </member>
        <member name="M:FaceDetect.Imaging.IntegralImage2.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Integral image of the given size.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Imaging.IntegralImage2.FromBitmap(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Constructs a new Integral image from a Bitmap image.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Imaging.IntegralImage2.FromBitmap(System.Drawing.Bitmap,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Integral image from a Bitmap image.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Imaging.IntegralImage2.FromBitmap(System.Drawing.Imaging.BitmapData,System.Int32)">
            <summary>
              Constructs a new Integral image from a BitmapData image.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Imaging.IntegralImage2.FromBitmap(System.Drawing.Imaging.BitmapData,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Integral image from a BitmapData image.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Imaging.IntegralImage2.FromBitmap(AForge.Imaging.UnmanagedImage,System.Int32)">
            <summary>
              Constructs a new Integral image from an unmanaged image.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Imaging.IntegralImage2.FromBitmap(AForge.Imaging.UnmanagedImage,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Integral image from an unmanaged image.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Imaging.IntegralImage2.GetSum(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Gets the sum of the pixels in a rectangle of the Integral image.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Imaging.IntegralImage2.GetSum2(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Gets the sum of the squared pixels in a rectangle of the Integral image.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Imaging.IntegralImage2.GetSumT(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Gets the sum of the pixels in a tilted rectangle of the Integral image.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Imaging.IntegralImage2.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing,
              releasing, or resetting unmanaged resources.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Imaging.IntegralImage2.Finalize">
            <summary>
              Releases unmanaged resources and performs other cleanup operations 
              before the <see cref="T:FaceDetect.Imaging.IntegralImage2"/> is reclaimed by garbage collection.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Imaging.IntegralImage2.Dispose(System.Boolean)">
            <summary>
              Releases unmanaged and - optionally - managed resources
            </summary>
            
            <param name="disposing"><c>true</c> to release both managed 
            and unmanaged resources; <c>false</c> to release only unmanaged
            resources.</param>
            
        </member>
        <member name="P:FaceDetect.Imaging.IntegralImage2.Width">
            <summary>
              Gets the image's width.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Imaging.IntegralImage2.Height">
            <summary>
              Gets the image's height.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Imaging.IntegralImage2.Image">
            <summary>
              Gets the Integral Image for values' sum.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Imaging.IntegralImage2.Squared">
            <summary>
              Gets the Integral Image for values' squared sum.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Imaging.IntegralImage2.Rotated">
            <summary>
              Gets the Integral Image for tilted values' sum.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Imaging.Tools.IsEqual(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32)">
            <summary>
              Compares two rectangles for equality, considering an acceptance threshold.
            </summary>
        </member>
        <member name="T:FaceDetect.Vision.Detection.Cascades.FaceHaarCascade">
            <summary>
              Default Face Haar Cascade for using with Haar Classifiers.
            </summary>
            
            <remarks>
              The definition was originally based on a hardcoded partial transcription of
              OpenCV's <i>haarcascade_frontalface_alt.xml</i> by Mario Klingemann. This
              class, however, has been re-created using <see cref="T:FaceDetect.Vision.Detection.HaarCascadeWriter"/>.
            </remarks>
            
        </member>
        <member name="T:FaceDetect.Vision.Detection.HaarCascade">
            <summary>
              Cascade of Haar-like features' weak classification stages.
            </summary>
            
            <remarks>
            <para>
              The Viola-Jones object detection framework is the first object detection framework
              to provide competitive object detection rates in real-time proposed in 2001 by Paul
              Viola and Michael Jones. Although it can be trained to detect a variety of object
              classes, it was motivated primarily by the problem of face detection.</para>
              
            <para>
              The implementation of this code has used Viola and Jones' original publication, the
              OpenCV Library and the Marilena Project as reference. OpenCV is released under a BSD
              license, it is free for both academic and commercial use. Please be aware that some
              particular versions of the Haar object detection framework are patented by Viola and
              Jones and may be subject to restrictions for use in commercial applications. </para>
              
             <para>
                References:
                <list type="bullet">
                  <item><description>
                    <a href="http://www.cs.utexas.edu/~grauman/courses/spring2007/395T/papers/viola_cvpr2001.pdf">
                    Viola, P. and Jones, M. (2001). Rapid Object Detection using a Boosted Cascade
                    of Simple Features.</a></description></item>
                  <item><description>
                    <a href="http://en.wikipedia.org/wiki/Viola-Jones_object_detection_framework">
                    Wikipedia, The Free Encyclopedia. Viola-Jones object detection framework </a>
                  </description></item>
                </list></para>
            </remarks>
            
            <example>
            <para>
              To load an OpenCV-compatible XML definition for a Haar cascade, you can use HaarCascade's
              <see cref="M:FaceDetect.Vision.Detection.HaarCascade.FromXml(System.IO.Stream)">FromXml</see> static method. An example would be:</para>
              <code>
              String path = @"C:\Users\haarcascade-frontalface_alt2.xml";
              HaarCascade cascade1 = HaarCascade.FromXml(path);
              </code>
              
            <para>
              After the cascade has been loaded, it is possible to create a new <see cref="T:FaceDetect.Vision.Detection.HaarObjectDetector"/>
              using the cascade. Please see <see cref="T:FaceDetect.Vision.Detection.HaarObjectDetector"/> for more details. It is also
              possible to generate embeddable C# definitions from a cascade, avoiding the need to load
              XML files on program startup. Please see <see cref="M:FaceDetect.Vision.Detection.HaarCascade.ToCode(System.String,System.String)"/> method or 
              <see cref="T:FaceDetect.Vision.Detection.HaarCascadeWriter"/> class for details.</para> 
            </example>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascade.#ctor(System.Int32,System.Int32,FaceDetect.Vision.Detection.HaarCascadeStage[])">
            <summary>
              Constructs a new Haar Cascade.
            </summary>
            
            <param name="baseWidth">Base feature width.</param>
            <param name="baseHeight">Base feature height.</param>
            <param name="stages">Haar-like features classification stages.</param>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascade.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a new Haar Cascade.
            </summary>
            
            <param name="baseWidth">Base feature width.</param>
            <param name="baseHeight">Base feature height.</param>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascade.checkTiltedFeatures(FaceDetect.Vision.Detection.HaarCascadeStage[])">
            <summary>
              Checks if the classifier contains tilted (rotated) features
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascade.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascade.FromXml(System.IO.Stream)">
            <summary>
              Loads a HaarCascade from a OpenCV-compatible XML file.
            </summary>
            
            <param name="stream">
               A <see cref="T:System.IO.Stream"/> containing the file stream
               for the xml definition of the classifier to be loaded.</param>
               
            <returns>The HaarCascadeClassifier loaded from the file.</returns>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascade.FromXml(System.String)">
            <summary>
              Loads a HaarCascade from a OpenCV-compatible XML file.
            </summary>
            
            <param name="path">
               The file path for the xml definition of the classifier to be loaded.</param>
               
            <returns>The HaarCascadeClassifier loaded from the file.</returns>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascade.FromXml(System.IO.TextReader)">
            <summary>
              Loads a HaarCascade from a OpenCV-compatible XML file.
            </summary>
            
            <param name="stringReader">
               A <see cref="T:System.IO.StringReader"/> containing the file stream
               for the xml definition of the classifier to be loaded.</param>
               
            <returns>The HaarCascadeClassifier loaded from the file.</returns>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascade.ToCode(System.String,System.String)">
            <summary>
              Saves a HaarCascade to C# code.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascade.ToCode(System.IO.TextWriter,System.String)">
            <summary>
              Saves a HaarCascade to C# code.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarCascade.Width">
            <summary>
              Gets the stages' base width.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarCascade.Height">
            <summary>
              Gets the stages' base height.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarCascade.Stages">
            <summary>
              Gets the classification stages.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarCascade.HasTiltedFeatures">
            <summary>
              Gets a value indicating whether this cascade has tilted features.
            </summary>
            
            <value>
            	<c>true</c> if this cascade has tilted features; otherwise, <c>false</c>.
            </value>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.Cascades.FaceHaarCascade.#ctor">
            <summary>
              Hardcoded partial transcription of <i>haarcascade_frontalface_alt.xml</i>
              based on code by Mario Klingemann.
            </summary>
            
        </member>
        <member name="T:FaceDetect.Vision.Detection.Cascades.NoseHaarCascade">
            <summary>
              Automatic transcription of haar cascade definitions 
              for facial features by Modesto Castrillon-Santana.
            </summary>
            
            <remarks>
            <para>
              This code has been automatically generated by the Accord.NET Framework
              based on original research by Modesto Castrillon-Santana. The original
              code has been shared under a BSD license in the OpenCV library and has
              been incorporated in the Accord.NET Framework under permission of the
              original author.</para>
              
            <code>
              // Copyright (c) 2008, Modesto Castrillon-Santana (IUSIANI, University of
              // Las Palmas de Gran Canaria, Spain).
              //  All rights reserved.
              //  
              // Redistribution and use in source and binary forms, with or without
              // modification, are permitted provided that the following conditions are
              // met:
              //       
              //    * Redistributions of source code must retain the above copyright
              //      notice, this list of conditions and the following disclaimer.
              //    * Redistributions in binary form must reproduce the above
              //      copyright notice, this list of conditions and the following
              //      disclaimer in the documentation and/or other materials provided
              //      with the distribution.  
              //    * The name of Contributor may not used to endorse or promote products 
              //      derived from this software without specific prior written permission.
              //
              //  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
              //  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
              //  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
              //  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
              //  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
              //  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
              //  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
              //  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
              //  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
              //  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
              //  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
            </code>
            
            </remarks>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.Cascades.NoseHaarCascade.#ctor">
            <summary>
              Creates a new cascade for nose detection.
            </summary>
            
        </member>
        <member name="T:FaceDetect.Vision.Detection.HaarCascadeStage">
            <summary>
              Haar Cascade Classifier Stage.
            </summary>
            
            <remarks>
              A Haar Cascade Classifier is composed of several stages. Each stage
              contains a set of classifier trees used in the decisioning process.
            </remarks>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascadeStage.#ctor">
            <summary>
              Constructs a new Haar Cascade Stage.
            </summary>
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascadeStage.#ctor(System.Double)">
            <summary>
              Constructs a new Haar Cascade Stage.
            </summary>
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascadeStage.#ctor(System.Double,System.Int32,System.Int32)">
            <summary>
              Constructs a new Haar Cascade Stage.
            </summary>
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascadeStage.Classify(FaceDetect.Imaging.IntegralImage2,System.Int32,System.Int32,System.Double)">
            <summary>
              Classifies an image as having the searched object or not.
            </summary>
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascadeStage.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarCascadeStage.Trees">
            <summary>
              Gets or sets the feature trees and its respective
              feature tree nodes which compose this stage.
            </summary>
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarCascadeStage.Threshold">
            <summary>
              Gets or sets the threshold associated with this stage,
              i.e. the minimum value the classifiers should output
              to decide if the image contains the object or not.
            </summary>
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarCascadeStage.ParentIndex">
            <summary>
              Gets the index of the parent stage from this stage.
            </summary>
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarCascadeStage.NextIndex">
            <summary>
              Gets the index of the next stage from this stage.
            </summary>
        </member>
        <member name="T:FaceDetect.Vision.Detection.HaarCascadeSerializationObject">
            <summary>
              Haar Cascade Serialization Root. This class is used
              only for XML serialization/deserialization.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarCascadeSerializationObject.Stages">
            <summary>
              The stages retrieved after deserialization.
            </summary>
        </member>
        <member name="T:FaceDetect.Vision.Detection.HaarCascadeWriter">
            <summary>
              Automatic transcriber for Haar cascades.
            </summary>
            
            <remarks>
              This class can be used to generate code-only definitions for Haar cascades,
              avoiding the need for loading and parsing XML files during application startup.
              This class generates a C# code for a class inheriting from <see cref="T:FaceDetect.Vision.Detection.HaarCascade"/>
              which may be used to create a <see cref="T:FaceDetect.Vision.Detection.HaarObjectDetector"/>.
            </remarks>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascadeWriter.#ctor(System.IO.TextWriter)">
            <summary>
              Constructs a new <see cref="T:FaceDetect.Vision.Detection.HaarCascadeWriter"/> class.
            </summary>
            <param name="stream">The stream to write to.</param>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarCascadeWriter.Write(FaceDetect.Vision.Detection.HaarCascade,System.String)">
            <summary>
              Writes the specified cascade.
            </summary>
            <param name="cascade">The cascade to write.</param>
            <param name="className">The name for the generated class.</param>
            
        </member>
        <member name="T:FaceDetect.Vision.Detection.HaarClassifier">
             <summary>
               Strong classifier based on a weaker cascade of
               classifiers using Haar-like rectangular features.
             </summary>
            
             <remarks>
             <para>
               The Viola-Jones object detection framework is the first object detection framework
               to provide competitive object detection rates in real-time proposed in 2001 by Paul
               Viola and Michael Jones. Although it can be trained to detect a variety of object
               classes, it was motivated primarily by the problem of face detection.</para>
               
             <para>
               The implementation of this code has used Viola and Jones' original publication, the
               OpenCV Library and the Marilena Project as reference. OpenCV is released under a BSD
               license, it is free for both academic and commercial use. Please be aware that some
               particular versions of the Haar object detection framework are patented by Viola and
               Jones and may be subject to restrictions for use in commercial applications. The code
               has been implemented with full support for tilted Haar features.</para>
               
              <para>
                 References:
                 <list type="bullet">
                   <item><description>
                     <a href="http://www.cs.utexas.edu/~grauman/courses/spring2007/395T/papers/viola_cvpr2001.pdf">
                     Viola, P. and Jones, M. (2001). Rapid Object Detection using a Boosted Cascade
                     of Simple Features.</a></description></item>
                   <item><description>
                     <a href="http://en.wikipedia.org/wiki/Viola-Jones_object_detection_framework">
                     http://en.wikipedia.org/wiki/Viola-Jones_object_detection_framework</a>
                   </description></item>
                 </list>
               </para>
             </remarks>
             
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarClassifier.#ctor(FaceDetect.Vision.Detection.HaarCascade)">
            <summary>
              Constructs a new classifier.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarClassifier.#ctor(System.Int32,System.Int32,FaceDetect.Vision.Detection.HaarCascadeStage[])">
            <summary>
              Constructs a new classifier.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarClassifier.Compute(FaceDetect.Imaging.IntegralImage2,System.Drawing.Rectangle)">
            <summary>
              Detects the presence of an object in a given window.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarClassifier.Cascade">
            <summary>
              Gets the cascade of weak-classifiers
              used by this strong classifier.
            </summary>
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarClassifier.Scale">
            <summary>
              Gets or sets the scale of the search window
              being currently used by the classifier.
            </summary>
            
        </member>
        <member name="T:FaceDetect.Vision.Detection.HaarFeature">
            <summary>
              Rectangular Haar-like feature container.
            </summary>
            <remarks>
              References:
              - http://en.wikipedia.org/wiki/Haar-like_features#Rectangular_Haar-like_features
            </remarks>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarFeature.#ctor">
            <summary>
              Constructs a new Haar-like feature.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarFeature.#ctor(FaceDetect.Vision.Detection.HaarRectangle[])">
            <summary>
              Constructs a new Haar-like feature.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarFeature.#ctor(System.Int32[][])">
            <summary>
              Constructs a new Haar-like feature.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarFeature.#ctor(System.Boolean,System.Int32[][])">
            <summary>
              Constructs a new Haar-like feature.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarFeature.GetSum(FaceDetect.Imaging.IntegralImage2,System.Int32,System.Int32)">
            <summary>
              Gets the sum of the areas of the rectangular features in an integral image.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarFeature.SetScaleAndWeight(System.Single,System.Single)">
            <summary>
              Sets the scale and weight of a Haar-like rectangular feature container.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarFeature.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarFeature.Tilted">
            <summary>
              Gets or sets whether this feature is tilted.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarFeature.Rectangles">
            <summary>
              Gets or sets the Haar rectangles for this feature.
            </summary>
            
        </member>
        <member name="T:FaceDetect.Vision.Detection.HaarFeatureNode">
            <summary>
              Haar Cascade Feature Tree Node.
            </summary>
            <remarks>
              The Feature Node is a node belonging to a feature tree,
              containing information about child nodes and an associated 
              <see cref="T:FaceDetect.Vision.Detection.HaarFeature"/>.
            </remarks>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarFeatureNode.#ctor">
            <summary>
              Constructs a new feature tree node.
            </summary>
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarFeatureNode.#ctor(System.Double,System.Double,System.Double,System.Int32[][])">
            <summary>
              Constructs a new feature tree node.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarFeatureNode.#ctor(System.Double,System.Double,System.Double,System.Boolean,System.Int32[][])">
            <summary>
              Constructs a new feature tree node.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarFeatureNode.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarFeatureNode.Threshold">
            <summary>
              Gets the threshold for this feature.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarFeatureNode.LeftValue">
            <summary>
              Gets the left value for this feature.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarFeatureNode.RightValue">
            <summary>
              Gets the right value for this feature.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarFeatureNode.LeftNodeIndex">
            <summary>
              Gets the left node index for this feature.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarFeatureNode.RightNodeIndex">
            <summary>
              Gets the right node index for this feature.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarFeatureNode.Feature">
            <summary>
              Gets the feature associated with this node.
            </summary>
            
        </member>
        <member name="T:FaceDetect.Vision.Detection.HaarRectangle">
            <summary>
              Scalable rectangular area.
            </summary>
            
            <remarks>
              A rectangle which can be at any position and scale within the original image.
            </remarks>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarRectangle.#ctor(System.Int32[])">
            <summary>
              Constructs a new Haar-like feature rectangle.
            </summary>
            <param name="values">Values for this rectangle.</param>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarRectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
              Constructs a new Haar-like feature rectangle.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarRectangle.ScaleRectangle(System.Single)">
            <summary>
              Scales the values of this rectangle.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarRectangle.ScaleWeight(System.Single)">
            <summary>
              Scales the weight of this rectangle.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarRectangle.Parse(System.String)">
            <summary>
              Converts from a string representation.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarRectangle.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarRectangle.X">
            <summary>
              Gets or sets the x-coordinate of this Haar feature rectangle.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarRectangle.Y">
            <summary>
              Gets or sets the y-coordinate of this Haar feature rectangle.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarRectangle.Width">
            <summary>
              Gets or sets the width of this Haar feature rectangle.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarRectangle.Height">
            <summary>
              Gets or sets the height of this Haar feature rectangle.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarRectangle.Weight">
            <summary>
              Gets or sets the weight of this Haar feature rectangle.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarRectangle.ScaledX">
            <summary>
              Gets or sets the scaled x-coordinate of this Haar feature rectangle.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarRectangle.ScaledY">
            <summary>
              Gets or sets the scaled y-coordinate of this Haar feature rectangle.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarRectangle.ScaledWidth">
            <summary>
              Gets or sets the scaled width of this Haar feature rectangle.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarRectangle.ScaledHeight">
            <summary>
              Gets or sets the scaled height of this Haar feature rectangle.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarRectangle.ScaledWeight">
            <summary>
              Gets or sets the scaled weight of this Haar feature rectangle.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarRectangle.Area">
            <summary>
              Gets the area of this rectangle.
            </summary>
            
        </member>
        <member name="T:FaceDetect.Vision.Detection.ObjectDetectorSearchMode">
            <summary>
              Object detector options for the search procedure.
            </summary>
            
        </member>
        <member name="F:FaceDetect.Vision.Detection.ObjectDetectorSearchMode.Default">
            <summary>
              Entire image will be scanned.
            </summary>
            
        </member>
        <member name="F:FaceDetect.Vision.Detection.ObjectDetectorSearchMode.Single">
            <summary>
              Only a single object will be retrieved.
            </summary>
            
        </member>
        <member name="F:FaceDetect.Vision.Detection.ObjectDetectorSearchMode.NoOverlap">
            <summary>
              If a object has already been detected inside an area,
              it will not be scanned twice for inner/overlapping objects.
            </summary>
            
        </member>
        <member name="T:FaceDetect.Vision.Detection.ObjectDetectorScalingMode">
            <summary>
              Object detector options for window scaling.
            </summary>
            
        </member>
        <member name="F:FaceDetect.Vision.Detection.ObjectDetectorScalingMode.GreaterToSmaller">
            <summary>
              Will start with a big search window and
              gradually scale into smaller ones.
            </summary>
            
        </member>
        <member name="F:FaceDetect.Vision.Detection.ObjectDetectorScalingMode.SmallerToGreater">
            <summary>
              Will start with small search windows and
              gradually scale into greater ones.
            </summary>
            
        </member>
        <member name="T:FaceDetect.Vision.Detection.HaarObjectDetector">
            <summary>
              Viola-Jones Object Detector based on Haar-like features.
            </summary>
            <remarks>
            
            <para>
              The Viola-Jones object detection framework is the first object detection framework
              to provide competitive object detection rates in real-time proposed in 2001 by Paul
              Viola and Michael Jones. Although it can be trained to detect a variety of object
              classes, it was motivated primarily by the problem of face detection.</para>
              
            <para>
              The implementation of this code has used Viola and Jones' original publication, the
              OpenCV Library and the Marilena Project as reference. OpenCV is released under a BSD
              license, it is free for both academic and commercial use. Please be aware that some
              particular versions of the Haar object detection framework are patented by Viola and
              Jones and may be subject to restrictions for use in commercial applications. The code
              has been implemented with full support for tilted Haar features from the ground up.</para>
              
             <para>
                References:
                <list type="bullet">
                  <item><description>
                    <a href="http://www.cs.utexas.edu/~grauman/courses/spring2007/395T/papers/viola_cvpr2001.pdf">
                    Viola, P. and Jones, M. (2001). Rapid Object Detection using a Boosted Cascade
                    of Simple Features.</a></description></item>
                  <item><description>
                    <a href="http://en.wikipedia.org/wiki/Viola-Jones_object_detection_framework">
                    http://en.wikipedia.org/wiki/Viola-Jones_object_detection_framework</a>
                  </description></item>
                </list>
              </para>
            </remarks>
            
        </member>
        <member name="T:FaceDetect.Vision.Detection.IObjectDetector">
            <summary>
              Object detector interface.
            </summary>
        </member>
        <member name="M:FaceDetect.Vision.Detection.IObjectDetector.ProcessFrame(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process a new image scene looking for objects.
            </summary>
        </member>
        <member name="P:FaceDetect.Vision.Detection.IObjectDetector.DetectedObjects">
            <summary>
              Gets the location of the detected objects.
            </summary>
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarObjectDetector.#ctor(FaceDetect.Vision.Detection.HaarCascade)">
            <summary>
              Constructs a new Haar object detector.
            </summary>
            <param name="cascade">
              The <see cref="T:FaceDetect.Vision.Detection.HaarCascade"/> to use in the detector's classifier.
              For the default face cascade, please take a look on
              <see cref="T:FaceDetect.Vision.Detection.Cascades.FaceHaarCascade"/>.
            </param>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarObjectDetector.#ctor(FaceDetect.Vision.Detection.HaarCascade,System.Int32)">
            <summary>
              Constructs a new Haar object detector.
            </summary>
            <param name="cascade">
              The <see cref="T:FaceDetect.Vision.Detection.HaarCascade"/> to use in the detector's classifier.
              For the default face cascade, please take a look on
              <see cref="T:FaceDetect.Vision.Detection.Cascades.FaceHaarCascade"/>.
            </param>
            <param name="minSize">Minimum window size to consider when searching
            objects. Default value is <c>15</c>.</param>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarObjectDetector.#ctor(FaceDetect.Vision.Detection.HaarCascade,System.Int32,FaceDetect.Vision.Detection.ObjectDetectorSearchMode)">
            <summary>
              Constructs a new Haar object detector.
            </summary>
            <param name="cascade">
              The <see cref="T:FaceDetect.Vision.Detection.HaarCascade"/> to use in the detector's classifier.
              For the default face cascade, please take a look on
              <see cref="T:FaceDetect.Vision.Detection.Cascades.FaceHaarCascade"/>.
            </param>
            <param name="minSize">Minimum window size to consider when searching
            objects. Default value is <c>15</c>.</param>
            <param name="searchMode">The <see cref="T:FaceDetect.Vision.Detection.ObjectDetectorSearchMode"/> to use
            during search. Please see documentation of <see cref="T:FaceDetect.Vision.Detection.ObjectDetectorSearchMode"/>
            for details. Default value is <see cref="F:FaceDetect.Vision.Detection.ObjectDetectorSearchMode.NoOverlap"/></param>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarObjectDetector.#ctor(FaceDetect.Vision.Detection.HaarCascade,System.Int32,FaceDetect.Vision.Detection.ObjectDetectorSearchMode,System.Single)">
            <summary>
              Constructs a new Haar object detector.
            </summary>
            <param name="cascade">
              The <see cref="T:FaceDetect.Vision.Detection.HaarCascade"/> to use in the detector's classifier.
              For the default face cascade, please take a look on
              <see cref="T:FaceDetect.Vision.Detection.Cascades.FaceHaarCascade"/>.
            </param>
            <param name="minSize">Minimum window size to consider when searching
            objects. Default value is <c>15</c>.</param>
            <param name="searchMode">The <see cref="T:FaceDetect.Vision.Detection.ObjectDetectorSearchMode"/> to use
            during search. Please see documentation of <see cref="T:FaceDetect.Vision.Detection.ObjectDetectorSearchMode"/>
            for details. Default value is <see cref="F:FaceDetect.Vision.Detection.ObjectDetectorSearchMode.NoOverlap"/></param>
            <param name="scaleFactor">The re-scaling factor to use when re-scaling the window during search.</param>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarObjectDetector.#ctor(FaceDetect.Vision.Detection.HaarCascade,System.Int32,FaceDetect.Vision.Detection.ObjectDetectorSearchMode,System.Single,FaceDetect.Vision.Detection.ObjectDetectorScalingMode)">
            <summary>
              Constructs a new Haar object detector.
            </summary>
            <param name="cascade">
              The <see cref="T:FaceDetect.Vision.Detection.HaarCascade"/> to use in the detector's classifier.
              For the default face cascade, please take a look on
              <see cref="T:FaceDetect.Vision.Detection.Cascades.FaceHaarCascade"/>.
            </param>
            <param name="minSize">Minimum window size to consider when searching
            objects. Default value is <c>15</c>.</param>
            <param name="searchMode">The <see cref="T:FaceDetect.Vision.Detection.ObjectDetectorSearchMode"/> to use
            during search. Please see documentation of <see cref="T:FaceDetect.Vision.Detection.ObjectDetectorSearchMode"/>
            for details. Default is <see cref="F:FaceDetect.Vision.Detection.ObjectDetectorSearchMode.NoOverlap"/>.</param>
            <param name="scaleFactor">The scaling factor to rescale the window
            during search. Default value is <c>1.2f</c>.</param>
            <param name="scalingMode">The <see cref="T:FaceDetect.Vision.Detection.ObjectDetectorScalingMode"/> to use
            when re-scaling the search window during search. Default is <see cref="F:FaceDetect.Vision.Detection.ObjectDetectorScalingMode.SmallerToGreater"/>.</param>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarObjectDetector.ProcessFrame(System.Drawing.Bitmap)">
            <summary>
              Performs object detection on the given frame.
            </summary>
            
        </member>
        <member name="M:FaceDetect.Vision.Detection.HaarObjectDetector.ProcessFrame(AForge.Imaging.UnmanagedImage)">
            <summary>
              Performs object detection on the given frame.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarObjectDetector.MinSize">
            <summary>
              Minimum window size to consider when searching objects.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarObjectDetector.MaxSize">
            <summary>
              Maximum window size to consider when searching objects.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarObjectDetector.Channel">
            <summary>
              Gets or sets the color channel to use when processing color images. 
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarObjectDetector.ScalingFactor">
            <summary>
              Gets or sets the scaling factor to rescale the window during search.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarObjectDetector.SearchMode">
            <summary>
              Gets or sets the desired searching method.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarObjectDetector.ScalingMode">
            <summary>
              Gets or sets the desired scaling method.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarObjectDetector.DetectedObjects">
            <summary>
              Gets the detected objects bounding boxes.
            </summary>
            
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarObjectDetector.Classifier">
            <summary>
              Gets the internal Cascade Classifier used by this detector.
            </summary>
        </member>
        <member name="P:FaceDetect.Vision.Detection.HaarObjectDetector.Steady">
            <summary>
              Gets how many frames the object has
              been detected in a steady position.
            </summary>
            <value>
              The number of frames the detected object
              has been in a steady position.</value>
              
        </member>
        <member name="T:EZ_B.Joystick.ButtonEnum">
            <summary>
            Flags enumeration of joystick buttons.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button1">
            <summary>
            1st button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button2">
            <summary>
            2nd button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button3">
            <summary>
            3rd button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button4">
            <summary>
            4th button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button5">
            <summary>
            5th button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button6">
            <summary>
            6th button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button7">
            <summary>
            7th button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button8">
            <summary>
            8th button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button9">
            <summary>
            9th button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button10">
            <summary>
            10th button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button11">
            <summary>
            11th button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button12">
            <summary>
            12th button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button13">
            <summary>
            13th button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button14">
            <summary>
            14th button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button15">
            <summary>
            15th button.
            </summary>
        </member>
        <member name="F:EZ_B.Joystick.ButtonEnum.Button16">
            <summary>
            16th button.
            </summary>
        </member>
        <member name="M:EZ_B.Joystick.JoystickStatus.IsButtonPressed(EZ_B.Joystick.ButtonEnum)">
            <summary>
            Check if certain button (or combination of buttons) is pressed.
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.JoystickStatus.XAxis">
            <summary>
            Position of X axis, [-1, 1].
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.JoystickStatus.YAxis">
            <summary>
            Position of Y axis, [-1, 1].
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.JoystickStatus.ZAxis">
            <summary>
            Position of Z axis, [-1, 1].
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.JoystickStatus.RAxis">
            <summary>
            Position of R axis - 4th joystick's axes, [-1, 1].
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.JoystickStatus.UAxis">
            <summary>
            Position of U axis - 5th joystick's axes, [-1, 1].
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.JoystickStatus.VAxis">
            <summary>
            Position of V axis - 6th joystick's axes, [-1, 1].
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.JoystickStatus.Buttons">
            <summary>
            Joystick available buttons
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.JoystickStatus.PointOfView">
            <summary>
            Current point of view state, [0, 359].
            </summary>
            
        </member>
        <member name="M:EZ_B.JPEGStream.#ctor">
            <summary>
            Create a JPEGStream instance
            </summary>
        </member>
        <member name="M:EZ_B.JPEGStream.#ctor(System.String)">
            <summary>
            Create a JPEGStream instance and specify the URL of image
            </summary>
        </member>
        <member name="M:EZ_B.JPEGStream.SetURL(System.String)">
            <summary>
            Set a new URL for streaming
            </summary>
        </member>
        <member name="M:EZ_B.JPEGStream.Start(System.Int32)">
            <summary>
            Start the JPEG Streamer with the specified FPS.
            The FPS is dependent on the internet connection speed.
            We usually use an FPS of 10.
            </summary>
        </member>
        <member name="M:EZ_B.JPEGStream.Start(System.String,System.Int32)">
            <summary>
            Start the JPEG Streamer with the specified URL and FPS.
            The FPS is dependent on the internet connection speed.
            We usually use an FPS of 10. Specify a value of -1 for unlimited FPS control
            </summary>
        </member>
        <member name="M:EZ_B.JPEGStream.Stop">
            <summary>
            Stop the JPEG Streamer
            </summary>
        </member>
        <member name="E:EZ_B.JPEGStream.OnImageReady">
            <summary>
            Event raised when the image is ready. This image must be disposed after use.
            </summary>
        </member>
        <member name="E:EZ_B.JPEGStream.OnStart">
            <summary>
            Event raised when the JPEGStream has started
            </summary>
        </member>
        <member name="E:EZ_B.JPEGStream.OnStop">
            <summary>
            Event raised when the JPEGStream has stopped
            </summary>
        </member>
        <member name="P:EZ_B.JPEGStream.GetURL">
            <summary>
            Get the JPEG URL
            </summary>
        </member>
        <member name="P:EZ_B.JPEGStream.IsRunning">
            <summary>
            Get the status of the JPEGStreamer
            </summary>
        </member>
        <member name="M:EZ_B.RandomUnique.#ctor">
            <summary>
            Create an instance of the RandomUnique Class which attempts to provide a unique random number and other random functions
            </summary>
        </member>
        <member name="M:EZ_B.RandomUnique.GetRandomNumber(System.Int32,System.Int32)">
            <summary>
            Return a random number within specified range.
            Using this random number generating function will provide a common seed.
            </summary>
        </member>
        <member name="M:EZ_B.RandomUnique.GetRandomUniqueNumber(System.Int32,System.Int32)">
            <summary>
            Return a random number and tries to make the returned value unique from the last time this function was called.
            </summary>
        </member>
        <member name="M:EZ_B.RoboQuad.SendCommand(EZ_B.RoboQuad.RoboQuadCmdEnum)">
            <summary>
            Send commands to control a WowWee RoboQuad
            </summary>
        </member>
        <member name="T:EZ_B.RoboQuad.RoboQuadCmdEnum">
            <summary>
            List of RoboQuad Commands
            </summary>
        </member>
        <member name="M:EZ_B.RoboSapien.SendCommand(EZ_B.RoboSapien.RoboSapienCmdEnum)">
            <summary>
            Send commands to control a WowWee RoboSapien
            </summary>
        </member>
        <member name="T:EZ_B.RoboSapien.RoboSapienCmdEnum">
            <summary>
            List of RoboSapien Commands
            </summary>
        </member>
        <member name="F:EZ_B.EZ430.Address">
            <summary>
            Once connected is successfully established, this returns the address of the chrono watch. Four bytes, seperated by a dash
            </summary>
        </member>
        <member name="M:EZ_B.EZ430.#ctor(EZ_B.EZB)">
            <summary>
            Create a new instance of the eZ430 class connector
            </summary>
        </member>
        <member name="M:EZ_B.EZ430.Start">
            <summary>
            Start the eZ430
            </summary>
        </member>
        <member name="M:EZ_B.EZ430.Stop">
            <summary>
            Stop the eZ430
            </summary>
        </member>
        <member name="M:EZ_B.EZ430.Dispose">
            <summary>
            Dispose and close the object
            </summary>
        </member>
        <member name="M:EZ_B.EZ430.Ping">
            <summary>
            Send a ping to the eZ430 and wait for a response
            </summary>
        </member>
        <member name="M:EZ_B.EZ430.GetAccData">
            <summary>
            Get the accelometer data from the eZ430
            </summary>
        </member>
        <member name="P:EZ_B.EZ430.PortName">
            <summary>
            Set or Get the COM port of the eZ430
            </summary>
        </member>
        <member name="P:EZ_B.EZ430.IsConnected">
            <summary>
            Are we connected to a eZ430 module?
            </summary>
        </member>
        <member name="F:EZ_B.SabertoothSerial.SpeedLeftWheelForward">
            <summary>
            Value of the Left Wheel when moving forward
            </summary>
        </member>
        <member name="F:EZ_B.SabertoothSerial.SpeedRightWheelForward">
            <summary>
            Value of the Right Wheel when moving forward
            </summary>
        </member>
        <member name="F:EZ_B.SabertoothSerial.SpeedLeftWheelTurnLeft">
            <summary>
            Value of the Left Wheel when turning Left
            </summary>
        </member>
        <member name="F:EZ_B.SabertoothSerial.SpeedRightWheelTurnLeft">
            <summary>
            Value of the Right Wheel when turning Right
            </summary>
        </member>
        <member name="F:EZ_B.SabertoothSerial.SpeedLeftWheelReverse">
            <summary>
            Value of the Left Wheel when moving reverse
            </summary>
        </member>
        <member name="F:EZ_B.SabertoothSerial.SpeedRightWheelReverse">
            <summary>
            Value of the Right Wheel when moving reverse
            </summary>
        </member>
        <member name="F:EZ_B.SabertoothSerial.SpeedLeftWheelTurnRight">
            <summary>
            Value of the Left Wheel when turning right
            </summary>
        </member>
        <member name="F:EZ_B.SabertoothSerial.SpeedRightWheelTurnRight">
            <summary>
            Value of the Right Wheel when turning right
            </summary>
        </member>
        <member name="F:EZ_B.SabertoothSerial.BaudRate">
            <summary>
            Baud rate for the communication
            </summary>
        </member>
        <member name="F:EZ_B.SabertoothSerial.DigitalPort">
            <summary>
            Digital port used for communication to the controller
            </summary>
        </member>
        <member name="M:EZ_B.SabertoothSerial.Stop">
            <summary>
             Stop
            </summary>
        </member>
        <member name="M:EZ_B.SabertoothSerial.Forward">
            <summary>
             Move forward.
            </summary>
        </member>
        <member name="M:EZ_B.SabertoothSerial.Reverse">
            <summary> 
             Move reverse.
            </summary>
        </member>
        <member name="M:EZ_B.SabertoothSerial.Right">
            <summary> 
             Right.
            </summary>
        </member>
        <member name="M:EZ_B.SabertoothSerial.Left">
            <summary> 
             Left.
            </summary>
        </member>
        <member name="M:EZ_B.RSS.GetRSSMessage(System.String,EZ_B.RSS.SortDirectionEnum,System.Int32)">
            <summary>
            Gets an RSS feed and only returns the specified story index. Returns the last if the specified storyIndex is greater than the index count.
            The storyIndex is a zero based number.
            </summary>
        </member>
        <member name="M:EZ_B.RSS.GetRSSMessages(System.String,EZ_B.RSS.SortDirectionEnum)">
            <summary>
            Get RSS feed from the specific URL
            </summary>
        </member>
        <member name="M:EZ_B.Sphero.Roll(System.Int32,System.Byte)">
            <summary>
            The headingDegrees follows the 360 degrees on a circle, relative to the ball: 0 is straight ahead, 90 is to the right, 180 is back and 270 is to the left. The valid range is 0..359
            </summary>
        </member>
        <member name="M:EZ_B.Sphero.SetHeading(System.Int32)">
            <summary>
            Adjusts the orientation of Sphero by commanding a new reference heading in degrees, which ranges from 0 to 359. You will see the ball respond immediately to this command if stabilization is enabled.
            </summary>
        </member>
        <member name="M:EZ_B.Twitter.GetTwitterMessage(System.String,EZ_B.RSS.SortDirectionEnum,System.Int32)">
            <summary>
            Get latest messages from specified twitter account
            </summary>
        </member>
        <member name="M:EZ_B.Twitter.GetTwitterMessages(System.String,EZ_B.RSS.SortDirectionEnum)">
            <summary>
            Get latest messages from specified twitter account
            </summary>
        </member>
        <member name="F:EZ_B.Speakjet.Baud">
            <summary>
            Specify the baud rate for the connection to the SpeakJet
            </summary>
        </member>
        <member name="F:EZ_B.Speakjet.soundCodes">
            <summary>
            Sound codes offset starts at 128 to 254
            </summary>
        </member>
        <member name="M:EZ_B.Speakjet.SpeakCode(EZ_B.Digital.DigitalPortEnum,System.Byte[])">
            <summary>
            Speak by phonetic codes
            </summary>
        </member>
        <member name="M:EZ_B.Speakjet.Reset(EZ_B.Digital.DigitalPortEnum)">
            <summary>
            Reset the Speakjet
            </summary>
        </member>
        <member name="M:EZ_B.Speakjet.SetDistortion(EZ_B.Digital.DigitalPortEnum,System.Int32)">
            <summary>
            Set the global distortion between 0-255
            </summary>
        </member>
        <member name="M:EZ_B.Speakjet.SetVolume(EZ_B.Digital.DigitalPortEnum,System.Int32)">
            <summary>
            Set the global volume between 0-255
            </summary>
        </member>
        <member name="M:EZ_B.Speakjet.SetEnvelope(EZ_B.Digital.DigitalPortEnum,EZ_B.Speakjet.EnvelopeType,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Set the global envelope. Frequency is between 0-3999
            </summary>
        </member>
        <member name="M:EZ_B.Speakjet.PlayNote(EZ_B.Digital.DigitalPortEnum,EZ_B.Speakjet.OscillatorEnum,System.Int32,System.Int32)">
            <summary>
            Play a note on the selected oscillator. Frequency is between 0-3999. Volume is between 0-31
            </summary>
        </member>
        <member name="M:EZ_B.Speakjet.SpeakString(EZ_B.Digital.DigitalPortEnum,System.String)">
            <summary>
            Speak by string and reference the internal dictionary to pronounce words.
            If words are not found in dictionary, custom \PHONETICs can be used.
            </summary>
        </member>
        <member name="F:EZ_B.PWM.PWM_MAX">
            <summary>
             The maximum value for a PWM (100)
            </summary>
        </member>
        <member name="F:EZ_B.PWM.PWM_MIN">
            <summary>
             The minimum value of a PWM (0)
            </summary>
        </member>
        <member name="M:EZ_B.PWM.SetPWM(EZ_B.Digital.DigitalPortEnum,System.Int32)">
            <summary>
            Set the PWM Duty Cycle. The speed can be between PWM_MIN and PWM_MAX
            </summary>
        </member>
        <member name="M:EZ_B.PWM.GetPWM(EZ_B.Digital.DigitalPortEnum)">
            <summary>
            Get the PWM
            </summary>
        </member>
        <member name="M:EZ_B.PWM.StopPWM(EZ_B.Digital.DigitalPortEnum)">
            <summary>
            Stop PWM.
            </summary>
        </member>
        <member name="M:EZ_B.PWM.IsPWMStopped(EZ_B.Digital.DigitalPortEnum)">
            <summary>
            Return true if the specified pwm port is in a stopped state
            </summary>
        </member>
        <member name="F:EZ_B.EZTCPClientManager.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:EZ_B.EZTCPClientManager.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:EZ_B.EZTCPClientManager.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:EZ_B.Resource1">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EZ_B.Resource1.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EZ_B.Resource1.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:EZ_B.Resource1.PhraseALator">
             <summary>
               Looks up a localized string similar to a = \EYIY \IY
            able=\FAST \EYIY \BO \UH \LE  
            about=\UX \OB \AYWW \TT  
            across= \AX \EK \FAST \RR \OH \SE \SE
            act= \AY \EK \TT
            acting = \AY \EK \TT \STRESS \IH \NGE
            activated= \AY \KE \TT \FAST \IH \VV \FAST \EYIY \TT \IH \ED
            add= \AY \AY \ED
            address= \SLOW \AY \ED \FAST \RR \EH \SLOW \SE
            adorn = \SLOW \AX \DO \FAST \OWRR \NE
            afraid= \AX \FF \FAST \RR \EYIY \ED
            after= \AY \FF \TT \FAST \AXRR
            afternoon= \AY \FF \FAST \TT \FAST \AXRR \FAST \NE \UW \SLOW \NE
            again= \AX \GE \SLOW \EY \NE
            against= \ [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="M:EZ_B.TCPServer.Start(System.Int32)">
            <summary>
            Start the TCP Server and beginning listening on the specified port.
            </summary> 
        </member>
        <member name="M:EZ_B.TCPServer.Stop">
            <summary>
            Stop the TCP Server listener
            </summary>
        </member>
        <member name="M:EZ_B.TCPServer.GetConnectedClients">
            <summary>
            Receive a list of the connected clients and their respective terminal id's
            </summary>
        </member>
        <member name="M:EZ_B.TCPServer.CloseClientById(System.Int32)">
            <summary>
            Disconnect a client by it's terminal id
            </summary>
        </member>
        <member name="M:EZ_B.TCPServer.DisconnectClients">
            <summary>
            Disconnect all clients
            </summary>
        </member>
        <member name="E:EZ_B.TCPServer.OnByteReceived">
            <summary>
            This event returns the bytes.
            </summary>
        </member>
        <member name="E:EZ_B.TCPServer.OnCommandReceived">
            <summary>
            Event risen when for handleCustomEvent is true and a connected user presses the Enter key.
            This event returns the line of text entered by the user.
            </summary>
        </member>
        <member name="E:EZ_B.TCPServer.OnConnection">
            <summary>
            Event risen when for handleCustomEvent is true and a new connection is established
            </summary>
        </member>
        <member name="P:EZ_B.TCPServer.TCPPassword">
            <summary>
            This is the TCP Password for the communication channel. This does not matter when you have the HandleCustomEvent set to TRUE
            </summary>
        </member>
        <member name="P:EZ_B.TCPServer.IsRunning">
            <summary>
            Is the server currently running
            </summary>
        </member>
        <member name="P:EZ_B.TCPServer.Port">
            <summary>
            Port configured for listening
            </summary>
        </member>
        <member name="P:EZ_B.TCPServer.HandleTCPClientRequestsManually">
            <summary>
            If false, the TCPServer automatically handles all client requests and the OnEvent handlers are triggered with new data.
            If true, use the TCPServer from the OnConnection event handler to handle data of new connections manually and data event handlers are triggered.
            </summary>
        </member>
        <member name="F:EZ_B.VideoPlayer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:EZ_B.VideoPlayer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:EZ_B.VideoPlayer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:EZ_B.VideoPlayer.OnPlayingFrame">
            <summary>
            Event risen for every frame. Returns the current frame number
            </summary>
        </member>
        <member name="E:EZ_B.VideoPlayer.OnBeginPlaying">
            <summary>
            Event risen from a video begins playing
            </summary>
        </member>
        <member name="E:EZ_B.VideoPlayer.OnError">
            <summary>
            Event risen from an error playing video
            </summary>
        </member>
        <member name="E:EZ_B.VideoPlayer.OnCompleted">
            <summary>
            Event risen when video is completed
            </summary>
        </member>
        <member name="E:EZ_B.Vuzix.OnConnected">
            <summary>
            Event when connected to device
            </summary>
        </member>
        <member name="E:EZ_B.Vuzix.OnDisconnected">
            <summary>
            Event when disconnected from device
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.PointF.X">
            <summary>
            X, Y coordinates of this point
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.PointF.Y">
            <summary>
            X, Y coordinates of this point
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.PointF.ToString">
            <summary>
            Convert to human-readable string
            </summary>
            <returns>A string that represents the point</returns>
        </member>
        <member name="T:EZ_B.WiimoteLib.Point">
            <summary>
            Point structure for int 2D positions (X, Y)
            </summary>  
        </member>
        <member name="F:EZ_B.WiimoteLib.Point.X">
            <summary>
            X, Y coordinates of this point
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.Point.Y">
            <summary>
            X, Y coordinates of this point
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.Point.ToString">
            <summary>
            Convert to human-readable string
            </summary>
            <returns>A string that represents the point.</returns>
        </member>
        <member name="T:EZ_B.WiimoteLib.Point3F">
            <summary>
            Point structure for floating point 3D positions (X, Y, Z)
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.Point3F.X">
            <summary>
            X, Y, Z coordinates of this point
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.Point3F.Y">
            <summary>
            X, Y, Z coordinates of this point
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.Point3F.Z">
            <summary>
            X, Y, Z coordinates of this point
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.Point3F.ToString">
            <summary>
            Convert to human-readable string
            </summary>
            <returns>A string that represents the point</returns>
        </member>
        <member name="T:EZ_B.WiimoteLib.Point3">
            <summary>
            Point structure for int 3D positions (X, Y, Z)
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.Point3.X">
            <summary>
            X, Y, Z coordinates of this point
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.Point3.Y">
            <summary>
            X, Y, Z coordinates of this point
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.Point3.Z">
            <summary>
            X, Y, Z coordinates of this point
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.Point3.ToString">
            <summary>
            Convert to human-readable string
            </summary>
            <returns>A string that represents the point.</returns>
        </member>
        <member name="T:EZ_B.WiimoteLib.WiimoteState">
            <summary>
            Current overall state of the Wiimote and all attachments
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.AccelCalibrationInfo">
            <summary>
            Current calibration information
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.AccelState">
            <summary>
            Current state of accelerometers
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.ButtonState">
            <summary>
            Current state of buttons
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.IRState">
            <summary>
            Current state of IR sensors
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.BatteryRaw">
            <summary>
            Raw byte value of current battery level
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.Battery">
            <summary>
            Calculated current battery level
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.Rumble">
            <summary>
            Current state of rumble
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.Extension">
            <summary>
            Is an extension controller inserted?
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.ExtensionType">
            <summary>
            Extension controller currently inserted, if any
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.NunchukState">
            <summary>
            Current state of Nunchuk extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.ClassicControllerState">
            <summary>
            Current state of Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.GuitarState">
            <summary>
            Current state of Guitar extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.DrumsState">
            <summary>
            Current state of Drums extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.BalanceBoardState">
            <summary>
            Current state of the Wii Fit Balance Board
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteState.LEDState">
            <summary>
            Current state of LEDs
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.WiimoteState.#ctor">
            <summary>
            Constructor for WiimoteState class
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.LEDState">
            <summary>
            Current state of LEDs
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.LEDState.LED1">
            <summary>
            LED on the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.LEDState.LED2">
            <summary>
            LED on the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.LEDState.LED3">
            <summary>
            LED on the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.LEDState.LED4">
            <summary>
            LED on the Wiimote
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.NunchukCalibrationInfo">
            <summary>
            Calibration information stored on the Nunchuk
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.NunchukCalibrationInfo.AccelCalibration">
            <summary>
            Accelerometer calibration data
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.NunchukCalibrationInfo.MinX">
            <summary>
            Joystick X-axis calibration
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.NunchukCalibrationInfo.MidX">
            <summary>
            Joystick X-axis calibration
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.NunchukCalibrationInfo.MaxX">
            <summary>
            Joystick X-axis calibration
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.NunchukCalibrationInfo.MinY">
            <summary>
            Joystick Y-axis calibration
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.NunchukCalibrationInfo.MidY">
            <summary>
            Joystick Y-axis calibration
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.NunchukCalibrationInfo.MaxY">
            <summary>
            Joystick Y-axis calibration
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo">
            <summary>
            Calibration information stored on the Classic Controller
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MinXL">
            <summary>
            Left joystick X-axis 
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MidXL">
            <summary>
            Left joystick X-axis 
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MaxXL">
            <summary>
            Left joystick X-axis 
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MinYL">
            <summary>
            Left joystick Y-axis
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MidYL">
            <summary>
            Left joystick Y-axis
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MaxYL">
            <summary>
            Left joystick Y-axis
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MinXR">
            <summary>
            Right joystick X-axis
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MidXR">
            <summary>
            Right joystick X-axis
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MaxXR">
            <summary>
            Right joystick X-axis
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MinYR">
            <summary>
            Right joystick Y-axis
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MidYR">
            <summary>
            Right joystick Y-axis
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MaxYR">
            <summary>
            Right joystick Y-axis
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MinTriggerL">
            <summary>
            Left analog trigger
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MaxTriggerL">
            <summary>
            Left analog trigger
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MinTriggerR">
            <summary>
            Right analog trigger
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerCalibrationInfo.MaxTriggerR">
            <summary>
            Right analog trigger
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.NunchukState">
            <summary>
            Current state of the Nunchuk extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.NunchukState.CalibrationInfo">
            <summary>
            Calibration data for Nunchuk extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.NunchukState.AccelState">
            <summary>
            State of accelerometers
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.NunchukState.RawJoystick">
            <summary>
            Raw joystick position before normalization.  Values range between 0 and 255.
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.NunchukState.Joystick">
            <summary>
            Normalized joystick position.  Values range between -0.5 and 0.5
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.NunchukState.C">
            <summary>
            Digital button on Nunchuk extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.NunchukState.Z">
            <summary>
            Digital button on Nunchuk extension
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.ClassicControllerButtonState">
            <summary>
            Curernt button state of the Classic Controller
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.A">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.B">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.Plus">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.Home">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.Minus">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.Up">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.Down">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.Left">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.Right">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.X">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.Y">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.ZL">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.ZR">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.TriggerL">
            <summary>
            Analog trigger - false if released, true for any pressure applied
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerButtonState.TriggerR">
            <summary>
            Analog trigger - false if released, true for any pressure applied
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.ClassicControllerState">
            <summary>
            Current state of the Classic Controller
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerState.CalibrationInfo">
            <summary>
            Calibration data for Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerState.ButtonState">
            <summary>
            Current button state
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerState.RawJoystickL">
            <summary>
            Raw value of left joystick.  Values range between 0 - 255.
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerState.RawJoystickR">
            <summary>
            Raw value of right joystick.  Values range between 0 - 255.
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerState.JoystickL">
            <summary>
            Normalized value of left joystick.  Values range between -0.5 - 0.5
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerState.JoystickR">
            <summary>
            Normalized value of right joystick.  Values range between -0.5 - 0.5
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerState.RawTriggerL">
            <summary>
            Raw value of analog trigger.  Values range between 0 - 255.
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerState.RawTriggerR">
            <summary>
            Raw value of analog trigger.  Values range between 0 - 255.
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerState.TriggerL">
            <summary>
            Normalized value of analog trigger.  Values range between 0.0 - 1.0.
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ClassicControllerState.TriggerR">
            <summary>
            Normalized value of analog trigger.  Values range between 0.0 - 1.0.
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.GuitarState">
            <summary>
            Current state of the Guitar controller
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarState.GuitarType">
            <summary>
            Guitar type
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarState.ButtonState">
            <summary>
            Current button state of the Guitar
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarState.FretButtonState">
            <summary>
            Current fret button state of the Guitar
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarState.TouchbarState">
            <summary>
            Current touchbar state of the Guitar
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarState.RawJoystick">
            <summary>
            Raw joystick position.  Values range between 0 - 63.
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarState.Joystick">
            <summary>
            Normalized value of joystick position.  Values range between 0.0 - 1.0.
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarState.RawWhammyBar">
            <summary>
            Raw whammy bar position.  Values range between 0 - 10.
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarState.WhammyBar">
            <summary>
            Normalized value of whammy bar position.  Values range between 0.0 - 1.0.
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.GuitarFretButtonState">
            <summary>
            Current fret button state of the Guitar controller
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarFretButtonState.Green">
            <summary>
            Fret buttons
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarFretButtonState.Red">
            <summary>
            Fret buttons
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarFretButtonState.Yellow">
            <summary>
            Fret buttons
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarFretButtonState.Blue">
            <summary>
            Fret buttons
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarFretButtonState.Orange">
            <summary>
            Fret buttons
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.GuitarButtonState">
            <summary>
            Current button state of the Guitar controller
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarButtonState.StrumUp">
            <summary>
            Strum bar
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarButtonState.StrumDown">
            <summary>
            Strum bar
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarButtonState.Minus">
            <summary>
            Other buttons
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarButtonState.Plus">
            <summary>
            Other buttons
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.DrumsState">
            <summary>
            Current state of the Drums controller
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.Red">
            <summary>
            Drum pads
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.Green">
            <summary>
            Drum pads
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.Blue">
            <summary>
            Drum pads
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.Orange">
            <summary>
            Drum pads
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.Yellow">
            <summary>
            Drum pads
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.Pedal">
            <summary>
            Drum pads
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.RedVelocity">
            <summary>
            Speed at which the pad is hit.  Values range from 0 (very hard) to 6 (very soft)
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.GreenVelocity">
            <summary>
            Speed at which the pad is hit.  Values range from 0 (very hard) to 6 (very soft)
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.BlueVelocity">
            <summary>
            Speed at which the pad is hit.  Values range from 0 (very hard) to 6 (very soft)
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.OrangeVelocity">
            <summary>
            Speed at which the pad is hit.  Values range from 0 (very hard) to 6 (very soft)
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.YellowVelocity">
            <summary>
            Speed at which the pad is hit.  Values range from 0 (very hard) to 6 (very soft)
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.PedalVelocity">
            <summary>
            Speed at which the pad is hit.  Values range from 0 (very hard) to 6 (very soft)
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.Plus">
            <summary>
            Other buttons
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.Minus">
            <summary>
            Other buttons
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.RawJoystick">
            <summary>
            Raw value of analong joystick.  Values range from 0 - 15
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.DrumsState.Joystick">
            <summary>
            Normalized value of analog joystick.  Values range from 0.0 - 1.0
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.BalanceBoardState">
            <summary>
            Current state of the Wii Fit Balance Board controller
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardState.CalibrationInfo">
            <summary>
            Calibration information for the Balance Board
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardState.SensorValuesRaw">
            <summary>
            Raw values of each sensor
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardState.SensorValuesKg">
            <summary>
            Kilograms per sensor
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardState.SensorValuesLb">
            <summary>
            Pounds per sensor
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardState.WeightKg">
            <summary>
            Total kilograms on the Balance Board
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardState.WeightLb">
            <summary>
            Total pounds on the Balance Board
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardState.CenterOfGravity">
            <summary>
            Center of gravity of Balance Board user
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.BalanceBoardCalibrationInfo">
            <summary>
            Calibration information
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardCalibrationInfo.Kg0">
            <summary>
            Calibration information at 0kg
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardCalibrationInfo.Kg17">
            <summary>
            Calibration information at 17kg
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardCalibrationInfo.Kg34">
            <summary>
            Calibration information at 34kg
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.BalanceBoardSensors">
            <summary>
            The 4 sensors on the Balance Board (short values)
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardSensors.TopRight">
            <summary>
            Sensor at top right
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardSensors.TopLeft">
            <summary>
            Sensor at top left
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardSensors.BottomRight">
            <summary>
            Sensor at bottom right
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardSensors.BottomLeft">
            <summary>
            Sensor at bottom left
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.BalanceBoardSensorsF">
            <summary>
            The 4 sensors on the Balance Board (float values)
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardSensorsF.TopRight">
            <summary>
            Sensor at top right
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardSensorsF.TopLeft">
            <summary>
            Sensor at top left
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardSensorsF.BottomRight">
            <summary>
            Sensor at bottom right
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.BalanceBoardSensorsF.BottomLeft">
            <summary>
            Sensor at bottom left
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.IRSensor">
            <summary>
            Current state of a single IR sensor
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRSensor.RawPosition">
            <summary>
            Raw values of individual sensor.  Values range between 0 - 1023 on the X axis and 0 - 767 on the Y axis.
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRSensor.Position">
            <summary>
            Normalized values of the sensor position.  Values range between 0.0 - 1.0.
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRSensor.Size">
            <summary>
            Size of IR Sensor.  Values range from 0 - 15
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRSensor.Found">
            <summary>
            IR sensor seen
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.IRSensor.ToString">
            <summary>
            Convert to human-readable string
            </summary>
            <returns>A string that represents the point.</returns>
        </member>
        <member name="T:EZ_B.WiimoteLib.IRState">
            <summary>
            Current state of the IR camera
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRState.Mode">
            <summary>
            Current mode of IR sensor data
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRState.IRSensors">
            <summary>
            Current state of IR sensors
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRState.RawMidpoint">
            <summary>
            Raw midpoint of IR sensors 1 and 2 only.  Values range between 0 - 1023, 0 - 767
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRState.Midpoint">
            <summary>
            Normalized midpoint of IR sensors 1 and 2 only.  Values range between 0.0 - 1.0
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.AccelState">
            <summary>
            Current state of the accelerometers
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.AccelState.RawValues">
            <summary>
            Raw accelerometer data.
            <remarks>Values range between 0 - 255</remarks>
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.AccelState.Values">
            <summary>
            Normalized accelerometer data.  Values range between 0 - ?, but values > 3 and &lt; -3 are inaccurate.
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.AccelCalibrationInfo">
            <summary>
            Accelerometer calibration information
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.AccelCalibrationInfo.X0">
            <summary>
            Zero point of accelerometer
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.AccelCalibrationInfo.Y0">
            <summary>
            Zero point of accelerometer
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.AccelCalibrationInfo.Z0">
            <summary>
            Zero point of accelerometer
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.AccelCalibrationInfo.XG">
            <summary>
            Gravity at rest of accelerometer
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.AccelCalibrationInfo.YG">
            <summary>
            Gravity at rest of accelerometer
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.AccelCalibrationInfo.ZG">
            <summary>
            Gravity at rest of accelerometer
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.ButtonState">
            <summary>
            Current button state
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ButtonState.A">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ButtonState.B">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ButtonState.Plus">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ButtonState.Home">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ButtonState.Minus">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ButtonState.One">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ButtonState.Two">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ButtonState.Up">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ButtonState.Down">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ButtonState.Left">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ButtonState.Right">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.ExtensionType">
            <summary>
            The extension plugged into the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ExtensionType.None">
            <summary>
            No extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ExtensionType.Nunchuk">
            <summary>
            Nunchuk extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ExtensionType.ClassicController">
            <summary>
            Classic Controller extension
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ExtensionType.Guitar">
            <summary>
            Guitar controller from Guitar Hero 3/WorldTour
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ExtensionType.Drums">
            <summary>
            Drum controller from Guitar Hero: World Tour
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ExtensionType.BalanceBoard">
            <summary>
            Wii Fit Balance Board controller
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.ExtensionType.ParitallyInserted">
            <summary>
            Partially inserted extension.  This is an error condition.
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.IRMode">
            <summary>
            The mode of data reported for the IR sensor
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRMode.Off">
            <summary>
            IR sensor off
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRMode.Basic">
            <summary>
            Basic mode
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRMode.Extended">
            <summary>
            Extended mode
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRMode.Full">
            <summary>
            Full mode (unsupported)
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.InputReport">
            <summary>
            The report format in which the Wiimote should return data
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.InputReport.Status">
            <summary>
            Status report
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.InputReport.ReadData">
            <summary>
            Read data from memory location
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.InputReport.OutputReportAck">
            <summary>
            Register write complete
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.InputReport.Buttons">
            <summary>
            Button data only
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.InputReport.ButtonsAccel">
            <summary>
            Button and accelerometer data
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.InputReport.IRAccel">
            <summary>
            IR sensor and accelerometer data
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.InputReport.ButtonsExtension">
            <summary>
            Button and extension controller data
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.InputReport.ExtensionAccel">
            <summary>
            Extension and accelerometer data
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.InputReport.IRExtensionAccel">
            <summary>
            IR sensor, extension controller and accelerometer data
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.IRSensitivity">
            <summary>
            Sensitivity of the IR camera on the Wiimote
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRSensitivity.WiiLevel1">
            <summary>
            Equivalent to level 1 on the Wii console
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRSensitivity.WiiLevel2">
            <summary>
            Equivalent to level 2 on the Wii console
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRSensitivity.WiiLevel3">
            <summary>
            Equivalent to level 3 on the Wii console (default)
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRSensitivity.WiiLevel4">
            <summary>
            Equivalent to level 4 on the Wii console
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRSensitivity.WiiLevel5">
            <summary>
            Equivalent to level 5 on the Wii console
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.IRSensitivity.Maximum">
            <summary>
            Maximum sensitivity
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.GuitarType">
            <summary>
            Type of guitar extension: Guitar Hero 3 or Guitar Hero World Tour
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarType.GuitarHero3">
            <summary>
             Guitar Hero 3 guitar controller
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.GuitarType.GuitarHeroWorldTour">
            <summary>
            Guitar Hero: World Tour guitar controller
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.WiimoteExtensionChangedEventArgs">
            <summary>
            Argument sent through the WiimoteExtensionChangedEvent
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteExtensionChangedEventArgs.ExtensionType">
            <summary>
            The extenstion type inserted or removed
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteExtensionChangedEventArgs.Inserted">
            <summary>
            Whether the extension was inserted or removed
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.WiimoteExtensionChangedEventArgs.#ctor(EZ_B.WiimoteLib.ExtensionType,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="type">The extension type inserted or removed</param>
            <param name="inserted">Whether the extension was inserted or removed</param>
        </member>
        <member name="T:EZ_B.WiimoteLib.WiimoteChangedEventArgs">
            <summary>
            Argument sent through the WiimoteChangedEvent
            </summary>
        </member>
        <member name="F:EZ_B.WiimoteLib.WiimoteChangedEventArgs.WiimoteState">
            <summary>
            The current state of the Wiimote and extension controllers
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.WiimoteChangedEventArgs.#ctor(EZ_B.WiimoteLib.WiimoteState)">
            <summary>
            Constructor
            </summary>
            <param name="ws">Wiimote state</param>
        </member>
        <member name="T:EZ_B.WiimoteLib.HIDImports">
            <summary>
            Win32 import information for use with the Wiimote library
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.Wiimote">
            <summary>
            Implementation of Wiimote
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.Connect">
            <summary>
            Connect to the first-found Wiimote
            </summary>
            <exception cref="T:EZ_B.WiimoteLib.WiimoteNotFoundException">Wiimote not found in HID device list</exception>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.Disconnect">
            <summary>
            Disconnect from the controller and stop reading data from it
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.BeginAsyncRead">
            <summary>
            Start reading asynchronously from the controller
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.OnReadData(System.IAsyncResult)">
            <summary>
            Callback when data is ready to be processed
            </summary>
            <param name="ar">State information for the callback</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.ParseInputReport(System.Byte[])">
            <summary>
            Parse a report sent by the Wiimote
            </summary>
            <param name="buff">Data buffer to parse</param>
            <returns>Returns a boolean noting whether an event needs to be posted</returns>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.InitializeExtension">
            <summary>
            Handles setting up an extension when plugged in
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.DecryptBuffer(System.Byte[])">
            <summary>
            Decrypts data sent from the extension to the Wiimote
            </summary>
            <param name="buff">Data buffer</param>
            <returns>Byte array containing decoded data</returns>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.ParseButtons(System.Byte[])">
            <summary>
            Parses a standard button report into the ButtonState struct
            </summary>
            <param name="buff">Data buffer</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.ParseAccel(System.Byte[])">
            <summary>
            Parse accelerometer data
            </summary>
            <param name="buff">Data buffer</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.ParseIR(System.Byte[])">
            <summary>
            Parse IR data from report
            </summary>
            <param name="buff">Data buffer</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.ParseExtension(System.Byte[],System.Int32)">
            <summary>
            Parse data from an extension controller
            </summary>
            <param name="buff">Data buffer</param>
            <param name="offset">Offset into data buffer</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.ParseReadData(System.Byte[])">
            <summary>
            Parse data returned from a read report
            </summary>
            <param name="buff">Data buffer</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.GetRumbleBit">
            <summary>
            Returns whether rumble is currently enabled.
            </summary>
            <returns>Byte indicating true (0x01) or false (0x00)</returns>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.ReadWiimoteCalibration">
            <summary>
            Read calibration information stored on Wiimote
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.SetReportType(EZ_B.WiimoteLib.InputReport,System.Boolean)">
            <summary>
            Set Wiimote reporting mode (if using an IR report type, IR sensitivity is set to WiiLevel3)
            </summary>
            <param name="type">Report type</param>
            <param name="continuous">Continuous data</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.SetReportType(EZ_B.WiimoteLib.InputReport,EZ_B.WiimoteLib.IRSensitivity,System.Boolean)">
            <summary>
            Set Wiimote reporting mode
            </summary>
            <param name="type">Report type</param>
            <param name="irSensitivity">IR sensitivity</param>
            <param name="continuous">Continuous data</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.SetLEDs(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the LEDs on the Wiimote
            </summary>
            <param name="led1">LED 1</param>
            <param name="led2">LED 2</param>
            <param name="led3">LED 3</param>
            <param name="led4">LED 4</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.SetLEDs(System.Int32)">
            <summary>
            Set the LEDs on the Wiimote
            </summary>
            <param name="leds">The value to be lit up in base2 on the Wiimote</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.SetRumble(System.Boolean)">
            <summary>
            Toggle rumble
            </summary>
            <param name="on">On or off</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.GetStatus">
            <summary>
            Retrieve the current status of the Wiimote and extensions.  Replaces GetBatteryLevel() since it was poorly named.
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.EnableIR(EZ_B.WiimoteLib.IRMode,EZ_B.WiimoteLib.IRSensitivity)">
            <summary>
            Turn on the IR sensor
            </summary>
            <param name="mode">The data report mode</param>
            <param name="irSensitivity">IR sensitivity</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.DisableIR">
            <summary>
            Disable the IR sensor
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.ClearReport">
            <summary>
            Initialize the report data buffer
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.WriteReport">
            <summary>
            Write a report to the Wiimote
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.ReadData(System.Int32,System.Int16)">
            <summary>
            Read data or register from Wiimote
            </summary>
            <param name="address">Address to read</param>
            <param name="size">Length to read</param>
            <returns>Data buffer</returns>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.WriteData(System.Int32,System.Byte)">
            <summary>
            Write a single byte to the Wiimote
            </summary>
            <param name="address">Address to write</param>
            <param name="data">Byte to write</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.WriteData(System.Int32,System.Byte,System.Byte[])">
            <summary>
            Write a byte array to a specified address
            </summary>
            <param name="address">Address to write</param>
            <param name="size">Length of buffer</param>
            <param name="buff">Data buffer</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.Dispose">
            <summary>
            Dispose Wiimote
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.Wiimote.Dispose(System.Boolean)">
            <summary>
            Dispose wiimote
            </summary>
            <param name="disposing">Disposing?</param>
        </member>
        <member name="E:EZ_B.WiimoteLib.Wiimote.WiimoteChanged">
            <summary>
            Event raised when Wiimote state is changed
            </summary>
        </member>
        <member name="E:EZ_B.WiimoteLib.Wiimote.WiimoteExtensionChanged">
            <summary>
            Event raised when an extension is inserted or removed
            </summary>
        </member>
        <member name="P:EZ_B.WiimoteLib.Wiimote.WiimoteState">
            <summary>
            Current Wiimote state
            </summary>
        </member>
        <member name="P:EZ_B.WiimoteLib.Wiimote.ID">
            <summary>
             Unique identifier for this Wiimote (not persisted across application instances)
            </summary>
        </member>
        <member name="P:EZ_B.WiimoteLib.Wiimote.HIDDevicePath">
            <summary>
            HID device path for this Wiimote (valid until Wiimote is disconnected)
            </summary>
        </member>
        <member name="T:EZ_B.WiimoteLib.WiimoteNotFoundException">
            <summary>
            Thrown when no Wiimotes are found in the HID device list
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.WiimoteNotFoundException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.WiimoteNotFoundException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.WiimoteNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.WiimoteNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:EZ_B.WiimoteLib.WiimoteException">
            <summary>
            Represents errors that occur during the execution of the Wiimote library
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.WiimoteException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.WiimoteException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.WiimoteException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:EZ_B.WiimoteLib.WiimoteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:EZ_B.WiimoteLib.WiimoteCollection">
            <summary>
            Used to manage multiple Wiimotes
            </summary>
        </member>
        <member name="M:EZ_B.WiimoteLib.WiimoteCollection.FindAllWiimotes">
            <summary>
            Finds all Wiimotes connected to the system and adds them to the collection
            </summary>
        </member>
        <member name="M:EZ_B.MMA7455.WhoAmI">
            <summary>
            Return the firmware of the device
            </summary>
        </member>
        <member name="M:EZ_B.MMA7455.Init(EZ_B.MMA7455.SensitivityEnum)">
            <summary>
            Send initialization
            </summary>
        </member>
        <member name="M:EZ_B.MMA7455.GetMode">
            <summary>
            Return the current configuration
            </summary>
        </member>
        <member name="M:EZ_B.MMA7455.GetX">
            <summary>
            Get X
            </summary>
        </member>
        <member name="M:EZ_B.MMA7455.GetY">
            <summary>
            Get Y
            </summary>
        </member>
        <member name="M:EZ_B.MMA7455.GetZ">
            <summary>
            Get Z
            </summary>
        </member>
        <member name="F:EZ_B.SureDualAxisCompass.MinPoolTimeMS">
            <summary>
            To prevent requests from flooding the communication channel, this limit prevents too many calls. Best to leave it alone.
            </summary>
        </member>
        <member name="M:EZ_B.SureDualAxisCompass.SetCoil">
            <summary>
            Init the coil. Should be called as init one time
            </summary>
        </member>
        <member name="M:EZ_B.SureDualAxisCompass.ResetCoil">
            <summary>
            Reset the Compass Coil
            </summary>
        </member>
        <member name="M:EZ_B.SureDualAxisCompass.Update">
            <summary>
            Updates CompassData object with the current magnetic co-ordinates of the DC-SS503 Compass Module
            </summary>
            <returns></returns>
        </member>
        <member name="P:EZ_B.SureDualAxisCompass.Offset">
            <summary>
            Set the offset of the compass degrees for custom alignment
            </summary>
        </member>
        <member name="F:EZ_B.UCEZServo.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:EZ_B.UCEZServo.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:EZ_B.UCEZServo.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:EZ_B.EZMovement.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:EZ_B.EZMovement.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:EZ_B.EZMovement.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:EZ_B.MP3Trigger.CommunicationPort">
            <summary>
            Specify the communication port that the MP3 Trigger is connected with
            </summary>
        </member>
        <member name="F:EZ_B.MP3Trigger.BaudRate">
            <summary>
            Specify the baud rate that the MP3 Trigger is connected with.
            Default is 38400
            </summary>
        </member>
        <member name="M:EZ_B.MP3Trigger.Reverse">
            <summary>
            Play previous track
            </summary>
        </member>
        <member name="M:EZ_B.MP3Trigger.Forward">
            <summary>
            Play next track
            </summary>
        </member>
        <member name="M:EZ_B.MP3Trigger.SetVolume(System.Byte)">
            <summary>
            Specify volume.
            0 - Loud. 
            255 - Quiet.
            </summary>
        </member>
        <member name="M:EZ_B.MP3Trigger.StartStop">
            <summary>
            Start/Stop
            </summary>
        </member>
        <member name="M:EZ_B.MP3Trigger.PlayTrack(System.Byte)">
            <summary>
            Play specified track number
            </summary>
            <param name="trackNumber"></param>
        </member>
        <member name="M:EZ_B.I2C.WriteBinary(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Write binary to the specified 7 bit address.
            Example: WriteBinary(0x1D, 0, 0, 1, 1, 1, 0, 1, 0);
            </summary>
        </member>
        <member name="M:EZ_B.I2C.Write(System.Byte,System.Byte[])">
            <summary>
            Write data to the specified device 7 bit address.
            Example: Write(0x1D, new byte [] { 127, 64 } );
            </summary>
        </member>
        <member name="M:EZ_B.I2C.Read(System.Byte,System.Byte)">
            <summary>
            Read data from the specified i2c device address. 
            Example: byte [] ret = Read(Auto, 0x1D, 1);
            </summary>
        </member>
        <member name="M:EZ_B.I2C.SetClockSpeed(System.UInt32)">
            <summary>
            Set the clock speed of the i2c interface
            </summary>
        </member>
        <member name="T:EZ_B.ObjectLocation">
            <summary>
            This class is returned by the GetObjectLocation method.
            This class will contain information regarding the location of an object, if found.
            </summary>
        </member>
        <member name="F:EZ_B.ObjectLocation.TrackingType">
            <summary>
            The type of tracking for this object
            </summary>
        </member>
        <member name="F:EZ_B.ObjectLocation.Glyph">
            <summary>
            If Shape detect was used, this contains the glyph found
            </summary>
        </member>
        <member name="F:EZ_B.ObjectLocation.VerticalLocation">
            <summary>
            The vertical location of the object, if found.
            </summary>
        </member>
        <member name="F:EZ_B.ObjectLocation.ObjectName">
            <summary>
            The name of the object from the custom object detection
            </summary>
        </member>
        <member name="F:EZ_B.ObjectLocation.QRCodeText">
            <summary>
            The QR Code text if detected
            </summary>
        </member>
        <member name="F:EZ_B.ObjectLocation.HorizontalLocation">
            <summary>
            The horizontal location of the object, if found.
            </summary>
        </member>
        <member name="F:EZ_B.ObjectLocation.ColorName">
            <summary>
            If custom color tracking is used, this will contain the name of the color that was detected
            </summary>
        </member>
        <member name="F:EZ_B.ObjectLocation.Rect">
            <summary>
            Contains the rectangle of the detected object
            </summary>
        </member>
        <member name="P:EZ_B.ObjectLocation.CenterX">
            <summary>
            Center X location of the object
            </summary>
        </member>
        <member name="P:EZ_B.ObjectLocation.CenterY">
            <summary>
            Center Y location of the object
            </summary>
        </member>
        <member name="F:EZ_B.Roomba.CommunicationPort">
            <summary>
            The communication port for the Roomba
            </summary>
        </member>
        <member name="F:EZ_B.Roomba.UseOldProtocol">
            <summary>
            Some of the older roombas conflict with the SCI datasheet by iRobot Roomba.
            If your roomba is moving the wrong direction, set this.
            </summary>
        </member>
        <member name="F:EZ_B.Roomba.RoombaBaudRate">
            <summary>
            The baud rate for your roomba.
            Mostly 57600, except newer models are 115200
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.PowerOff">
            <summary>
            Power Off the Roomba
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.SpotClean">
            <summary>
            Enable Spot Clean
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.Clean">
            <summary>
            Enable Clean
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.DisableAllBrushes">
            <summary>
            Turn off all brushes (motors)
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.SetMotorStates(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Control the motors
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.SetMainBrush(System.Boolean)">
            <summary>
            Set the state of the main brush motor
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.SetSideBrush(System.Boolean)">
            <summary>
            Set the state of the side brush motor
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.SetVacuum(System.Boolean)">
            <summary>
            Set the state of the vacuum motor
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.SeekDockingStation">
            <summary>
            Force seek docking station. Must be cleaning before you can seek dock station
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.PowerLED(System.Byte,System.Byte)">
            <summary>
            Change PowerLED color and intensity
            The Color value is between Green and Red (1 and 255)
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.Stop">
            <summary>
            Stop moving
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.Drive(System.Int16,System.Int16)">
            <summary>
            Move Roomba (velocity between -200 and 200) (angle between -2000 and 2000 or -1 and 1) (straight: 32768)
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.Forward(System.Byte)">
            <summary>
            Move Roomba forward. Speed is between 0 and 200
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.Reverse(System.Byte)">
            <summary>
            Move Roomba Reverse. Speed is between 0 and 200
            </summary>
            <param name="speed"></param>
        </member>
        <member name="M:EZ_B.Roomba.Right(System.Byte)">
            <summary>
            Turn Roomba right
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.Left(System.Byte)">
            <summary>
            Turn Roomba left
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.Max">
            <summary>
            Enable Max Clean
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.PlayTone(EZ_B.RoombaSong.NoteEnum,System.Byte)">
            <summary>
            Play one note using the Roomba's speaker
            </summary>
        </member>
        <member name="M:EZ_B.Roomba.PlaySong(EZ_B.RoombaSong[])">
            <summary>
            Play a song using the Roomba's speaker.
            Roomba supports a maximum of 15 notes.
            </summary>
        </member>
        <member name="F:EZ_B.EZB.ConnectedEndPointAddress">
            <summary>
            The address of the current connection.
            If this is an EZ-B v3, this will contain the com port.
            If this is an EZ-B v4, this will contain the physical address.
            </summary>
        </member>
        <member name="F:EZ_B.EZB.EZBType">
            <summary>
            Gets the type of EZ-B that is connected
            </summary>
        </member>
        <member name="F:EZ_B.EZB._BlueTooth">
            <summary>
            This is the underlying bluetooth connection to the EZ-B.
            This is for advanced users.
            </summary>
        </member>
        <member name="F:EZ_B.EZB.BV4615">
            <summary>
            Interact with the BV4615 i2c RC-5 Infrared Decoder
            </summary>
        </member>
        <member name="F:EZ_B.EZB.SureDualAxisCompass">
            <summary>
            The Sure Electronics i2c Dual-Axis Magnetic Sensor Module (DC-SS503V100)
            </summary>
        </member>
        <member name="F:EZ_B.EZB.Roomba">
            <summary>
            Control a iRobot Roomba
            </summary>
        </member>
        <member name="F:EZ_B.EZB.Uart">
            <summary>
            Send serial commands from any digital port
            </summary>
        </member>
        <member name="F:EZ_B.EZB.TellyMate">
            <summary>
            Communicate to a TellyMate TV Board @ 57600 on Port D1
            </summary>
        </member>
        <member name="F:EZ_B.EZB.Movement">
            <summary>
            Common methods and functionality for using Modified Servos to drive wheels.
            </summary>
        </member>
        <member name="F:EZ_B.EZB.Servo">
            <summary>
            Servo commands. Control regular and modified servos.
            </summary>
        </member>
        <member name="F:EZ_B.EZB.ADC">
            <summary>
            Analog To Digital Convertor (ADC) commands. Read voltages and values from the ADC Ports of the EZ-B
            </summary>
        </member>
        <member name="F:EZ_B.EZB.Digital">
            <summary>
            Commands to read and write digital ports on the EZ-B
            </summary>
        </member>
        <member name="F:EZ_B.EZB.SpeechSynth">
            <summary>
            Commands to have the computer speak and recognize voice commands
            </summary>
        </member>
        <member name="F:EZ_B.EZB.HC_SR04">
            <summary>
            Commands to get the distance from a HC-SR04 Ping Sensor
            </summary>
        </member>
        <member name="F:EZ_B.EZB.I2C">
            <summary>
            Send a I2C command out of the I2C interface
            </summary>
        </member>
        <member name="F:EZ_B.EZB.BlinkM">
            <summary>
            Control multicolor BlinkM via I2C interface
            </summary>
        </member>
        <member name="F:EZ_B.EZB.MP3Trigger">
            <summary>
            Control a MP3 Trigger
            </summary>
        </member>
        <member name="F:EZ_B.EZB.BV4113">
            <summary>
            Control the BV4113 EZ-Robot Motor Controller
            </summary>
        </member>
        <member name="F:EZ_B.EZB.Recorder">
            <summary>
            Allows recording and replaying of communication between the computer and EZ-B
            </summary>
        </member>
        <member name="F:EZ_B.EZB.MMA7455">
            <summary>
            MMA7455 Accelerometer
            </summary>
        </member>
        <member name="F:EZ_B.EZB.WiiRemote">
            <summary>
            Use a Wii Remote to control your robot
            </summary>
        </member>
        <member name="F:EZ_B.EZB.ConfigurationManager">
            <summary>
            Set hardware device settings
            </summary>
        </member>
        <member name="F:EZ_B.EZB.Name">
            <summary>
            Unique name for this EZB Instance
            </summary>
        </member>
        <member name="F:EZ_B.EZB.TCPServer">
            <summary>
            Allows remote connectivity from other EZ_B DLL instances
            </summary>
        </member>
        <member name="F:EZ_B.EZB.ARDrone">
            <summary>
            Connect to an AR Drone for remote control
            </summary>
        </member>
        <member name="F:EZ_B.EZB.PWM">
            <summary>
            Control PWM (Pulse Wave Modulation) output
            </summary>
        </member>
        <member name="F:EZ_B.EZB.Vuzix">
            <summary>
            Support for Vuzix Virtual Reality 3D glasses
            </summary>    
        </member>
        <member name="F:EZ_B.EZB.Speakjet">
            <summary>
            Speak vocal and synthesis through the Speakjet EZ-Bit
            </summary>
        </member>
        <member name="F:EZ_B.EZB.SabertoothSerial">
            <summary>
            Controls a sabertooth motor controller over the serial interface
            </summary>
        </member>
        <member name="F:EZ_B.EZB.Twitter">
            <summary>
            Gets the latest messages from a specified Twitter feed
            </summary>
        </member>
        <member name="F:EZ_B.EZB.RoboSapien">
            <summary>
            Control a WowWee RoboSapien
            </summary>
        </member>
        <member name="F:EZ_B.EZB.RoboQuad">
            <summary>
            Control a WowWee RoboQuad
            </summary>
        </member>
        <member name="F:EZ_B.EZB.AutoPosition">
            <summary>
            AutoPosition for Bipeds and Hexapods
            </summary>
        </member>
        <member name="F:EZ_B.EZB.SoundV4">
            <summary>
            Sound beep test for the v4
            </summary>
        </member>
        <member name="F:EZ_B.EZB.EZBv4Manager">
            <summary>
            Manages settings specific to the EZ-B v4
            </summary>
        </member>
        <member name="F:EZ_B.EZB.RGBEyes">
            <summary>
            Helper Class for controlling the RGB LED Eyes that ships with JD, and can be purchased optionally seperate
            </summary>
        </member>
        <member name="F:EZ_B.EZB.MIP">
            <summary>
            Helper Class for controlling the WowWee MIP balancing robot
            </summary>
        </member>
        <member name="F:EZ_B.EZB.Sphero">
            <summary>
            Helper class for controlling a Sphero "robot" ball
            </summary>
        </member>
        <member name="F:EZ_B.EZB.MusicSynth">
            <summary>
            Helper class for making synthesized music on the ez-b v4 speaker
            </summary>
        </member>
        <member name="F:EZ_B.EZB.SerialRGBLed">
            <summary>
            Control the serial rgb led
            </summary>
        </member>
        <member name="M:EZ_B.EZB.#ctor(System.String)">
            <summary>
            Create an instance of the EZCommunicator and assign unique name
            </summary>
        </member>
        <member name="M:EZ_B.EZB.#ctor">
            <summary>
            Create an instance of the EZCommunicator.
            </summary>
        </member>
        <member name="M:EZ_B.EZB.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Create an EZCommunicator Component.
            </summary>
        </member>
        <member name="M:EZ_B.EZB.Log(System.Boolean,System.String,System.Object[])">
            <summary>
            Manually send text to the log event
            </summary>
        </member>
        <member name="M:EZ_B.EZB.GetAvailableCommunicationPorts(System.Boolean)">
            <summary>
            Get all communication ports. One of these should be connected to the EZ-B via Bluetooth
            </summary>
            <returns>List/Array of port names</returns>
        </member>
        <member name="M:EZ_B.EZB.GetFirmwareVersionRaw">
            <summary>
            Returns the raw byte that reflects the firmware returned by the current connected EZ-B.
            Do not use this, use the GetFirmwareVersion() instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EZ_B.EZB.GetFirmwareVersion">
            <summary>
            Return the firmware version in a string of the EZ-B
            </summary>
        </member>
        <member name="M:EZ_B.EZB.GetFirmwareVersionEnum">
            <summary>
            Return the firmware version as the enum
            </summary>
        </member>
        <member name="M:EZ_B.EZB.PingController">
            <summary>
            Sends a ping request to the EZ-B to see if it's still responding. Returns a True if so, false if it isn't
            </summary>
        </member>
        <member name="M:EZ_B.EZB.StopServer">
            <summary>
            Stop the server which is listening for incoming TCP connections from an EZ-B
            </summary>
        </member>
        <member name="M:EZ_B.EZB.StartServer(System.Int32)">
            <summary>
            Start the server which listens for incoming TCP connections from an EZ-B
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:EZ_B.EZB.Connect(System.String)">
            <summary>
            Connect to an EZ-B.
            Remote can be a PORT: Get the port name from GetAvailableCommunicationPorts()
            Remote can be an IP Address, example: 192.168.1.5:23
            </summary>
        </member>
        <member name="M:EZ_B.EZB.Connect(System.String,System.Int32)">
            <summary>
            Connect to an EZ-B.
            1) Hostname can be a communication PORT. Get the port name from GetAvailableCommunicationPorts()
            2) Hostname can be an IP Address, example: 192.168.1.5:23
            3) Baudrate is not used for TCP connections
            </summary>
        </member>
        <member name="M:EZ_B.EZB.Disconnect">
            <summary>
            Disconnect from the EZ-B
            </summary>
        </member>
        <member name="M:EZ_B.EZB.ShowDebugWindow">
            <summary>
            Opens a debug window with diagnostic information
            </summary>
        </member>
        <member name="M:EZ_B.EZB.GetRandomNumber(System.Int32,System.Int32)">
            <summary>
            Return a random number within specified range.
            Using this random number generating function will provide a common seed.
            </summary>
        </member>
        <member name="M:EZ_B.EZB.GetRandomUniqueNumber(System.Int32,System.Int32)">
            <summary>
            Return a random number and tries to make the returned value unique from the last time this function was called.
            </summary>
        </member>
        <member name="M:EZ_B.EZB.GetUniqueIDBytes">
            <summary>
            Returns a byte array unique ID of the EZ-B v4
            </summary>
        </member>
        <member name="M:EZ_B.EZB.GetUniqueIDString">
            <summary>
            Returns a byte array unique ID of the EZ-B v4
            </summary>
        </member>
        <member name="F:EZ_B.EZB.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:EZ_B.EZB.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:EZ_B.EZB.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EZ_B.EZB.BaudRate">
            <summary>
            Get or Set the baudrate for the connection.
            Default is 9600.
            </summary>
        </member>
        <member name="P:EZ_B.EZB.LastCommandReturnDateTime">
            <summary>
            Get the last datetime that data was returned from the EZ-B
            </summary>
        </member>
        <member name="P:EZ_B.EZB.LastCommandSentDateTime">
            <summary>
            Get the last datetime that data was sent to the EZ-B
            </summary>
        </member>
        <member name="P:EZ_B.EZB.ReceiveThrottleMS">
            <summary>
            The original EZ-B v4.1/1 will suffer from its tcp dma buffer being flooded if data is sent/received too quickly.
            Speciy a 1 millisecond delay between receive commands to ensure the EZ-B v4.1/1 can keep up.
            *Warning: This feature will only work with the EZ-B v4.x/0 or EZ-B v4.x/1
            </summary>
        </member>
        <member name="E:EZ_B.EZB.OnConnectionChange">
            <summary>
            Event risen when there is a connection change
            </summary>
        </member>
        <member name="E:EZ_B.EZB.OnLog">
            <summary>
            Event risen when there is debug data
            </summary>
        </member>
        <member name="P:EZ_B.EZB.GetLastErrorMsg">
            <summary>
            Get the last verbose error message.
            Use if VerboseLogging is False to receive the last detailed error.
            </summary>
        </member>
        <member name="P:EZ_B.EZB.IsConnected">
            <summary>
            Returns true if currently connected to an EZ-B
            </summary>
        </member>
        <member name="P:EZ_B.EZB.VerboseLogging">
            <summary>
            Set to TRUE to enable verbose logging. Only use this if you are debugging. This will produce lots of data.
            </summary>
        </member>
        <member name="T:EZ_B.EZB.OnConnectionChangeHandler">
            <summary>
            Event risen when there is a connection change
            </summary>
        </member>
        <member name="T:EZ_B.EZB.OnLogHandler">
            <summary>
            Event risen when there is debug data
            </summary>
        </member>
        <member name="F:EZ_B.HC_SR04.MinPoolTimeMS">
            <summary>
            To prevent ADC requests from flooding the communication channel, this limit prevents too many calls. Best to leave it alone.
            </summary>
        </member>
        <member name="M:EZ_B.HC_SR04.GetValue(EZ_B.Digital.DigitalPortEnum,EZ_B.Digital.DigitalPortEnum)">
            <summary>
             Get the value received from the HC-SR04 Ping Sensor
            </summary>
        </member>
        <member name="M:EZ_B.Digital.SetDigitalPort(EZ_B.Digital.DigitalPortEnum,System.Boolean)">
            <summary>
             Set the status of a digital port. TRUE will output +5, FALSE will short to GND
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:EZ_B.Digital.GetLastDigitalPortSet(EZ_B.Digital.DigitalPortEnum)">
            <summary>
            Does not query the EZ-B Controller. This returns the status of the port after you had SetDigitalPort().
            </summary>
        </member>
        <member name="M:EZ_B.Digital.Toggle(EZ_B.Digital.DigitalPortEnum)">
            <summary>
            Toggles the status of a digital port and returns the new status
            </summary>
        </member>
        <member name="M:EZ_B.Digital.GetDigitalPort(EZ_B.Digital.DigitalPortEnum)">
            <summary>
            Query the status of a digital port.
            </summary>
        </member>
        <member name="M:EZ_B.Digital.GetDigitalPortAsInt(EZ_B.Digital.DigitalPortEnum)">
            <summary>
            Query the status of a digital port as an Integer (0 false, 1 true)
            </summary>
        </member>
        <member name="T:EZ_B.Digital.DigitalPortEnum">
            <summary>
            List of Digital Ports
            </summary>
        </member>
        <member name="T:EZ_B.UCEZB_Connect">
            <summary>
            User Control for connecting to an EZ-B
            </summary>
        </member>
        <member name="M:EZ_B.UCEZB_Connect.#ctor">
            <summary>
            User Control for connecting to an EZ-B
            </summary>
        </member>
        <member name="M:EZ_B.UCEZB_Connect.Connect(System.Boolean)">
            <summary>
            Manually connect to the specified communication port. The optional parameter allows you to override if an error dialog is displayed
            </summary>
        </member>
        <member name="M:EZ_B.UCEZB_Connect.Disconnect">
            <summary>
            Manually disconnect
            </summary>
        </member>
        <member name="M:EZ_B.UCEZB_Connect.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="E:EZ_B.UCEZB_Connect.OnConnection">
            <summary>
            Event executed when Connection to EZ-B is established.
            </summary>
        </member>
        <member name="E:EZ_B.UCEZB_Connect.OnDisconnect">
            <summary>
            Event executed when Connection to EZ-B is lost.
            </summary>
        </member>
        <member name="P:EZ_B.UCEZB_Connect.EZB">
            <summary>
            EZCommunicator Class. Use this to access the EZ-B over bluetooth
            </summary>
        </member>
        <member name="P:EZ_B.UCEZB_Connect.TCPPassword">
            <summary>
            The Password when connecting to another EZ-B instance over a TCP Connection.
            This is only valid for TCP Connections.
            </summary>
        </member>
        <member name="P:EZ_B.UCEZB_Connect.Port">
            <summary>
            Get or Set the selected port
            </summary>
        </member>
        <member name="P:EZ_B.UCEZB_Connect.ShowDebugButton">
            <summary>
            Show or Hide the debug button
            </summary>
        </member>
        <member name="F:EZ_B.FormEZDebug.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:EZ_B.FormEZDebug.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:EZ_B.FormEZDebug.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:EZ_B.Movement.ServoWheelLeftModifiedPort">
            <summary>
            Servo port for modified servo that acts as the left wheel (if set for Servo Type)
            </summary>
        </member>
        <member name="F:EZ_B.Movement.ServoWheelRightModifiedPort">
            <summary>
            Servo port for modified servo that acts as the right wheel (if set for Servo Type)
            </summary>
        </member>
        <member name="F:EZ_B.Movement.HBridgeLeftWheelTriggerA">
            <summary>
            The left wheel trigger A port of the H Bridge
            </summary>
        </member>
        <member name="F:EZ_B.Movement.HBridgeLeftWheelTriggerB">
            <summary>
            The left wheel trigger B port of the H Bridge
            </summary>
        </member>
        <member name="F:EZ_B.Movement.HBridgeRightWheelTriggerA">
            <summary>
            The right wheel trigger A port of the H Bridge
            </summary>
        </member>
        <member name="F:EZ_B.Movement.HBridgeRightWheelTriggerB">
            <summary>
            The right wheel trigger B port of the H Bridge
            </summary>
        </member>
        <member name="F:EZ_B.Movement.HBridgeRightWheelPWM">
            <summary>
            The right wheel PWM
            </summary>
        </member>
        <member name="F:EZ_B.Movement.HBridgeLeftWheelPWM">
            <summary>
            The lefgt wheel PWM
            </summary>
        </member>
        <member name="F:EZ_B.Movement.ModifiedServoLeftForwardValue">
            <summary>
            Servos and R/C servo controllers have specified values for their speed control.
            Use this value to set it.
            </summary>
        </member>
        <member name="F:EZ_B.Movement.ModifiedServoLeftReverseValue">
            <summary>
            Servos and R/C servo controllers have specified values for their speed control.
            Use this value to set it.
            </summary>
        </member>
        <member name="F:EZ_B.Movement.ModifiedServoRightForwardValue">
            <summary>
            Servos and R/C servo controllers have specified values for their speed control.
            Use this value to set it.
            </summary>
        </member>
        <member name="F:EZ_B.Movement.ModifiedServoRightReverseValue">
            <summary>
            Servos and R/C servo controllers have specified values for their speed control.
            Use this value to set it.
            </summary>
        </member>
        <member name="F:EZ_B.Movement.ModifiedServoUseStopValue">
            <summary>
            For ESC - Some ESC Require a STOP value (neutral position) to be set.
            This does not need to be set for Modified Servos.
            Normally, if this is FALSE the EZ-B will simply stop sending a PWM signal. If this is set to True, the signal will send the specified Stop right and left values.
            </summary>
        </member>
        <member name="F:EZ_B.Movement.ModifiedServoRightStopValue">
            <summary>
            Specifieds the Stop Position for the ESC. Will not be used unless the ModifiedServoUseStopValue is set
            </summary>
        </member>
        <member name="F:EZ_B.Movement.ModifiedServoLeftStopValue">
            <summary>
            Specifieds the Stop Position for the ESC. Will not be used unless the ModifiedServoUseStopValue is set
            </summary>
        </member>
        <member name="F:EZ_B.Movement.DroneForwardReverseRate">
            <summary>
            Specifies the rate for moving a drone forward and reverse
            </summary>
        </member>
        <member name="F:EZ_B.Movement.DroneYawLeftRightRate">
            <summary>
            Specifies the rate for turning a drone
            </summary>
        </member>
        <member name="F:EZ_B.Movement.DroneUpDownRate">
            <summary>
            Specifies the rate for raising and lowering a drone
            </summary>
        </member>
        <member name="F:EZ_B.Movement.DroneRollLeftRightRate">
            <summary>
            Specifies the rate for rolling left or right
            </summary>
        </member>
        <member name="F:EZ_B.Movement.MIPUartPort">
            <summary>
            WowWee MIP UART Interface Port. By default, it uses the default UART 0 peripheral interface
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GetSpeed">
            <summary>
            Get the global speed
            </summary>
            <param name="speed"></param>
            <returns></returns>
        </member>
        <member name="M:EZ_B.Movement.GetSpeedLeft">
            <summary>
            Get the global speed for Left wheel
            </summary>
            <param name="speed"></param>
            <returns></returns>
        </member>
        <member name="M:EZ_B.Movement.GetSpeedRight">
            <summary>
            Get the global speed for Right wheel
            </summary>
            <param name="speed"></param>
            <returns></returns>
        </member>
        <member name="M:EZ_B.Movement.SetSpeed(System.Byte)">
            <summary>
            Set the global speed
            </summary>
        </member>
        <member name="M:EZ_B.Movement.SetSpeed(System.Byte,System.Byte)">
            <summary>
            Set the global speed
            </summary>
        </member>
        <member name="M:EZ_B.Movement.SetSpeedLeft(System.Byte)">
            <summary>
            Set the left speed
            </summary>
        </member>
        <member name="M:EZ_B.Movement.SetSpeedRight(System.Byte)">
            <summary>
            Set the right speed
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoStop">
            <summary>
            Stops the robot if moving
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoForward(System.Byte)">
            <summary>
            Moves robot forward at specified speed
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoForward(System.Byte,System.Byte)">
            <summary>
            Moves robot forward at specified speed
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoForward">
            <summary>
            Moves robot forward
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoReverse(System.Byte)">
            <summary>
            Moves robot backward at specified speed
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoReverse(System.Byte,System.Byte)">
            <summary>
            Moves robot backward at specified speed
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoReverse">
            <summary>
            Moves robot backward
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoLeft(System.Byte)">
            <summary>
            Turns robot left at specified speed
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoLeft(System.Byte,System.Byte)">
            <summary>
            Turns robot left at specified speed
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoLeft">
            <summary>
            Turns robot left
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoRight(System.Byte)">
            <summary>
            Turns robot right at specified speed
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoRight(System.Byte,System.Byte)">
            <summary>
            Turns robot right at specified speed
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoRight">
            <summary>
            Turns robot right
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoUp">
            <summary>
            Robot Goes Up (Drone flying robots)
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoDown">
            <summary>
            Robot Goes Down (Drone flying robots)
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoRollRight">
            <summary>
            Robot Rolls Right (Drone flying robots)
            </summary>
        </member>
        <member name="M:EZ_B.Movement.GoRollLeft">
            <summary>
            Robot Rolls Left (Drone flying robots)
            </summary>
        </member>
        <member name="E:EZ_B.Movement.OnMovement">
            <summary>
            Event risen when for movement action
            </summary>
        </member>
        <member name="E:EZ_B.Movement.OnSpeedChanged">
            <summary>
            Event risen when for speed changed
            </summary>
        </member>
        <member name="P:EZ_B.Movement.MovementType">
            <summary>
            Set the type of movement type this control will use (Servo or HBridge?)
            </summary>
        </member>
        <member name="P:EZ_B.Movement.GetCurrentDirection">
            <summary>
            Get the current direction
            </summary>
        </member>
        <member name="M:EZ_B.Functions.DisplayBitSequence(System.Int32)">
            <summary>
            Displays the bit sequence of an integer value.
            </summary>
            <param name="value">The integer value.</param>
            <returns>A string with the bit pattern representing the integer.</returns>
            <example>The integer value '751' would result in '00000000000000000000001011101111', can be verified with calculator.</example>
            <remarks>This is a method used frequently during testing.</remarks>
        </member>
        <member name="M:EZ_B.Functions.GetWebResponse(System.String)">
            <summary>
            Get the data from a web request
            </summary>
            
        </member>
        <member name="M:EZ_B.Functions.IsInternetConnected">
            <summary>
             Check if there is a valid connection to the wwww.ez-robot.com website
            </summary>
            <returns></returns>
        </member>
        <member name="M:EZ_B.Functions.SetBitValue(System.Int32,System.Int32)">
            <summary>
            Sets the bit in an integer value at the requested position.
            </summary>
            <param name="value">The integer value.</param>
            <param name="position">The position at which to set the bit.</param>
            <returns>The integer value with the bit set.</returns>
        </member>
        <member name="M:EZ_B.Functions.ClearBitValue(System.Int32,System.Int32)">
            <summary>
            Clears the bit in an integer value at the requested position.
            </summary>
            <param name="value">The integer value.</param>
            <param name="position">The position at which to clear the bit.</param>
            <returns>The integer value with the bit cleared.</returns>
        </member>
        <member name="M:EZ_B.Functions.FlipBitValue(System.Int32,System.Int32)">
            <summary>
            Flips the bit in an integer value at the requested position.
            </summary>
            <param name="value">The integer value.</param>
            <param name="position">The position at which to flip the bit.</param>
            <returns>The integer value with the bit flipped.</returns>
        </member>
        <member name="M:EZ_B.Functions.ConvertStringToByteArray(System.String)">
            <summary>
            Converts the string to a byte array containing the ASCII values of each char.
            </summary>
            <param name="ssid">The ssid.</param>
            <returns></returns>
        </member>
        <member name="M:EZ_B.Functions.ConvertByteArrayToString(System.Byte[])">
            <summary>
            Converts the byte array to a string.
            </summary>
            <param name="buffer">The byte sequence.</param>
            <returns>A string representing the byte array.</returns>
        </member>
        <member name="M:EZ_B.Functions.ConvertByteArrayToString(System.Byte[],System.Int32)">
            <summary>
            Converts the byte array to a string.
            </summary>
            <param name="buffer">The byte sequence.</param>
            <param name="length">The byte count to use for conversion.</param>
            <returns>A string representing the byte array.</returns>
        </member>
        <member name="M:EZ_B.Functions.ConvertToDecimal(System.Object)">
            <summary>
            Convert ascii object to a decimal value
            </summary>
        </member>
        <member name="M:EZ_B.Functions.Chunk``1(``0[],System.Int32)">
            <summary>
            Returns an IEnumerable of input list split into the number of specified parts
            </summary>
        </member>
        <member name="M:EZ_B.Functions.IsByte(System.Object)">
            <summary>
            Returns true if the InObj is a byte value 
            </summary>
        </member>
        <member name="M:EZ_B.Functions.IsNumeric(System.Object)">
            <summary>
            Returns true if the InObj is a numerical value (including int and floating point)
            </summary>
        </member>
        <member name="M:EZ_B.Functions.IsLargerThan(System.Int32,System.Int32[])">
            <summary>
            Returns true if the mainValue is larger than all other values
            </summary>
        </member>
        <member name="M:EZ_B.Functions.IsEqualToo(System.Int32,System.Int32[])">
            <summary>
            Returns true if the mainValue is equal to any other values
            </summary>
        </member>
        <member name="M:EZ_B.Functions.IsEqualToo(System.Char,System.Char[])">
            <summary>
            Returns true if the mainValue is equal to any other values
            </summary>
        </member>
        <member name="M:EZ_B.Functions.CompareColors(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Compares Color A from Color B and returns the difference
            </summary>
        </member>
        <member name="M:EZ_B.Functions.WithinRange(System.Int32,EZ_B.Functions.Range)">
            <summary>
            Returns true if the number falls within the high and low range
            </summary>
        </member>
        <member name="M:EZ_B.Functions.WithinRange(System.Decimal,EZ_B.Functions.Range)">
            <summary>
            Returns true if the number falls within the high and low range
            </summary>
        </member>
        <member name="M:EZ_B.Functions.WithinRange(System.Double,EZ_B.Functions.Range)">
            <summary>
            Returns true if the number falls within the high and low range
            </summary>
        </member>
        <member name="M:EZ_B.Functions.EndsWith(System.Boolean,System.Object,System.String[])">
            <summary>
            Extension of the String.EndsWith but allows an array of items to check for rather than just one.
            </summary>
        </member>
        <member name="M:EZ_B.Functions.Contains(System.Boolean,System.Object,System.String[])">
            <summary>
            Extension of the String.Contains but allows an array of items to check for rather than just one.
            </summary>
        </member>
        <member name="M:EZ_B.Functions.Diff(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns true if the difference between Master and Compare is greater then Diff
            </summary>
        </member>
        <member name="M:EZ_B.Functions.Diff(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Returns true if the difference between Master and Compare is greater then Diff
            </summary>
        </member>
        <member name="M:EZ_B.Functions.IsBitSet(System.Int32,System.Int32)">
            <summary>
            Returns true if the specified bit in the byte is 1. false if not. 0 is LSB, 7 is MSB
            </summary>
        </member>
        <member name="M:EZ_B.Functions.ByteToBinaryString(System.Byte)">
            <summary>
            Converts a byte to a binary string
            </summary>
        </member>
        <member name="M:EZ_B.Functions.ByteToBinaryString(System.Byte,System.String)">
            <summary>
            Converts a byte to a binary string
            </summary>
        </member>
        <member name="M:EZ_B.Functions.ToByteFromBinary(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a byte from specified binary. LSB is val0. MSB is val7
            </summary>
        </member>
        <member name="M:EZ_B.Functions.ToByteFromBinary(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a byte out of the binary. The inputs for each bit an either be a 0 or a 1. The LSB is val0. MSB is val7
            </summary>
        </member>
        <member name="M:EZ_B.Functions.GetScalarFromRange(System.Int32,System.Single,System.Single)">
            <summary>
            Returns a scalar. Used for converting one range into another range. (i.e. Wii Input Remote X/Y/Z to Servo Positions)
            </summary>
        </member>
        <member name="M:EZ_B.Functions.GetScalarFromRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a scalar. Used for converting one range into another range. (i.e. Wii Input Remote X/Y/Z to Servo Positions)
            </summary>
        </member>
        <member name="M:EZ_B.Functions.GetScalarFromRange(System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns a scalar. Used for converting one range into another range. (i.e. Wii Input Remote X/Y/Z to Servo Positions)
            </summary>
        </member>
        <member name="M:EZ_B.Functions.SingleToInt32Bits(System.Single)">
            <summary>
            Converts a Float to an IEEE754 Compliant Integer
            </summary>
        </member>
        <member name="M:EZ_B.Functions.GetShortestAngle(System.Int32,System.Int32)">
            <summary>
            Returns the shortest angle between two angles (Absolute, no negatives)
            </summary>
        </member>
        <member name="M:EZ_B.Functions.GetAngle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the angle of the second point relative to the first point
            </summary>
        </member>
        <member name="M:EZ_B.Functions.GetAngle(System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Get the angle of the second point relative to the first point
            </summary>
        </member>
        <member name="M:EZ_B.Functions.GetAngle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Get the angle of the second point relative to the first point
            </summary>
        </member>
        <member name="M:EZ_B.Functions.GetDistance(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the distance between two points on a 2d vector
            </summary>
        </member>
        <member name="M:EZ_B.Functions.StripHTML(System.String)">
            <summary>
            Remove all html tags
            </summary>
            <param name="inStr"></param>
            <returns></returns>
        </member>
        <member name="M:EZ_B.Functions.CopyTo(System.Object,System.Object)">
            <summary>
            Copy object to object
            </summary>
        </member>
        <member name="M:EZ_B.Functions.HsvToRgb(System.Double,System.Double,System.Double)">
            <summary>
            Convert HSV to RGB Color
            h is from 0-360
            s,v values are 0-1
            r,g,b values are 0-255
            </summary>
        </member>
        <member name="M:EZ_B.Functions.ClampDouble(System.Double,System.Double,System.Double)">
            <summary>
            Clamp a value
            </summary>
        </member>
        <member name="M:EZ_B.Functions.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamp a value to range
            </summary>
        </member>
        <member name="M:EZ_B.Functions.Clamp(System.Int32)">
            <summary>
            Clamp a value to 0-255
            </summary>
        </member>
        <member name="M:EZ_B.Functions.DegX(System.Double,System.Double)">
            <summary>
             Returns the degree X co-ordinate for a circle
             i.e. Plot(DegX(10, 20), DegY(10, 20));
            </summary>
        </member>
        <member name="M:EZ_B.Functions.DegY(System.Double,System.Double)">
            <summary>
             Returns the degree Y co-ordinate for a circle
             i.e. Plot(DegX(10, 20), DegY(10, 20));
            </summary>
        </member>
        <member name="F:EZ_B.Servo.SERVO_SPEED_FASTEST">
            <summary>
             The slowest speed for a servo (0)
            </summary>
        </member>
        <member name="F:EZ_B.Servo.SERVO_SPEED_SLOWEST">
            <summary>
            The slowest speed for a servo (20)
            </summary>
        </member>
        <member name="F:EZ_B.Servo.SERVO_MAX">
            <summary>
             The maximum value for a servo (100)
            </summary>
        </member>
        <member name="F:EZ_B.Servo.SERVO_CENTER">
            <summary>
             The ideal center value of a servo (50 for EZ-B v3 and 90 for EZ-B v4)
            </summary>
        </member>
        <member name="F:EZ_B.Servo.SERVO_MIN">
            <summary>
             The minimum value of a servo (1)
            </summary>
        </member>
        <member name="F:EZ_B.Servo.SERVO_OFF">
            <summary>
             The value of a servo to disable
            </summary>
        </member>
        <member name="M:EZ_B.Servo.ResetServoFineTune">
            <summary>
             Reset the fine tuning values to 0 for each servo
            </summary>
        </member>
        <member name="M:EZ_B.Servo.GetServoFineTune(EZ_B.Servo.ServoPortEnum)">
            <summary>
            Return the fine tunign value of the specified servo
            </summary>
        </member>
        <member name="M:EZ_B.Servo.SetServoFineTune(EZ_B.Servo.ServoPortEnum,System.Int32)">
            <summary>
            Set the fine tuning value for the specified servo. This means that if the fine tune value for a servo is set to 1, then every position that is specified will be incremented by 1.
            This allows you to fine tune a servo position across the entire application.
            </summary>
        </member>
        <member name="M:EZ_B.Servo.ResetServoMinLimits">
            <summary>
             Reset the servo min value
            </summary>
        </member>
        <member name="M:EZ_B.Servo.GetServoMin(EZ_B.Servo.ServoPortEnum)">
            <summary>
            Return the min value that this servo will ever move 
            </summary>
        </member>
        <member name="M:EZ_B.Servo.SetServoMin(EZ_B.Servo.ServoPortEnum,System.Int32)">
            <summary>
            Set the mininum servo value that this servo will ever be able to go
            </summary>
        </member>
        <member name="M:EZ_B.Servo.ResetServoMaxLimits">
            <summary>
             Reset the servo max value
            </summary>
        </member>
        <member name="M:EZ_B.Servo.GetServoMax(EZ_B.Servo.ServoPortEnum)">
            <summary>
            Return the max value that this servo will ever move 
            </summary>
        </member>
        <member name="M:EZ_B.Servo.SetServoMax(EZ_B.Servo.ServoPortEnum,System.Int32)">
            <summary>
            Set the mininum servo value that this servo will ever be able to go
            </summary>
        </member>
        <member name="M:EZ_B.Servo.SetServoPosition(EZ_B.Servo.ServoPortEnum,System.Int32,System.Int32)">
            <summary>
            Set the speed and position of a servo
            </summary>
        </member>
        <member name="M:EZ_B.Servo.SetServoPosition(EZ_B.Servo.ServoPortEnum,System.Int32)">
            <summary>
            Set the position of a servo
            Uses the last speed specified
            </summary>
        </member>
        <member name="M:EZ_B.Servo.SetServoPosition(EZ_B.Classes.ServoPositionItem[])">
            <summary>
            Set the position of a servo
            Uses the last speed specified
            </summary>
        </member>
        <member name="M:EZ_B.Servo.SetServoSpeed(EZ_B.Servo.ServoPortEnum,System.Int32)">
            <summary>
            Set the speed of a servo
            </summary>
        </member>
        <member name="M:EZ_B.Servo.SetServoSpeed(EZ_B.Servo.ServoPortEnum[],System.Int32)">
            <summary>
            Set the speed of multiple servos
            </summary>
            <param name="servoPort"></param>
            <param name="speed"></param>
        </member>
        <member name="M:EZ_B.Servo.GetServoSpeed(EZ_B.Servo.ServoPortEnum)">
            <summary>
            Return the current speed of a servo
            </summary>
        </member>
        <member name="M:EZ_B.Servo.GetServoPosition(EZ_B.Servo.ServoPortEnum)">
            <summary>
            Get the position of a servo
            </summary>
        </member>
        <member name="M:EZ_B.Servo.ReleaseServo(EZ_B.Servo.ServoPortEnum)">
            <summary>
            Release servo. Release a servo from holding its position.
            If modified, stops the servo.
            </summary>
        </member>
        <member name="M:EZ_B.Servo.ReleaseAllServos">
            <summary>
             When servos have been used, they will hold their position until the EZ-B power is cycled or until they are told to release.
             This will send a command to the EZ-B to release all servos
            </summary>
        </member>
        <member name="M:EZ_B.Servo.ResetAllServoSpeeds">
            <summary>
            Reset all the servo speeds to their default of 0 (fastest)
            </summary>
        </member>
        <member name="M:EZ_B.Servo.IsServoReleased(EZ_B.Servo.ServoPortEnum)">
            <summary>
            Return true if the specified servo port is in a released state
            </summary>
        </member>
        <member name="E:EZ_B.Servo.OnServoMove">
            <summary>
            Event that is raised when a servo is moved
            </summary>
        </member>
        <member name="E:EZ_B.Servo.OnServoSpeed">
            <summary>
            Event that is raised when a servo speed setting is changed
            </summary>
        </member>
        <member name="E:EZ_B.Servo.OnServoRelease">
            <summary>
            Event that is raised when a servo is released
            </summary>
        </member>
        <member name="T:EZ_B.Servo.ServoPortEnum">
            <summary>
            List of Servo Ports
            </summary>
        </member>
        <member name="F:EZ_B.SpeechSynth.AudioLevel">
            <summary>
            The normalized level of the spoken audio from the input device
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.PauseListening">
            <summary>
            Pause listening
            </summary>
            <returns></returns>
        </member>
        <member name="M:EZ_B.SpeechSynth.ResumeListening">
            <summary>
            Resume listening if paused
            </summary>
            <returns></returns>
        </member>
        <member name="M:EZ_B.SpeechSynth.GetInstalledCultures">
            <summary>
            Get the list of installed languages for recognition
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.GetInstalledVoices">
            <summary>
            Get the list of installed voices within the system
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.SetVoice(System.String)">
            <summary>
            Set the active voice to be used when speaking
            </summary>
            <param name="voiceName"></param>
        </member>
        <member name="M:EZ_B.SpeechSynth.Say(System.String)">
            <summary>
            Say MSG to the default audio device
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.SayToFile(System.String,System.String)">
            <summary>
            Say MSG to the specified filename
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.SayToBytes(System.String)">
            <summary>
            Say MSG and return the raw bytes in 8 bit, 16000, mono PCM
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.SayToStream(System.String)">
            <summary>
            Say MSG to memory stream in 8 bit, 16000, mono PCM
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.SayWait(System.String)">
            <summary>
            Say MSG to the default audio device
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.SayStop">
            <summary>
            Stop speaking the current spoken message
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.SetDictionaryOfPhrases(System.String[])">
            <summary>
            Load the dictionary with custom recgonized phrases.
            </summary>    
        </member>
        <member name="M:EZ_B.SpeechSynth.AppendDictionaryOfPhrases(System.String[])">
            <summary>
            Append to the dictionary with custom recgonized phrases.
            </summary>    
        </member>
        <member name="M:EZ_B.SpeechSynth.ClearDictionary">
            <summary>
            Clear the grammar dictionary. Use this before appending to the grammar dictionary for complex speech interaction.
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.AppendDictionaryFromGrammar(System.Speech.Recognition.GrammarBuilder)">
            <summary>
            Appends to the existing grammar dictionary. Use this to build your own grammar rather for complex speech interaction
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.SetDictionaryFromGrammar(System.Speech.Recognition.GrammarBuilder)">
            <summary>
            Sets the grammar dictionary. Use this to build your own grammar rather for complex speech interaction
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.SetDictionaryToAllLocale">
            <summary>
            Load the dictionary with all known words for your locale. 
            Remember, there will be a lot of recognition errors if you do this.
            It's always best to populate your own list of phrases using SetDictionaryOfPhrases() method.
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.ListenForSpeechCommand(System.Int32)">
            <summary>
            Blocks and listens for a speech command.
            Returns the text of the recognized speech.
            Returns string.empty if timeout occures.
            Requires Windows 7 or higher.
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.StartListening">
            <summary>
            Start listening for voice recognition. PhraseRecognized event will be called with success.
            Requires Windows 7 or higher
            </summary>
        </member>
        <member name="M:EZ_B.SpeechSynth.StopListening">
            <summary>
            Disable listening for voice recognition.
            </summary>
        </member>
        <member name="E:EZ_B.SpeechSynth.OnPhraseRecognized">
            <summary>
            Event thrown when text is recognized. 
            The confidence value is between 0.00 and 1.00. The higher the number, the more confidence.
            It's usually safe to trust confidence > 0.80
            Text will be returned in lowercase!
            </summary>
        </member>
        <member name="E:EZ_B.SpeechSynth.OnSpeaking">
            <summary>
            Event executed before text to speech is executed
            </summary>
        </member>
        <member name="E:EZ_B.SpeechSynth.OnSpeakingCompleted">
            <summary>
            Event executed when the speaking has completed
            </summary>
        </member>
        <member name="E:EZ_B.SpeechSynth.OnAudioLevelChanged">
            <summary>
            Event is thrown when the audio level has changed from the default input audio device
            </summary>
        </member>
        <member name="P:EZ_B.SpeechSynth.IsListening">
            <summary>
            Returns the status of the voice recognition listenner.
            True listener is enabled.
            False listener is disabled.
            </summary>
        </member>
        <member name="P:EZ_B.SpeechSynth.GetCurrentCulture">
            <summary>
            Return the current culture
            </summary>
        </member>
        <member name="P:EZ_B.SpeechSynth.SpeechVolume">
            <summary>
            Get or Set the volume of speech
            </summary>
        </member>
        <member name="M:EZ_B.TellyMate.SendText(System.String)">
            <summary>
            Send the text to a Tellymate on port D0 with optional carriage return
            </summary>
        </member>
        <member name="M:EZ_B.TellyMate.SendText(System.String,System.Boolean)">
            <summary>
            Send the text to a Tellymate on port D0 with optional carriage return
            </summary>
        </member>
        <member name="M:EZ_B.TellyMate.SendCommand(EZ_B.TellyMate.CmdEnum)">
            <summary>
            Sent a command to the TellyMate
            </summary>
        </member>
        <member name="M:EZ_B.TellyMate.MoveCursor(System.Int32,System.Int32)">
            <summary>
            Move the cursor to specified position
            </summary>
        </member>
        <member name="M:EZ_B.TellyMate.SetFontAttrib(EZ_B.TellyMate.FontAttribEnum)">
            <summary>
            Set the font attribute
            </summary>
        </member>
        <member name="T:EZ_B.TellyMate.CmdEnum">
            <summary>
            List of TellyMate Commands
            </summary>
        </member>
        <member name="T:EZ_B.TellyMate.FontAttribEnum">
            <summary>
            List of TellyMate Font Attributes
            </summary>
        </member>
        <member name="M:EZ_B.Uart.SetBaudClock(EZ_B.Uart.BAUD_RATE_ENUM,System.Int32)">
            <summary>
            Specify the clock delay between bytes in cycles of the EZ-B's 120mhz 32 Bit ARM processor. This would only need to be used to fine tune the baudrate timing if the connected device is not very accurate or requires a diffference in timing.
            For example, some open-source hardware platforms use Software Serial drivers, which sometimes need a little bit of tweaking. Generally, you should never need to change these values.
            However, there is a Custom labelled baudrate which you can change for specific speeds. 
            Anyone adjusting these speeds will need a logic analyzer, such as the Saleae Logic16 or Logic32
            </summary>
        </member>
        <member name="M:EZ_B.Uart.SendSerial(EZ_B.Digital.DigitalPortEnum,EZ_B.Uart.BAUD_RATE_ENUM,System.String)">
            <summary>
            Send text over serial specified serial port at baud rate
            </summary>
        </member>
        <member name="M:EZ_B.Uart.SendSerial(EZ_B.Digital.DigitalPortEnum,EZ_B.Uart.BAUD_RATE_ENUM,System.Char[])">
            <summary>
            Send text over serial specified serial port at baud rate
            </summary>
        </member>
        <member name="M:EZ_B.Uart.SendSerial(EZ_B.Digital.DigitalPortEnum,EZ_B.Uart.BAUD_RATE_ENUM,System.Byte)">
            <summary>
            Send text over serial specified serial port at baud rate
            </summary>
        </member>
        <member name="M:EZ_B.Uart.SendSerial(EZ_B.Digital.DigitalPortEnum,EZ_B.Uart.BAUD_RATE_ENUM,System.Byte[])">
            <summary>
            Send text over serial specified serial port at baud rate
            </summary>
        </member>
        <member name="M:EZ_B.Uart.UARTExpansionInit(System.Int32,System.UInt32)">
            <summary>
            Initialize the ez-b v4 UART. this must be called before any other UARTExpansion function.
            </summary>
            <param name="port">Can be 0, 1, 2</param>
            <param name="baudRate">The baud rate to use</param>
        </member>
        <member name="M:EZ_B.Uart.UARTExpansionWrite(System.Int32,System.Byte[])">
            <summary>
            Write to the EZ-B v4 Uart
            </summary>
            <param name="port">Can be 0, 1, 2</param>
            <param name="data">bytes to send</param>
        </member>
        <member name="M:EZ_B.Uart.UARTExpansionAvailableBytes(System.Int32)">
            <summary>
            Read the number of bytes available in the EZ-B v4 uart buffer
            </summary>
            <param name="port">Can be 0, 1, 2</param>
            <returns>The number of bytes in the UART input buffer</returns>
        </member>
        <member name="M:EZ_B.Uart.UARTExpansionRead(System.Int32,System.Int32)">
            <summary>
            return the specified number of bytes from the ez-b v4 uart input buffer
            </summary>
            <param name="port">the uart port of the ez-b v4. Can be 0, 1, 2</param>
            <param name="bytesToRead">the number of bytes to read</param>
            <returns>byte array of data from the ez-b v4 uart buffer</returns>
        </member>
        <member name="M:EZ_B.Uart.UARTExpansionReadAvailable(System.Int32)">
            <summary>
            Read all available bytes from the UART on the EZ-B v4
            </summary>
            <param name="port">integer value of the port. Can be 0, 1, 2</param>
            <returns>bytes array of the data in the ez-b v4 uart buffer</returns>
        </member>
        <member name="M:EZ_B.Joystick.Joystick.GetCurrentStatus">
            <summary>
            Get Current Joystick Status
            </summary>
        </member>
        <member name="M:EZ_B.Joystick.Joystick.RefreshState">
            <summary>
            Call this to refresh the state of the joystick
            You may call this in a timer every 100 or 200ms
            </summary>
        </member>
        <member name="M:EZ_B.Joystick.Joystick.DisposeOverride">
            <summary>
            Drop the current joystick device. Stops listening and forgets device.
            </summary>
        </member>
        <member name="M:EZ_B.Joystick.Joystick.StartEventWatcher">
            <summary>
            Start the watcher for joystick event notifications
            </summary>
        </member>
        <member name="M:EZ_B.Joystick.Joystick.StopEventWatcher">
            <summary>
            Stop the watcher for joystick evet notifications
            </summary>
        </member>
        <member name="M:EZ_B.Joystick.Joystick.ButtonPressed(System.Int32)">
            <summary>
            Returns True if a button is pressed, False if it is not
            </summary>
        </member>
        <member name="M:EZ_B.Joystick.Joystick.ButtonStateChanged(System.Int32)">
            <summary>
            Returns true if the state of the button has changed since last update
            </summary>
        </member>
        <member name="M:EZ_B.Joystick.Joystick.AxisXStateChanged">
            <summary>
            Returns true if the X Axis location has changed since last update
            </summary>
        </member>
        <member name="M:EZ_B.Joystick.Joystick.AxisYStateChanged">
            <summary>
            Returns True if the Y Axis has changed since last update
            </summary>
            <returns></returns>
        </member>
        <member name="M:EZ_B.Joystick.Joystick.AxisZStateChanged">
            <summary>
            Returns True if the Z Axis has changed since last update.
            Z Axis is the second analog joystick (if equiped)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EZ_B.Joystick.Joystick.AxisRzStateChanged">
            <summary>
            Returns True if the Rz Axis has changed since last update.
            Rz Axis is the second analog joystick (if equiped)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EZ_B.Joystick.Joystick.AxisUStateChanged">
            <summary>
            Returns True if the U Axis has changed since last update.
            U Axis is the second analog joystick (if equiped)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EZ_B.Joystick.Joystick.AxisVStateChanged">
            <summary>
            Returns True if the V Axis has changed since last update.
            V Axis is the second analog joystick (if equiped)
            </summary>
            <returns></returns>
        </member>
        <member name="E:EZ_B.Joystick.Joystick.OnControllerAction">
            <summary>
            Event risen when for joystick action
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.Joystick.GetJoystickDevice">
            <summary>
            Information about initialized joystick.
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.Joystick.EventWatcherResolution">
            <summary>
            Overrides the event notification timer resolution. 
            The smaller the number, higher the response resolution.
            Higher number, lower resolution. Higher resolution will consume more CPU, so be careful not to set this too low.
            Default is 200ms
            </summary>
            <param name="ms"></param>
        </member>
        <member name="P:EZ_B.Joystick.Joystick.IsEventWatcherRunning">
            <summary>
            Check if the timer event notification thread is running
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.Joystick.GetAxisX">
            <summary>
            Returns the int value of the X Axis
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.Joystick.GetAxisY">
            <summary>
            Returns the int value of the Y Axis
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.Joystick.GetAxisZ">
            <summary>
            Returns the int value of the Z Axis
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.Joystick.GetAxisRz">
            <summary>
            Returns the int value of the Rz Axis
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.Joystick.GetAxisU">
            <summary>
            Returns the int value of the U Axis
            </summary>
        </member>
        <member name="P:EZ_B.Joystick.Joystick.GetAxisV">
            <summary>
            Returns the int value of the V Axis
            </summary>
        </member>
        <member name="T:EZ_B.Joystick.Joystick.OnJoystickMoveHandler">
            <summary>
            Event risen when for joystick action
            </summary>
        </member>
    </members>
</doc>
